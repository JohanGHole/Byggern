
Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000212  00800100  00002be8  00002c7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002be8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  00800312  00800312  00002e8e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002e8e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003d0  00000000  00000000  00002eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003a6d  00000000  00000000  000032ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000016ab  00000000  00000000  00006d27  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000015ce  00000000  00000000  000083d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a7c  00000000  00000000  000099a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000abb  00000000  00000000  0000a41c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002012  00000000  00000000  0000aed7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000370  00000000  00000000  0000cee9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__ctors_end>
       4:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
       8:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
       c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      10:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      14:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      18:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      1c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      20:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      24:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      28:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      2c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      30:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      34:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      38:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      3c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      40:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      44:	0c 94 89 0a 	jmp	0x1512	; 0x1512 <__vector_17>
      48:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      4c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      50:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      54:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      58:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      5c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      60:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      64:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      68:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      6c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	00 5c       	subi	r16, 0xC0	; 192
      a4:	00 00       	nop
      a6:	0c 00       	.word	0x000c	; ????
      a8:	0c 00       	.word	0x000c	; ????
      aa:	7c 28       	or	r7, r12
      ac:	7c 28       	or	r7, r12
      ae:	58 dc       	rcall	.-1872   	; 0xfffff960 <__eeprom_end+0xff7ef960>
      b0:	68 00       	.word	0x0068	; ????
      b2:	24 10       	cpse	r2, r4
      b4:	48 00       	.word	0x0048	; ????
      b6:	28 54       	subi	r18, 0x48	; 72
      b8:	28 40       	sbci	r18, 0x08	; 8
      ba:	00 0c       	add	r0, r0
      bc:	00 00       	nop
      be:	00 78       	andi	r16, 0x80	; 128
      c0:	84 00       	.word	0x0084	; ????
      c2:	84 78       	andi	r24, 0x84	; 132
      c4:	00 00       	nop
      c6:	54 38       	cpi	r21, 0x84	; 132
      c8:	54 00       	.word	0x0054	; ????
      ca:	10 7c       	andi	r17, 0xC0	; 192
      cc:	10 00       	.word	0x0010	; ????
      ce:	80 40       	sbci	r24, 0x00	; 0
      d0:	00 00       	nop
      d2:	10 10       	cpse	r1, r0
      d4:	10 00       	.word	0x0010	; ????
      d6:	00 40       	sbci	r16, 0x00	; 0
      d8:	00 00       	nop
      da:	60 10       	cpse	r6, r0
      dc:	0c 00       	.word	0x000c	; ????
      de:	38 54       	subi	r19, 0x48	; 72
      e0:	38 00       	.word	0x0038	; ????
      e2:	48 7c       	andi	r20, 0xC8	; 200
      e4:	40 00       	.word	0x0040	; ????
      e6:	48 64       	ori	r20, 0x48	; 72
      e8:	58 00       	.word	0x0058	; ????
      ea:	44 54       	subi	r20, 0x44	; 68
      ec:	2c 00       	.word	0x002c	; ????
      ee:	1c 10       	cpse	r1, r12
      f0:	7c 00       	.word	0x007c	; ????
      f2:	5c 54       	subi	r21, 0x4C	; 76
      f4:	24 00       	.word	0x0024	; ????
      f6:	38 54       	subi	r19, 0x48	; 72
      f8:	24 00       	.word	0x0024	; ????
      fa:	64 14       	cp	r6, r4
      fc:	0c 00       	.word	0x000c	; ????
      fe:	68 54       	subi	r22, 0x48	; 72
     100:	2c 00       	.word	0x002c	; ????
     102:	48 54       	subi	r20, 0x48	; 72
     104:	38 00       	.word	0x0038	; ????
     106:	00 48       	sbci	r16, 0x80	; 128
     108:	00 00       	nop
     10a:	80 48       	sbci	r24, 0x80	; 128
     10c:	00 00       	nop
     10e:	10 28       	or	r1, r0
     110:	44 00       	.word	0x0044	; ????
     112:	28 28       	or	r2, r8
     114:	28 00       	.word	0x0028	; ????
     116:	44 28       	or	r4, r4
     118:	10 00       	.word	0x0010	; ????
     11a:	04 54       	subi	r16, 0x44	; 68
     11c:	08 00       	.word	0x0008	; ????
     11e:	38 44       	sbci	r19, 0x48	; 72
     120:	5c 00       	.word	0x005c	; ????
     122:	78 14       	cp	r7, r8
     124:	78 00       	.word	0x0078	; ????
     126:	7c 54       	subi	r23, 0x4C	; 76
     128:	28 00       	.word	0x0028	; ????
     12a:	38 44       	sbci	r19, 0x48	; 72
     12c:	28 00       	.word	0x0028	; ????
     12e:	7c 44       	sbci	r23, 0x4C	; 76
     130:	38 00       	.word	0x0038	; ????
     132:	7c 54       	subi	r23, 0x4C	; 76
     134:	44 00       	.word	0x0044	; ????
     136:	7c 14       	cp	r7, r12
     138:	04 00       	.word	0x0004	; ????
     13a:	38 44       	sbci	r19, 0x48	; 72
     13c:	74 00       	.word	0x0074	; ????
     13e:	7c 10       	cpse	r7, r12
     140:	7c 00       	.word	0x007c	; ????
     142:	44 7c       	andi	r20, 0xC4	; 196
     144:	44 00       	.word	0x0044	; ????
     146:	20 40       	sbci	r18, 0x00	; 0
     148:	3c 00       	.word	0x003c	; ????
     14a:	7c 10       	cpse	r7, r12
     14c:	6c 00       	.word	0x006c	; ????
     14e:	7c 40       	sbci	r23, 0x0C	; 12
     150:	40 00       	.word	0x0040	; ????
     152:	7c 18       	sub	r7, r12
     154:	7c 00       	.word	0x007c	; ????
     156:	78 10       	cpse	r7, r8
     158:	3c 00       	.word	0x003c	; ????
     15a:	38 44       	sbci	r19, 0x48	; 72
     15c:	38 00       	.word	0x0038	; ????
     15e:	7c 14       	cp	r7, r12
     160:	08 00       	.word	0x0008	; ????
     162:	38 44       	sbci	r19, 0x48	; 72
     164:	b8 00       	.word	0x00b8	; ????
     166:	7c 14       	cp	r7, r12
     168:	68 00       	.word	0x0068	; ????
     16a:	48 54       	subi	r20, 0x48	; 72
     16c:	24 00       	.word	0x0024	; ????
     16e:	04 7c       	andi	r16, 0xC4	; 196
     170:	04 00       	.word	0x0004	; ????
     172:	7c 40       	sbci	r23, 0x0C	; 12
     174:	7c 00       	.word	0x007c	; ????
     176:	3c 60       	ori	r19, 0x0C	; 12
     178:	3c 00       	.word	0x003c	; ????
     17a:	7c 30       	cpi	r23, 0x0C	; 12
     17c:	7c 00       	.word	0x007c	; ????
     17e:	6c 10       	cpse	r6, r12
     180:	6c 00       	.word	0x006c	; ????
     182:	0c 70       	andi	r16, 0x0C	; 12
     184:	0c 00       	.word	0x000c	; ????
     186:	64 54       	subi	r22, 0x44	; 68
     188:	4c 00       	.word	0x004c	; ????
     18a:	00 7c       	andi	r16, 0xC0	; 192
     18c:	44 00       	.word	0x0044	; ????
     18e:	0c 10       	cpse	r0, r12
     190:	60 00       	.word	0x0060	; ????
     192:	44 7c       	andi	r20, 0xC4	; 196
     194:	00 00       	nop
     196:	08 04       	cpc	r0, r8
     198:	08 00       	.word	0x0008	; ????
     19a:	80 80       	ld	r8, Z
     19c:	80 00       	.word	0x0080	; ????
     19e:	00 04       	cpc	r0, r0
     1a0:	08 00       	.word	0x0008	; ????
     1a2:	30 48       	sbci	r19, 0x80	; 128
     1a4:	78 00       	.word	0x0078	; ????
     1a6:	7c 48       	sbci	r23, 0x8C	; 140
     1a8:	30 00       	.word	0x0030	; ????
     1aa:	30 48       	sbci	r19, 0x80	; 128
     1ac:	48 00       	.word	0x0048	; ????
     1ae:	30 48       	sbci	r19, 0x80	; 128
     1b0:	7c 00       	.word	0x007c	; ????
     1b2:	30 68       	ori	r19, 0x80	; 128
     1b4:	50 00       	.word	0x0050	; ????
     1b6:	10 78       	andi	r17, 0x80	; 128
     1b8:	14 00       	.word	0x0014	; ????
     1ba:	90 a8       	ldd	r9, Z+48	; 0x30
     1bc:	78 00       	.word	0x0078	; ????
     1be:	7c 08       	sbc	r7, r12
     1c0:	70 00       	.word	0x0070	; ????
     1c2:	50 74       	andi	r21, 0x40	; 64
     1c4:	40 00       	.word	0x0040	; ????
     1c6:	80 80       	ld	r8, Z
     1c8:	74 00       	.word	0x0074	; ????
     1ca:	7c 10       	cpse	r7, r12
     1cc:	68 00       	.word	0x0068	; ????
     1ce:	44 7c       	andi	r20, 0xC4	; 196
     1d0:	40 00       	.word	0x0040	; ????
     1d2:	78 10       	cpse	r7, r8
     1d4:	78 00       	.word	0x0078	; ????
     1d6:	78 08       	sbc	r7, r8
     1d8:	70 00       	.word	0x0070	; ????
     1da:	30 48       	sbci	r19, 0x80	; 128
     1dc:	30 00       	.word	0x0030	; ????
     1de:	f8 28       	or	r15, r8
     1e0:	10 00       	.word	0x0010	; ????
     1e2:	30 48       	sbci	r19, 0x80	; 128
     1e4:	f8 00       	.word	0x00f8	; ????
     1e6:	78 10       	cpse	r7, r8
     1e8:	08 00       	.word	0x0008	; ????
     1ea:	50 58       	subi	r21, 0x80	; 128
     1ec:	28 00       	.word	0x0028	; ????
     1ee:	08 3c       	cpi	r16, 0xC8	; 200
     1f0:	48 00       	.word	0x0048	; ????
     1f2:	38 40       	sbci	r19, 0x08	; 8
     1f4:	78 00       	.word	0x0078	; ????
     1f6:	38 40       	sbci	r19, 0x08	; 8
     1f8:	38 00       	.word	0x0038	; ????
     1fa:	78 20       	and	r7, r8
     1fc:	78 00       	.word	0x0078	; ????
     1fe:	48 30       	cpi	r20, 0x08	; 8
     200:	48 00       	.word	0x0048	; ????
     202:	98 a0       	ldd	r9, Y+32	; 0x20
     204:	78 00       	.word	0x0078	; ????
     206:	48 68       	ori	r20, 0x88	; 136
     208:	58 00       	.word	0x0058	; ????
     20a:	10 78       	andi	r17, 0x80	; 128
     20c:	84 00       	.word	0x0084	; ????
     20e:	00 7c       	andi	r16, 0xC0	; 192
     210:	00 00       	nop
     212:	84 78       	andi	r24, 0x84	; 132
     214:	10 00       	.word	0x0010	; ????
     216:	08 04       	cpc	r0, r8
     218:	08 04       	cpc	r0, r8

0000021a <font5>:
     21a:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     22a:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     23a:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     24a:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     25a:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     26a:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     27a:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     28a:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     29a:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     2aa:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     2ba:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     2ca:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2da:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2ea:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2fa:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     30a:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     31a:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     32a:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     33a:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     34a:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     35a:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     36a:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     37a:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     38a:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     39a:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     3aa:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     3ba:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     3ca:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3da:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3ea:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003f5 <font8>:
	...
     3fd:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     40d:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     41d:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     42d:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     43d:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     44d:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     45d:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     46d:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     47d:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     48d:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     49d:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     4ad:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     4bd:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     4cd:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4dd:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4ed:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4fd:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     50d:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     51d:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     52d:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     53d:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     54d:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     55d:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     56d:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     57d:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     58d:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     59d:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     5ad:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     5bd:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     5cd:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5dd:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5ed:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5fd:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     60d:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     61d:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     62d:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     63d:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     64d:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     65d:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     66d:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     67d:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     68d:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     69d:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     6ad:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     6bd:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     6cd:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6dd:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006ee <__ctors_end>:
     6ee:	11 24       	eor	r1, r1
     6f0:	1f be       	out	0x3f, r1	; 63
     6f2:	cf ef       	ldi	r28, 0xFF	; 255
     6f4:	d4 e0       	ldi	r29, 0x04	; 4
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	cd bf       	out	0x3d, r28	; 61

000006fa <__do_copy_data>:
     6fa:	13 e0       	ldi	r17, 0x03	; 3
     6fc:	a0 e0       	ldi	r26, 0x00	; 0
     6fe:	b1 e0       	ldi	r27, 0x01	; 1
     700:	e8 ee       	ldi	r30, 0xE8	; 232
     702:	fb e2       	ldi	r31, 0x2B	; 43
     704:	02 c0       	rjmp	.+4      	; 0x70a <__do_copy_data+0x10>
     706:	05 90       	lpm	r0, Z+
     708:	0d 92       	st	X+, r0
     70a:	a2 31       	cpi	r26, 0x12	; 18
     70c:	b1 07       	cpc	r27, r17
     70e:	d9 f7       	brne	.-10     	; 0x706 <__do_copy_data+0xc>

00000710 <__do_clear_bss>:
     710:	23 e0       	ldi	r18, 0x03	; 3
     712:	a2 e1       	ldi	r26, 0x12	; 18
     714:	b3 e0       	ldi	r27, 0x03	; 3
     716:	01 c0       	rjmp	.+2      	; 0x71a <.do_clear_bss_start>

00000718 <.do_clear_bss_loop>:
     718:	1d 92       	st	X+, r1

0000071a <.do_clear_bss_start>:
     71a:	a6 39       	cpi	r26, 0x96	; 150
     71c:	b2 07       	cpc	r27, r18
     71e:	e1 f7       	brne	.-8      	; 0x718 <.do_clear_bss_loop>
     720:	0e 94 63 06 	call	0xcc6	; 0xcc6 <main>
     724:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <_exit>

00000728 <__bad_interrupt>:
     728:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000072c <ADC_init>:
     72c:	bb 98       	cbi	0x17, 3	; 23
     72e:	08 95       	ret

00000730 <ADC_read>:
     730:	80 93 00 14 	sts	0x1400, r24
     734:	b3 99       	sbic	0x16, 3	; 22
     736:	fe cf       	rjmp	.-4      	; 0x734 <ADC_read+0x4>
     738:	80 91 00 14 	lds	r24, 0x1400
     73c:	08 95       	ret

0000073e <oled_update_buffer>:
#define F_CPU 4915200
#include <util/delay.h>
#include <avr/pgmspace.h>

void oled_update_buffer(uint8_t row, uint8_t column){
	uint8_t page = row/OLED_PAGES;
     73e:	98 2f       	mov	r25, r24
     740:	96 95       	lsr	r25
     742:	96 95       	lsr	r25
     744:	96 95       	lsr	r25
	uint8_t data;
	data = row % OLED_PAGES;
	uint8_t new_data = (1 << data);
	address_sram[(OLED_WIDTH)*page+column] |= new_data;
     746:	e6 2f       	mov	r30, r22
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	20 e8       	ldi	r18, 0x80	; 128
     74c:	92 9f       	mul	r25, r18
     74e:	e0 0d       	add	r30, r0
     750:	f1 1d       	adc	r31, r1
     752:	11 24       	eor	r1, r1
     754:	f8 5e       	subi	r31, 0xE8	; 232
     756:	40 81       	ld	r20, Z
#include <avr/pgmspace.h>

void oled_update_buffer(uint8_t row, uint8_t column){
	uint8_t page = row/OLED_PAGES;
	uint8_t data;
	data = row % OLED_PAGES;
     758:	87 70       	andi	r24, 0x07	; 7
	uint8_t new_data = (1 << data);
     75a:	21 e0       	ldi	r18, 0x01	; 1
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	b9 01       	movw	r22, r18
     760:	02 c0       	rjmp	.+4      	; 0x766 <oled_update_buffer+0x28>
     762:	66 0f       	add	r22, r22
     764:	77 1f       	adc	r23, r23
     766:	8a 95       	dec	r24
     768:	e2 f7       	brpl	.-8      	; 0x762 <oled_update_buffer+0x24>
     76a:	cb 01       	movw	r24, r22
	address_sram[(OLED_WIDTH)*page+column] |= new_data;
     76c:	84 2b       	or	r24, r20
     76e:	80 83       	st	Z, r24
     770:	08 95       	ret

00000772 <oled_buffer_init>:
}
void oled_buffer_init(){
	// looping through SRAM, writing all pages for the display
	for(int col = 0; col < OLED_WIDTH; col++){
     772:	40 e0       	ldi	r20, 0x00	; 0
     774:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t data;
	data = row % OLED_PAGES;
	uint8_t new_data = (1 << data);
	address_sram[(OLED_WIDTH)*page+column] |= new_data;
}
void oled_buffer_init(){
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	60 e0       	ldi	r22, 0x00	; 0
     77a:	0f c0       	rjmp	.+30     	; 0x79a <oled_buffer_init+0x28>
     77c:	f9 01       	movw	r30, r18
     77e:	e8 0f       	add	r30, r24
     780:	f9 1f       	adc	r31, r25
	// looping through SRAM, writing all pages for the display
	for(int col = 0; col < OLED_WIDTH; col++){
		for (int pages = 0; pages < OLED_PAGES; pages++){
			address_sram[(OLED_WIDTH)*pages + col] = 0;
     782:	10 82       	st	Z, r1
     784:	80 58       	subi	r24, 0x80	; 128
     786:	9f 4f       	sbci	r25, 0xFF	; 255
	address_sram[(OLED_WIDTH)*page+column] |= new_data;
}
void oled_buffer_init(){
	// looping through SRAM, writing all pages for the display
	for(int col = 0; col < OLED_WIDTH; col++){
		for (int pages = 0; pages < OLED_PAGES; pages++){
     788:	81 15       	cp	r24, r1
     78a:	e4 e0       	ldi	r30, 0x04	; 4
     78c:	9e 07       	cpc	r25, r30
     78e:	b1 f7       	brne	.-20     	; 0x77c <oled_buffer_init+0xa>
	uint8_t new_data = (1 << data);
	address_sram[(OLED_WIDTH)*page+column] |= new_data;
}
void oled_buffer_init(){
	// looping through SRAM, writing all pages for the display
	for(int col = 0; col < OLED_WIDTH; col++){
     790:	4f 5f       	subi	r20, 0xFF	; 255
     792:	5f 4f       	sbci	r21, 0xFF	; 255
     794:	40 38       	cpi	r20, 0x80	; 128
     796:	51 05       	cpc	r21, r1
     798:	29 f0       	breq	.+10     	; 0x7a4 <oled_buffer_init+0x32>
	uint8_t data;
	data = row % OLED_PAGES;
	uint8_t new_data = (1 << data);
	address_sram[(OLED_WIDTH)*page+column] |= new_data;
}
void oled_buffer_init(){
     79a:	87 2f       	mov	r24, r23
     79c:	96 2f       	mov	r25, r22
     79e:	9a 01       	movw	r18, r20
     7a0:	38 5e       	subi	r19, 0xE8	; 232
     7a2:	ec cf       	rjmp	.-40     	; 0x77c <oled_buffer_init+0xa>
     7a4:	08 95       	ret

000007a6 <oled_buffer_display>:
			address_sram[(OLED_WIDTH)*pages + col] = 0;
		}
	}
}

void oled_buffer_display(){
     7a6:	cf 92       	push	r12
     7a8:	df 92       	push	r13
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
	for (int col = 0; col < OLED_WIDTH; col++){
     7b6:	e1 2c       	mov	r14, r1
     7b8:	f1 2c       	mov	r15, r1
			address_sram[(OLED_WIDTH)*pages + col] = 0;
		}
	}
}

void oled_buffer_display(){
     7ba:	c1 2c       	mov	r12, r1
     7bc:	d1 2c       	mov	r13, r1
     7be:	18 c0       	rjmp	.+48     	; 0x7f0 <oled_buffer_display+0x4a>
	for (int col = 0; col < OLED_WIDTH; col++){
		for (int pages = 0; pages < OLED_PAGES; pages++){
			oled_goto_page(pages);
     7c0:	ce 01       	movw	r24, r28
     7c2:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <oled_goto_page>
			oled_goto_column(col);
     7c6:	c7 01       	movw	r24, r14
     7c8:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <oled_goto_column>
			oled_write_d(address_sram[(OLED_WIDTH*pages)+col]);
     7cc:	f8 01       	movw	r30, r16
     7ce:	80 81       	ld	r24, Z
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 c6 0a 	call	0x158c	; 0x158c <oled_write_d>
	}
}

void oled_buffer_display(){
	for (int col = 0; col < OLED_WIDTH; col++){
		for (int pages = 0; pages < OLED_PAGES; pages++){
     7d6:	21 96       	adiw	r28, 0x01	; 1
     7d8:	00 58       	subi	r16, 0x80	; 128
     7da:	1f 4f       	sbci	r17, 0xFF	; 255
     7dc:	c8 30       	cpi	r28, 0x08	; 8
     7de:	d1 05       	cpc	r29, r1
     7e0:	79 f7       	brne	.-34     	; 0x7c0 <oled_buffer_display+0x1a>
		}
	}
}

void oled_buffer_display(){
	for (int col = 0; col < OLED_WIDTH; col++){
     7e2:	ff ef       	ldi	r31, 0xFF	; 255
     7e4:	ef 1a       	sub	r14, r31
     7e6:	ff 0a       	sbc	r15, r31
     7e8:	80 e8       	ldi	r24, 0x80	; 128
     7ea:	e8 16       	cp	r14, r24
     7ec:	f1 04       	cpc	r15, r1
     7ee:	29 f0       	breq	.+10     	; 0x7fa <oled_buffer_display+0x54>
			address_sram[(OLED_WIDTH)*pages + col] = 0;
		}
	}
}

void oled_buffer_display(){
     7f0:	87 01       	movw	r16, r14
     7f2:	18 5e       	subi	r17, 0xE8	; 232
     7f4:	cc 2d       	mov	r28, r12
     7f6:	dd 2d       	mov	r29, r13
     7f8:	e3 cf       	rjmp	.-58     	; 0x7c0 <oled_buffer_display+0x1a>
			oled_goto_page(pages);
			oled_goto_column(col);
			oled_write_d(address_sram[(OLED_WIDTH*pages)+col]);
		}
	}
}
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	1f 91       	pop	r17
     800:	0f 91       	pop	r16
     802:	ff 90       	pop	r15
     804:	ef 90       	pop	r14
     806:	df 90       	pop	r13
     808:	cf 90       	pop	r12
     80a:	08 95       	ret

0000080c <oled_buffer_rectangle>:

void oled_buffer_rectangle(uint8_t posX,uint8_t posY, uint8_t lengthX, uint8_t lengthY,uint8_t fill){
     80c:	2f 92       	push	r2
     80e:	3f 92       	push	r3
     810:	4f 92       	push	r4
     812:	5f 92       	push	r5
     814:	6f 92       	push	r6
     816:	7f 92       	push	r7
     818:	8f 92       	push	r8
     81a:	9f 92       	push	r9
     81c:	af 92       	push	r10
     81e:	bf 92       	push	r11
     820:	cf 92       	push	r12
     822:	df 92       	push	r13
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	00 d0       	rcall	.+0      	; 0x832 <oled_buffer_rectangle+0x26>
     832:	1f 92       	push	r1
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
	for (int y = posY; y < posY+lengthY; y++){
     838:	c6 2e       	mov	r12, r22
     83a:	d1 2c       	mov	r13, r1
     83c:	a2 2e       	mov	r10, r18
     83e:	b1 2c       	mov	r11, r1
     840:	26 01       	movw	r4, r12
     842:	4a 0c       	add	r4, r10
     844:	5b 1c       	adc	r5, r11
     846:	c4 14       	cp	r12, r4
     848:	d5 04       	cpc	r13, r5
     84a:	ec f5       	brge	.+122    	; 0x8c6 <oled_buffer_rectangle+0xba>
     84c:	db 82       	std	Y+3, r13	; 0x03
     84e:	ca 82       	std	Y+2, r12	; 0x02
		for(int x = posX; x < posX+lengthX; x++){
     850:	88 2e       	mov	r8, r24
     852:	91 2c       	mov	r9, r1
     854:	64 2e       	mov	r6, r20
     856:	71 2c       	mov	r7, r1
     858:	74 01       	movw	r14, r8
     85a:	e6 0c       	add	r14, r6
     85c:	f7 1c       	adc	r15, r7
     85e:	18 2f       	mov	r17, r24
     860:	99 82       	std	Y+1, r9	; 0x01
			if (fill){
				oled_update_buffer(y,x);
			}
			else if (y == posY || y == lengthY-1 || x == posX || x == lengthX-1){
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	a8 1a       	sub	r10, r24
     866:	b1 08       	sbc	r11, r1
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	69 1a       	sub	r6, r25
     86c:	71 08       	sbc	r7, r1
	}
}

void oled_buffer_rectangle(uint8_t posX,uint8_t posY, uint8_t lengthX, uint8_t lengthY,uint8_t fill){
	for (int y = posY; y < posY+lengthY; y++){
		for(int x = posX; x < posX+lengthX; x++){
     86e:	8e 14       	cp	r8, r14
     870:	9f 04       	cpc	r9, r15
     872:	0c f5       	brge	.+66     	; 0x8b6 <oled_buffer_rectangle+0xaa>
     874:	21 2e       	mov	r2, r17
     876:	39 80       	ldd	r3, Y+1	; 0x01
			if (fill){
     878:	00 23       	and	r16, r16
     87a:	29 f0       	breq	.+10     	; 0x886 <oled_buffer_rectangle+0x7a>
				oled_update_buffer(y,x);
     87c:	62 2d       	mov	r22, r2
     87e:	8a 81       	ldd	r24, Y+2	; 0x02
     880:	0e 94 9f 03 	call	0x73e	; 0x73e <oled_update_buffer>
     884:	12 c0       	rjmp	.+36     	; 0x8aa <oled_buffer_rectangle+0x9e>
			}
			else if (y == posY || y == lengthY-1 || x == posX || x == lengthX-1){
     886:	ea 81       	ldd	r30, Y+2	; 0x02
     888:	fb 81       	ldd	r31, Y+3	; 0x03
     88a:	ec 15       	cp	r30, r12
     88c:	fd 05       	cpc	r31, r13
     88e:	49 f0       	breq	.+18     	; 0x8a2 <oled_buffer_rectangle+0x96>
     890:	ae 16       	cp	r10, r30
     892:	bf 06       	cpc	r11, r31
     894:	31 f0       	breq	.+12     	; 0x8a2 <oled_buffer_rectangle+0x96>
     896:	28 14       	cp	r2, r8
     898:	39 04       	cpc	r3, r9
     89a:	19 f0       	breq	.+6      	; 0x8a2 <oled_buffer_rectangle+0x96>
     89c:	62 14       	cp	r6, r2
     89e:	73 04       	cpc	r7, r3
     8a0:	21 f4       	brne	.+8      	; 0x8aa <oled_buffer_rectangle+0x9e>
				oled_update_buffer(y,x);
     8a2:	62 2d       	mov	r22, r2
     8a4:	8a 81       	ldd	r24, Y+2	; 0x02
     8a6:	0e 94 9f 03 	call	0x73e	; 0x73e <oled_update_buffer>
	}
}

void oled_buffer_rectangle(uint8_t posX,uint8_t posY, uint8_t lengthX, uint8_t lengthY,uint8_t fill){
	for (int y = posY; y < posY+lengthY; y++){
		for(int x = posX; x < posX+lengthX; x++){
     8aa:	ff ef       	ldi	r31, 0xFF	; 255
     8ac:	2f 1a       	sub	r2, r31
     8ae:	3f 0a       	sbc	r3, r31
     8b0:	2e 14       	cp	r2, r14
     8b2:	3f 04       	cpc	r3, r15
     8b4:	0c f3       	brlt	.-62     	; 0x878 <oled_buffer_rectangle+0x6c>
		}
	}
}

void oled_buffer_rectangle(uint8_t posX,uint8_t posY, uint8_t lengthX, uint8_t lengthY,uint8_t fill){
	for (int y = posY; y < posY+lengthY; y++){
     8b6:	8a 81       	ldd	r24, Y+2	; 0x02
     8b8:	9b 81       	ldd	r25, Y+3	; 0x03
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	9b 83       	std	Y+3, r25	; 0x03
     8be:	8a 83       	std	Y+2, r24	; 0x02
     8c0:	84 15       	cp	r24, r4
     8c2:	95 05       	cpc	r25, r5
     8c4:	a4 f2       	brlt	.-88     	; 0x86e <oled_buffer_rectangle+0x62>
			else if (y == posY || y == lengthY-1 || x == posX || x == lengthX-1){
				oled_update_buffer(y,x);
			}
		}
	}
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	1f 91       	pop	r17
     8d2:	0f 91       	pop	r16
     8d4:	ff 90       	pop	r15
     8d6:	ef 90       	pop	r14
     8d8:	df 90       	pop	r13
     8da:	cf 90       	pop	r12
     8dc:	bf 90       	pop	r11
     8de:	af 90       	pop	r10
     8e0:	9f 90       	pop	r9
     8e2:	8f 90       	pop	r8
     8e4:	7f 90       	pop	r7
     8e6:	6f 90       	pop	r6
     8e8:	5f 90       	pop	r5
     8ea:	4f 90       	pop	r4
     8ec:	3f 90       	pop	r3
     8ee:	2f 90       	pop	r2
     8f0:	08 95       	ret

000008f2 <CAN_init>:
     8f2:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <SPI_MasterInit>
     8f6:	0e 94 0e 07 	call	0xe1c	; 0xe1c <mcp2515_reset>
     8fa:	40 e0       	ldi	r20, 0x00	; 0
     8fc:	60 ee       	ldi	r22, 0xE0	; 224
     8fe:	8f e0       	ldi	r24, 0x0F	; 15
     900:	0e 94 23 07 	call	0xe46	; 0xe46 <mcp2515_bit_modify>
     904:	08 95       	ret

00000906 <CAN_send>:
     906:	cf 92       	push	r12
     908:	df 92       	push	r13
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
     91a:	2a 97       	sbiw	r28, 0x0a	; 10
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	de bf       	out	0x3e, r29	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	cd bf       	out	0x3d, r28	; 61
     926:	09 83       	std	Y+1, r16	; 0x01
     928:	c1 2e       	mov	r12, r17
     92a:	1a 83       	std	Y+2, r17	; 0x02
     92c:	2b 83       	std	Y+3, r18	; 0x03
     92e:	3c 83       	std	Y+4, r19	; 0x04
     930:	4d 83       	std	Y+5, r20	; 0x05
     932:	5e 83       	std	Y+6, r21	; 0x06
     934:	6f 83       	std	Y+7, r22	; 0x07
     936:	78 87       	std	Y+8, r23	; 0x08
     938:	89 87       	std	Y+9, r24	; 0x09
     93a:	9a 87       	std	Y+10, r25	; 0x0a
     93c:	80 e3       	ldi	r24, 0x30	; 48
     93e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <mcp2515_read>
     942:	83 fd       	sbrc	r24, 3
     944:	fb cf       	rjmp	.-10     	; 0x93c <CAN_send+0x36>
     946:	60 2f       	mov	r22, r16
     948:	62 95       	swap	r22
     94a:	66 0f       	add	r22, r22
     94c:	60 7e       	andi	r22, 0xE0	; 224
     94e:	81 e3       	ldi	r24, 0x31	; 49
     950:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <mcp2515_write>
     954:	60 2f       	mov	r22, r16
     956:	66 95       	lsr	r22
     958:	66 95       	lsr	r22
     95a:	66 95       	lsr	r22
     95c:	82 e3       	ldi	r24, 0x32	; 50
     95e:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <mcp2515_write>
     962:	6c 2d       	mov	r22, r12
     964:	85 e3       	ldi	r24, 0x35	; 53
     966:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <mcp2515_write>
     96a:	d1 2c       	mov	r13, r1
     96c:	1c 14       	cp	r1, r12
     96e:	1d 04       	cpc	r1, r13
     970:	94 f4       	brge	.+36     	; 0x996 <CAN_send+0x90>
     972:	7e 01       	movw	r14, r28
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	e8 0e       	add	r14, r24
     978:	f1 1c       	adc	r15, r1
     97a:	00 e0       	ldi	r16, 0x00	; 0
     97c:	10 e0       	ldi	r17, 0x00	; 0
     97e:	f7 01       	movw	r30, r14
     980:	61 91       	ld	r22, Z+
     982:	7f 01       	movw	r14, r30
     984:	86 e3       	ldi	r24, 0x36	; 54
     986:	80 0f       	add	r24, r16
     988:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <mcp2515_write>
     98c:	0f 5f       	subi	r16, 0xFF	; 255
     98e:	1f 4f       	sbci	r17, 0xFF	; 255
     990:	0c 15       	cp	r16, r12
     992:	1d 05       	cpc	r17, r13
     994:	a4 f3       	brlt	.-24     	; 0x97e <CAN_send+0x78>
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	0e 94 16 07 	call	0xe2c	; 0xe2c <mcp2515_request_to_send>
     99c:	2a 96       	adiw	r28, 0x0a	; 10
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	f8 94       	cli
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	cd bf       	out	0x3d, r28	; 61
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	ff 90       	pop	r15
     9b2:	ef 90       	pop	r14
     9b4:	df 90       	pop	r13
     9b6:	cf 90       	pop	r12
     9b8:	08 95       	ret

000009ba <CAN_recieve>:
     9ba:	9f 92       	push	r9
     9bc:	af 92       	push	r10
     9be:	bf 92       	push	r11
     9c0:	cf 92       	push	r12
     9c2:	df 92       	push	r13
     9c4:	ef 92       	push	r14
     9c6:	ff 92       	push	r15
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	cd b7       	in	r28, 0x3d	; 61
     9d2:	de b7       	in	r29, 0x3e	; 62
     9d4:	2a 97       	sbiw	r28, 0x0a	; 10
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	f8 94       	cli
     9da:	de bf       	out	0x3e, r29	; 62
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	cd bf       	out	0x3d, r28	; 61
     9e0:	7c 01       	movw	r14, r24
     9e2:	9e 01       	movw	r18, r28
     9e4:	25 5f       	subi	r18, 0xF5	; 245
     9e6:	3f 4f       	sbci	r19, 0xFF	; 255
     9e8:	fe 01       	movw	r30, r28
     9ea:	33 96       	adiw	r30, 0x03	; 3
     9ec:	11 92       	st	Z+, r1
     9ee:	e2 17       	cp	r30, r18
     9f0:	f3 07       	cpc	r31, r19
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <CAN_recieve+0x32>
     9f4:	8c e2       	ldi	r24, 0x2C	; 44
     9f6:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <mcp2515_read>
     9fa:	80 fd       	sbrc	r24, 0
     9fc:	0b c0       	rjmp	.+22     	; 0xa14 <CAN_recieve+0x5a>
     9fe:	19 82       	std	Y+1, r1	; 0x01
     a00:	1a 82       	std	Y+2, r1	; 0x02
     a02:	8a e0       	ldi	r24, 0x0A	; 10
     a04:	fe 01       	movw	r30, r28
     a06:	31 96       	adiw	r30, 0x01	; 1
     a08:	d7 01       	movw	r26, r14
     a0a:	01 90       	ld	r0, Z+
     a0c:	0d 92       	st	X+, r0
     a0e:	8a 95       	dec	r24
     a10:	e1 f7       	brne	.-8      	; 0xa0a <CAN_recieve+0x50>
     a12:	41 c0       	rjmp	.+130    	; 0xa96 <CAN_recieve+0xdc>
     a14:	81 e6       	ldi	r24, 0x61	; 97
     a16:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <mcp2515_read>
     a1a:	98 2e       	mov	r9, r24
     a1c:	82 e6       	ldi	r24, 0x62	; 98
     a1e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <mcp2515_read>
     a22:	28 e0       	ldi	r18, 0x08	; 8
     a24:	82 9f       	mul	r24, r18
     a26:	c0 01       	movw	r24, r0
     a28:	11 24       	eor	r1, r1
     a2a:	96 94       	lsr	r9
     a2c:	96 94       	lsr	r9
     a2e:	96 94       	lsr	r9
     a30:	96 94       	lsr	r9
     a32:	96 94       	lsr	r9
     a34:	98 2a       	or	r9, r24
     a36:	85 e6       	ldi	r24, 0x65	; 101
     a38:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <mcp2515_read>
     a3c:	8f 70       	andi	r24, 0x0F	; 15
     a3e:	a8 2e       	mov	r10, r24
     a40:	d9 f0       	breq	.+54     	; 0xa78 <CAN_recieve+0xbe>
     a42:	cc 24       	eor	r12, r12
     a44:	c3 94       	inc	r12
     a46:	d1 2c       	mov	r13, r1
     a48:	cc 0e       	add	r12, r28
     a4a:	dd 1e       	adc	r13, r29
     a4c:	82 e0       	ldi	r24, 0x02	; 2
     a4e:	c8 0e       	add	r12, r24
     a50:	d1 1c       	adc	r13, r1
     a52:	ca 0c       	add	r12, r10
     a54:	d1 1c       	adc	r13, r1
     a56:	8e 01       	movw	r16, r28
     a58:	0d 5f       	subi	r16, 0xFD	; 253
     a5a:	1f 4f       	sbci	r17, 0xFF	; 255
     a5c:	0f 2e       	mov	r0, r31
     a5e:	f6 e6       	ldi	r31, 0x66	; 102
     a60:	bf 2e       	mov	r11, r31
     a62:	f0 2d       	mov	r31, r0
     a64:	8b 2d       	mov	r24, r11
     a66:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <mcp2515_read>
     a6a:	f8 01       	movw	r30, r16
     a6c:	81 93       	st	Z+, r24
     a6e:	8f 01       	movw	r16, r30
     a70:	b3 94       	inc	r11
     a72:	ec 15       	cp	r30, r12
     a74:	fd 05       	cpc	r31, r13
     a76:	b1 f7       	brne	.-20     	; 0xa64 <CAN_recieve+0xaa>
     a78:	40 e0       	ldi	r20, 0x00	; 0
     a7a:	61 e0       	ldi	r22, 0x01	; 1
     a7c:	8c e2       	ldi	r24, 0x2C	; 44
     a7e:	0e 94 23 07 	call	0xe46	; 0xe46 <mcp2515_bit_modify>
     a82:	99 82       	std	Y+1, r9	; 0x01
     a84:	aa 82       	std	Y+2, r10	; 0x02
     a86:	8a e0       	ldi	r24, 0x0A	; 10
     a88:	fe 01       	movw	r30, r28
     a8a:	31 96       	adiw	r30, 0x01	; 1
     a8c:	d7 01       	movw	r26, r14
     a8e:	01 90       	ld	r0, Z+
     a90:	0d 92       	st	X+, r0
     a92:	8a 95       	dec	r24
     a94:	e1 f7       	brne	.-8      	; 0xa8e <CAN_recieve+0xd4>
     a96:	c7 01       	movw	r24, r14
     a98:	2a 96       	adiw	r28, 0x0a	; 10
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	de bf       	out	0x3e, r29	; 62
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	cd bf       	out	0x3d, r28	; 61
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	1f 91       	pop	r17
     aaa:	0f 91       	pop	r16
     aac:	ff 90       	pop	r15
     aae:	ef 90       	pop	r14
     ab0:	df 90       	pop	r13
     ab2:	cf 90       	pop	r12
     ab4:	bf 90       	pop	r11
     ab6:	af 90       	pop	r10
     ab8:	9f 90       	pop	r9
     aba:	08 95       	ret

00000abc <CAN_package>:
     abc:	bf 92       	push	r11
     abe:	cf 92       	push	r12
     ac0:	df 92       	push	r13
     ac2:	ef 92       	push	r14
     ac4:	ff 92       	push	r15
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	ec 01       	movw	r28, r24
     ad0:	16 2f       	mov	r17, r22
     ad2:	c4 2e       	mov	r12, r20
     ad4:	0e 94 a7 05 	call	0xb4e	; 0xb4e <joystick_find_position>
     ad8:	0e 94 a9 0b 	call	0x1752	; 0x1752 <slider_find_position>
     adc:	e8 2e       	mov	r14, r24
     ade:	f9 2e       	mov	r15, r25
     ae0:	84 e0       	ldi	r24, 0x04	; 4
     ae2:	0e 94 98 03 	call	0x730	; 0x730 <ADC_read>
     ae6:	b8 2e       	mov	r11, r24
     ae8:	0e 94 95 05 	call	0xb2a	; 0xb2a <joystick_button>
     aec:	d8 2e       	mov	r13, r24
     aee:	0e 94 a2 0b 	call	0x1744	; 0x1744 <slider_left_button>
     af2:	08 2f       	mov	r16, r24
     af4:	0e 94 a6 0b 	call	0x174c	; 0x174c <slider_right_button>
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	98 83       	st	Y, r25
     afc:	98 e0       	ldi	r25, 0x08	; 8
     afe:	99 83       	std	Y+1, r25	; 0x01
     b00:	ba 82       	std	Y+2, r11	; 0x02
     b02:	cb 82       	std	Y+3, r12	; 0x03
     b04:	dc 82       	std	Y+4, r13	; 0x04
     b06:	ed 82       	std	Y+5, r14	; 0x05
     b08:	fe 82       	std	Y+6, r15	; 0x06
     b0a:	0f 83       	std	Y+7, r16	; 0x07
     b0c:	88 87       	std	Y+8, r24	; 0x08
     b0e:	19 87       	std	Y+9, r17	; 0x09
     b10:	ce 01       	movw	r24, r28
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	0f 91       	pop	r16
     b1a:	ff 90       	pop	r15
     b1c:	ef 90       	pop	r14
     b1e:	df 90       	pop	r13
     b20:	cf 90       	pop	r12
     b22:	bf 90       	pop	r11
     b24:	08 95       	ret

00000b26 <joystick_init>:

static uint8_t x_center;
static uint8_t y_center;

void joystick_init(void){
	clear_bit(DDRB,DDB2);
     b26:	ba 98       	cbi	0x17, 2	; 23
     b28:	08 95       	ret

00000b2a <joystick_button>:
}

uint8_t joystick_button(void){
	if ((PINB & (1 << PINB2))){
     b2a:	86 b3       	in	r24, 0x16	; 22
     b2c:	82 fb       	bst	r24, 2
     b2e:	88 27       	eor	r24, r24
     b30:	80 f9       	bld	r24, 0
		return 0;
	}
	else {
		return 1;
	}
}
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	89 27       	eor	r24, r25
     b36:	08 95       	ret

00000b38 <joystick_find_center>:


void joystick_find_center(void){
	x_center = ADC_read(CH_X);
     b38:	84 e0       	ldi	r24, 0x04	; 4
     b3a:	0e 94 98 03 	call	0x730	; 0x730 <ADC_read>
     b3e:	80 93 13 03 	sts	0x0313, r24
	y_center = ADC_read(CH_Y);
     b42:	85 e0       	ldi	r24, 0x05	; 5
     b44:	0e 94 98 03 	call	0x730	; 0x730 <ADC_read>
     b48:	80 93 12 03 	sts	0x0312, r24
     b4c:	08 95       	ret

00000b4e <joystick_find_position>:
}

position joystick_find_position(void){
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
	position XY;
	// calibrating position based on neutral reading
	XY.x = ADC_read(CH_X) - x_center;
     b52:	84 e0       	ldi	r24, 0x04	; 4
     b54:	0e 94 98 03 	call	0x730	; 0x730 <ADC_read>
     b58:	c8 2f       	mov	r28, r24
     b5a:	d0 e0       	ldi	r29, 0x00	; 0
     b5c:	80 91 13 03 	lds	r24, 0x0313
     b60:	c8 1b       	sub	r28, r24
     b62:	d1 09       	sbc	r29, r1
	XY.y = ADC_read(CH_Y) - y_center;
     b64:	85 e0       	ldi	r24, 0x05	; 5
     b66:	0e 94 98 03 	call	0x730	; 0x730 <ADC_read>
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	40 91 12 03 	lds	r20, 0x0312
	return XY;
     b72:	be 01       	movw	r22, r28
     b74:	c9 01       	movw	r24, r18
     b76:	84 1b       	sub	r24, r20
     b78:	91 09       	sbc	r25, r1
}
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	08 95       	ret

00000b80 <joystick_print_position>:

void joystick_print_position(){
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
	position XY = joystick_find_position();
     b84:	0e 94 a7 05 	call	0xb4e	; 0xb4e <joystick_find_position>
     b88:	c8 2f       	mov	r28, r24
     b8a:	d9 2f       	mov	r29, r25
	printf("X-position: %d\n", XY.x);
     b8c:	7f 93       	push	r23
     b8e:	6f 93       	push	r22
     b90:	29 e1       	ldi	r18, 0x19	; 25
     b92:	31 e0       	ldi	r19, 0x01	; 1
     b94:	3f 93       	push	r19
     b96:	2f 93       	push	r18
     b98:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <printf>
	printf("Y-position: %d\n", XY.y);
     b9c:	df 93       	push	r29
     b9e:	cf 93       	push	r28
     ba0:	89 e2       	ldi	r24, 0x29	; 41
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	9f 93       	push	r25
     ba6:	8f 93       	push	r24
     ba8:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <printf>
     bac:	8d b7       	in	r24, 0x3d	; 61
     bae:	9e b7       	in	r25, 0x3e	; 62
     bb0:	08 96       	adiw	r24, 0x08	; 8
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	9e bf       	out	0x3e, r25	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	8d bf       	out	0x3d, r24	; 61
}
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	08 95       	ret

00000bc2 <joystick_find_degree>:
	}
	return dir;
}


int joystick_find_degree(void){
     bc2:	8f 92       	push	r8
     bc4:	9f 92       	push	r9
     bc6:	af 92       	push	r10
     bc8:	bf 92       	push	r11
     bca:	cf 92       	push	r12
     bcc:	df 92       	push	r13
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
	position XY = joystick_find_position();
     bd2:	0e 94 a7 05 	call	0xb4e	; 0xb4e <joystick_find_position>
     bd6:	6b 01       	movw	r12, r22
     bd8:	7c 01       	movw	r14, r24
	if (XY.x < THRESHOLD && XY.y < THRESHOLD && XY.x > -THRESHOLD && XY.y > -THRESHOLD){
     bda:	cb 01       	movw	r24, r22
     bdc:	8b 5b       	subi	r24, 0xBB	; 187
     bde:	9f 4f       	sbci	r25, 0xFF	; 255
     be0:	8b 38       	cpi	r24, 0x8B	; 139
     be2:	91 05       	cpc	r25, r1
     be4:	30 f4       	brcc	.+12     	; 0xbf2 <joystick_find_degree+0x30>
     be6:	c7 01       	movw	r24, r14
     be8:	8b 5b       	subi	r24, 0xBB	; 187
     bea:	9f 4f       	sbci	r25, 0xFF	; 255
     bec:	8b 38       	cpi	r24, 0x8B	; 139
     bee:	91 05       	cpc	r25, r1
     bf0:	98 f1       	brcs	.+102    	; 0xc58 <joystick_find_degree+0x96>
		return -1;
	}
	double degree = atan2(XY.y,XY.x);
     bf2:	b6 01       	movw	r22, r12
     bf4:	88 27       	eor	r24, r24
     bf6:	77 fd       	sbrc	r23, 7
     bf8:	80 95       	com	r24
     bfa:	98 2f       	mov	r25, r24
     bfc:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__floatsisf>
     c00:	4b 01       	movw	r8, r22
     c02:	5c 01       	movw	r10, r24
     c04:	b7 01       	movw	r22, r14
     c06:	88 27       	eor	r24, r24
     c08:	77 fd       	sbrc	r23, 7
     c0a:	80 95       	com	r24
     c0c:	98 2f       	mov	r25, r24
     c0e:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__floatsisf>
     c12:	a5 01       	movw	r20, r10
     c14:	94 01       	movw	r18, r8
     c16:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <atan2>
	degree *= 180/M_PI;
     c1a:	20 ee       	ldi	r18, 0xE0	; 224
     c1c:	3e e2       	ldi	r19, 0x2E	; 46
     c1e:	45 e6       	ldi	r20, 0x65	; 101
     c20:	52 e4       	ldi	r21, 0x42	; 66
     c22:	0e 94 44 10 	call	0x2088	; 0x2088 <__mulsf3>
     c26:	6b 01       	movw	r12, r22
     c28:	7c 01       	movw	r14, r24
	if (degree < 0){
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	a9 01       	movw	r20, r18
     c30:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__cmpsf2>
     c34:	88 23       	and	r24, r24
     c36:	54 f4       	brge	.+20     	; 0xc4c <joystick_find_degree+0x8a>
		degree += 360;
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	44 eb       	ldi	r20, 0xB4	; 180
     c3e:	53 e4       	ldi	r21, 0x43	; 67
     c40:	c7 01       	movw	r24, r14
     c42:	b6 01       	movw	r22, r12
     c44:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__addsf3>
     c48:	6b 01       	movw	r12, r22
     c4a:	7c 01       	movw	r14, r24
	}
	return (int)(degree);
     c4c:	c7 01       	movw	r24, r14
     c4e:	b6 01       	movw	r22, r12
     c50:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__fixsfsi>
     c54:	cb 01       	movw	r24, r22
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <joystick_find_degree+0x9a>


int joystick_find_degree(void){
	position XY = joystick_find_position();
	if (XY.x < THRESHOLD && XY.y < THRESHOLD && XY.x > -THRESHOLD && XY.y > -THRESHOLD){
		return -1;
     c58:	8f ef       	ldi	r24, 0xFF	; 255
     c5a:	9f ef       	ldi	r25, 0xFF	; 255
	degree *= 180/M_PI;
	if (degree < 0){
		degree += 360;
	}
	return (int)(degree);
}
     c5c:	ff 90       	pop	r15
     c5e:	ef 90       	pop	r14
     c60:	df 90       	pop	r13
     c62:	cf 90       	pop	r12
     c64:	bf 90       	pop	r11
     c66:	af 90       	pop	r10
     c68:	9f 90       	pop	r9
     c6a:	8f 90       	pop	r8
     c6c:	08 95       	ret

00000c6e <joystick_find_direction>:
	position XY = joystick_find_position();
	printf("X-position: %d\n", XY.x);
	printf("Y-position: %d\n", XY.y);
}

DIRECTION joystick_find_direction(void){
     c6e:	cf 93       	push	r28
	int degree = joystick_find_degree();
     c70:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <joystick_find_degree>
	DIRECTION dir;
	if ((degree >= 0 && degree < 45) || (degree >= 315 && degree <= 360)){
     c74:	8d 32       	cpi	r24, 0x2D	; 45
     c76:	91 05       	cpc	r25, r1
     c78:	c0 f0       	brcs	.+48     	; 0xcaa <joystick_find_direction+0x3c>
     c7a:	9c 01       	movw	r18, r24
     c7c:	2b 53       	subi	r18, 0x3B	; 59
     c7e:	31 40       	sbci	r19, 0x01	; 1
     c80:	2e 32       	cpi	r18, 0x2E	; 46
     c82:	31 05       	cpc	r19, r1
     c84:	a0 f0       	brcs	.+40     	; 0xcae <joystick_find_direction+0x40>
		dir = RIGHT;
	} else if (degree < 135 && degree >= 45){
     c86:	22 5f       	subi	r18, 0xF2	; 242
     c88:	3e 4f       	sbci	r19, 0xFE	; 254
     c8a:	2a 35       	cpi	r18, 0x5A	; 90
     c8c:	31 05       	cpc	r19, r1
     c8e:	88 f0       	brcs	.+34     	; 0xcb2 <joystick_find_direction+0x44>
		dir = UP;
	} else if (degree < 225 && degree >= 135){
     c90:	2a 55       	subi	r18, 0x5A	; 90
     c92:	31 09       	sbc	r19, r1
     c94:	2a 35       	cpi	r18, 0x5A	; 90
     c96:	31 05       	cpc	r19, r1
     c98:	70 f0       	brcs	.+28     	; 0xcb6 <joystick_find_direction+0x48>
		dir = LEFT;
	} else if(degree < 315 && degree >= 225){
     c9a:	2a 55       	subi	r18, 0x5A	; 90
     c9c:	31 09       	sbc	r19, r1
     c9e:	2a 35       	cpi	r18, 0x5A	; 90
     ca0:	31 05       	cpc	r19, r1
     ca2:	58 f0       	brcs	.+22     	; 0xcba <joystick_find_direction+0x4c>
		dir = DOWN;
	}
	else if (degree == -1){
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	61 f4       	brne	.+24     	; 0xcc0 <joystick_find_direction+0x52>
     ca8:	0a c0       	rjmp	.+20     	; 0xcbe <joystick_find_direction+0x50>

DIRECTION joystick_find_direction(void){
	int degree = joystick_find_degree();
	DIRECTION dir;
	if ((degree >= 0 && degree < 45) || (degree >= 315 && degree <= 360)){
		dir = RIGHT;
     caa:	c1 e0       	ldi	r28, 0x01	; 1
     cac:	09 c0       	rjmp	.+18     	; 0xcc0 <joystick_find_direction+0x52>
     cae:	c1 e0       	ldi	r28, 0x01	; 1
     cb0:	07 c0       	rjmp	.+14     	; 0xcc0 <joystick_find_direction+0x52>
	} else if (degree < 135 && degree >= 45){
		dir = UP;
     cb2:	c2 e0       	ldi	r28, 0x02	; 2
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <joystick_find_direction+0x52>
	} else if (degree < 225 && degree >= 135){
		dir = LEFT;
     cb6:	c0 e0       	ldi	r28, 0x00	; 0
     cb8:	03 c0       	rjmp	.+6      	; 0xcc0 <joystick_find_direction+0x52>
	} else if(degree < 315 && degree >= 225){
		dir = DOWN;
     cba:	c3 e0       	ldi	r28, 0x03	; 3
     cbc:	01 c0       	rjmp	.+2      	; 0xcc0 <joystick_find_direction+0x52>
	}
	else if (degree == -1){
		dir = NEUTRAL;
     cbe:	c4 e0       	ldi	r28, 0x04	; 4
	}
	return dir;
}
     cc0:	8c 2f       	mov	r24, r28
     cc2:	cf 91       	pop	r28
     cc4:	08 95       	ret

00000cc6 <main>:
#include "MCP2515.h"
#include "buffer.h"
#include "snake.h"
#include <math.h>

int main(void){
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	2a 97       	sbiw	r28, 0x0a	; 10
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
	cli();
     cda:	f8 94       	cli
	uart_init();
     cdc:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <uart_init>
	memory_init();
     ce0:	0e 94 3d 07 	call	0xe7a	; 0xe7a <memory_init>
	SRAM_test();
     ce4:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <SRAM_test>
	ADC_init();
     ce8:	0e 94 96 03 	call	0x72c	; 0x72c <ADC_init>
	oled_init();
     cec:	0e 94 c9 0a 	call	0x1592	; 0x1592 <oled_init>
	joystick_init();
     cf0:	0e 94 93 05 	call	0xb26	; 0xb26 <joystick_init>
	oled_reset();
     cf4:	0e 94 18 0b 	call	0x1630	; 0x1630 <oled_reset>
	joystick_find_center();
     cf8:	0e 94 9c 05 	call	0xb38	; 0xb38 <joystick_find_center>
	CAN_init();
     cfc:	0e 94 79 04 	call	0x8f2	; 0x8f2 <CAN_init>
	menu_init();
     d00:	0e 94 0d 08 	call	0x101a	; 0x101a <menu_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d04:	2f ef       	ldi	r18, 0xFF	; 255
     d06:	8f e7       	ldi	r24, 0x7F	; 127
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	21 50       	subi	r18, 0x01	; 1
     d0c:	80 40       	sbci	r24, 0x00	; 0
     d0e:	90 40       	sbci	r25, 0x00	; 0
     d10:	e1 f7       	brne	.-8      	; 0xd0a <main+0x44>
     d12:	00 c0       	rjmp	.+0      	; 0xd14 <main+0x4e>
     d14:	00 c0       	rjmp	.+0      	; 0xd16 <main+0x50>
	_delay_ms(100);
	CAN_send(CAN_package(0,menu_get_difficulty()));
     d16:	0e 94 a9 09 	call	0x1352	; 0x1352 <menu_get_difficulty>
     d1a:	48 2f       	mov	r20, r24
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	ce 01       	movw	r24, r28
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	0e 94 5e 05 	call	0xabc	; 0xabc <CAN_package>
     d26:	09 81       	ldd	r16, Y+1	; 0x01
     d28:	1a 81       	ldd	r17, Y+2	; 0x02
     d2a:	2b 81       	ldd	r18, Y+3	; 0x03
     d2c:	3c 81       	ldd	r19, Y+4	; 0x04
     d2e:	4d 81       	ldd	r20, Y+5	; 0x05
     d30:	5e 81       	ldd	r21, Y+6	; 0x06
     d32:	6f 81       	ldd	r22, Y+7	; 0x07
     d34:	78 85       	ldd	r23, Y+8	; 0x08
     d36:	89 85       	ldd	r24, Y+9	; 0x09
     d38:	9a 85       	ldd	r25, Y+10	; 0x0a
     d3a:	0e 94 83 04 	call	0x906	; 0x906 <CAN_send>
	
	while(1){
		menu_move();
     d3e:	0e 94 12 09 	call	0x1224	; 0x1224 <menu_move>
     d42:	af ef       	ldi	r26, 0xFF	; 255
     d44:	bf e3       	ldi	r27, 0x3F	; 63
     d46:	e2 e0       	ldi	r30, 0x02	; 2
     d48:	a1 50       	subi	r26, 0x01	; 1
     d4a:	b0 40       	sbci	r27, 0x00	; 0
     d4c:	e0 40       	sbci	r30, 0x00	; 0
     d4e:	e1 f7       	brne	.-8      	; 0xd48 <main+0x82>
     d50:	00 c0       	rjmp	.+0      	; 0xd52 <main+0x8c>
     d52:	00 00       	nop
		_delay_ms(150);
		position XY = joystick_find_position();
     d54:	0e 94 a7 05 	call	0xb4e	; 0xb4e <joystick_find_position>
		if( (menu_get_current_menu()->menu_function != NULL) && joystick_button() ){
     d58:	0e 94 a4 09 	call	0x1348	; 0x1348 <menu_get_current_menu>
     d5c:	dc 01       	movw	r26, r24
     d5e:	1d 96       	adiw	r26, 0x0d	; 13
     d60:	8d 91       	ld	r24, X+
     d62:	9c 91       	ld	r25, X
     d64:	1e 97       	sbiw	r26, 0x0e	; 14
     d66:	89 2b       	or	r24, r25
     d68:	b1 f0       	breq	.+44     	; 0xd96 <main+0xd0>
     d6a:	0e 94 95 05 	call	0xb2a	; 0xb2a <joystick_button>
     d6e:	88 23       	and	r24, r24
     d70:	91 f0       	breq	.+36     	; 0xd96 <main+0xd0>
     d72:	bf ef       	ldi	r27, 0xFF	; 255
     d74:	ef ef       	ldi	r30, 0xFF	; 255
     d76:	f2 e0       	ldi	r31, 0x02	; 2
     d78:	b1 50       	subi	r27, 0x01	; 1
     d7a:	e0 40       	sbci	r30, 0x00	; 0
     d7c:	f0 40       	sbci	r31, 0x00	; 0
     d7e:	e1 f7       	brne	.-8      	; 0xd78 <main+0xb2>
     d80:	00 c0       	rjmp	.+0      	; 0xd82 <main+0xbc>
     d82:	00 c0       	rjmp	.+0      	; 0xd84 <main+0xbe>
			_delay_ms(200);
			menu_get_current_menu()->menu_function();
     d84:	0e 94 a4 09 	call	0x1348	; 0x1348 <menu_get_current_menu>
     d88:	dc 01       	movw	r26, r24
     d8a:	1d 96       	adiw	r26, 0x0d	; 13
     d8c:	ed 91       	ld	r30, X+
     d8e:	fc 91       	ld	r31, X
     d90:	1e 97       	sbiw	r26, 0x0e	; 14
     d92:	09 95       	icall
     d94:	d4 cf       	rjmp	.-88     	; 0xd3e <main+0x78>
		}
		else if (menu_get_current_menu()->name == "Play Snake" && joystick_button()){
     d96:	0e 94 a4 09 	call	0x1348	; 0x1348 <menu_get_current_menu>
     d9a:	fc 01       	movw	r30, r24
     d9c:	82 81       	ldd	r24, Z+2	; 0x02
     d9e:	93 81       	ldd	r25, Z+3	; 0x03
     da0:	89 53       	subi	r24, 0x39	; 57
     da2:	91 40       	sbci	r25, 0x01	; 1
     da4:	61 f6       	brne	.-104    	; 0xd3e <main+0x78>
     da6:	0e 94 95 05 	call	0xb2a	; 0xb2a <joystick_button>
     daa:	88 23       	and	r24, r24
     dac:	41 f2       	breq	.-112    	; 0xd3e <main+0x78>
     dae:	2f ef       	ldi	r18, 0xFF	; 255
     db0:	8f ef       	ldi	r24, 0xFF	; 255
     db2:	92 e0       	ldi	r25, 0x02	; 2
     db4:	21 50       	subi	r18, 0x01	; 1
     db6:	80 40       	sbci	r24, 0x00	; 0
     db8:	90 40       	sbci	r25, 0x00	; 0
     dba:	e1 f7       	brne	.-8      	; 0xdb4 <main+0xee>
     dbc:	00 c0       	rjmp	.+0      	; 0xdbe <main+0xf8>
     dbe:	00 c0       	rjmp	.+0      	; 0xdc0 <main+0xfa>
			_delay_ms(200);
			snake_play_snake(MEDIUM);
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <snake_play_snake>
			menu_display(menu_get_main());
     dc6:	0e 94 c1 0a 	call	0x1582	; 0x1582 <menu_get_main>
     dca:	0e 94 98 07 	call	0xf30	; 0xf30 <menu_display>
		}
	}
     dce:	b7 cf       	rjmp	.-146    	; 0xd3e <main+0x78>

00000dd0 <mcp2515_read>:
     dd0:	cf 93       	push	r28
     dd2:	c8 2f       	mov	r28, r24
     dd4:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <SPI_slave_on>
     dd8:	83 e0       	ldi	r24, 0x03	; 3
     dda:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <SPI_MasterTransmit>
     dde:	8c 2f       	mov	r24, r28
     de0:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <SPI_MasterTransmit>
     de4:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <SPI_MasterRecieve>
     de8:	c8 2f       	mov	r28, r24
     dea:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <SPI_slave_off>
     dee:	8c 2f       	mov	r24, r28
     df0:	cf 91       	pop	r28
     df2:	08 95       	ret

00000df4 <mcp2515_write>:
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	d8 2f       	mov	r29, r24
     dfa:	c6 2f       	mov	r28, r22
     dfc:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <SPI_slave_on>
     e00:	82 e0       	ldi	r24, 0x02	; 2
     e02:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <SPI_MasterTransmit>
     e06:	8d 2f       	mov	r24, r29
     e08:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <SPI_MasterTransmit>
     e0c:	8c 2f       	mov	r24, r28
     e0e:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <SPI_MasterTransmit>
     e12:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <SPI_slave_off>
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	08 95       	ret

00000e1c <mcp2515_reset>:
     e1c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <SPI_slave_on>
     e20:	80 ec       	ldi	r24, 0xC0	; 192
     e22:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <SPI_MasterTransmit>
     e26:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <SPI_slave_off>
     e2a:	08 95       	ret

00000e2c <mcp2515_request_to_send>:
     e2c:	cf 93       	push	r28
     e2e:	c8 2f       	mov	r28, r24
     e30:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <SPI_slave_on>
     e34:	8c 2f       	mov	r24, r28
     e36:	87 70       	andi	r24, 0x07	; 7
     e38:	80 68       	ori	r24, 0x80	; 128
     e3a:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <SPI_MasterTransmit>
     e3e:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <SPI_slave_off>
     e42:	cf 91       	pop	r28
     e44:	08 95       	ret

00000e46 <mcp2515_bit_modify>:
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	18 2f       	mov	r17, r24
     e4e:	d6 2f       	mov	r29, r22
     e50:	c4 2f       	mov	r28, r20
     e52:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <SPI_slave_on>
     e56:	85 e0       	ldi	r24, 0x05	; 5
     e58:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <SPI_MasterTransmit>
     e5c:	81 2f       	mov	r24, r17
     e5e:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <SPI_MasterTransmit>
     e62:	8d 2f       	mov	r24, r29
     e64:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <SPI_MasterTransmit>
     e68:	8c 2f       	mov	r24, r28
     e6a:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <SPI_MasterTransmit>
     e6e:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <SPI_slave_off>
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	08 95       	ret

00000e7a <memory_init>:
     e7a:	85 b7       	in	r24, 0x35	; 53
     e7c:	80 68       	ori	r24, 0x80	; 128
     e7e:	85 bf       	out	0x35, r24	; 53
     e80:	80 b7       	in	r24, 0x30	; 48
     e82:	80 62       	ori	r24, 0x20	; 32
     e84:	80 bf       	out	0x30, r24	; 48
     e86:	08 95       	ret

00000e88 <menu_replay_yes>:
		}
	}
	menu_reset_score();
}
void menu_replay_yes(){
	current_menu = main_menu->child_menu;
     e88:	e0 91 1e 03 	lds	r30, 0x031E
     e8c:	f0 91 1f 03 	lds	r31, 0x031F
     e90:	01 84       	ldd	r0, Z+9	; 0x09
     e92:	f2 85       	ldd	r31, Z+10	; 0x0a
     e94:	e0 2d       	mov	r30, r0
     e96:	f0 93 1d 03 	sts	0x031D, r31
     e9a:	e0 93 1c 03 	sts	0x031C, r30
	current_menu->menu_function();
     e9e:	05 84       	ldd	r0, Z+13	; 0x0d
     ea0:	f6 85       	ldd	r31, Z+14	; 0x0e
     ea2:	e0 2d       	mov	r30, r0
     ea4:	09 95       	icall
     ea6:	08 95       	ret

00000ea8 <menu_help>:
uint8_t menu_get_difficulty(){
	return difficulty;
}

void menu_help(){
	oled_reset();
     ea8:	0e 94 18 0b 	call	0x1630	; 0x1630 <oled_reset>
	oled_goto_page(0);
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <oled_goto_page>
	oled_goto_column(0);
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <oled_goto_column>
	oled_printf("--- HELP ---");
     eb8:	84 e4       	ldi	r24, 0x44	; 68
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	9f 93       	push	r25
     ebe:	8f 93       	push	r24
     ec0:	0e 94 92 0b 	call	0x1724	; 0x1724 <oled_printf>
	oled_goto_page(1);
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <oled_goto_page>
	oled_goto_column(0);
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <oled_goto_column>
	oled_printf("Use the right   slider to navi- gate. To adjust the angel use   the joystick.   Try not to loosethe ball. GL");
     ed0:	81 e5       	ldi	r24, 0x51	; 81
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	9f 93       	push	r25
     ed6:	8f 93       	push	r24
     ed8:	0e 94 92 0b 	call	0x1724	; 0x1724 <oled_printf>
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	08 95       	ret

00000ee6 <menu_create>:
menu_node* main_menu;
menu_node* current_menu;
uint8_t difficulty = EASY;
double score = 0;

menu_node* menu_create(char* name,void *myfunction(void), uint8_t page_nr){
     ee6:	ff 92       	push	r15
     ee8:	0f 93       	push	r16
     eea:	1f 93       	push	r17
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
     ef0:	8c 01       	movw	r16, r24
     ef2:	eb 01       	movw	r28, r22
     ef4:	f4 2e       	mov	r15, r20
	menu_node* menu = malloc(sizeof(menu_node));
     ef6:	8f e0       	ldi	r24, 0x0F	; 15
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 ac 10 	call	0x2158	; 0x2158 <malloc>
     efe:	fc 01       	movw	r30, r24
	menu->name = name;
     f00:	13 83       	std	Z+3, r17	; 0x03
     f02:	02 83       	std	Z+2, r16	; 0x02
	menu->page_id = page_nr;
     f04:	f4 82       	std	Z+4, r15	; 0x04
	menu->sibling_left = NULL;
     f06:	16 82       	std	Z+6, r1	; 0x06
     f08:	15 82       	std	Z+5, r1	; 0x05
	menu->sibling_right = NULL;
     f0a:	10 86       	std	Z+8, r1	; 0x08
     f0c:	17 82       	std	Z+7, r1	; 0x07
	menu->child_menu = NULL;
     f0e:	12 86       	std	Z+10, r1	; 0x0a
     f10:	11 86       	std	Z+9, r1	; 0x09
	menu->parent_menu = NULL;
     f12:	14 86       	std	Z+12, r1	; 0x0c
     f14:	13 86       	std	Z+11, r1	; 0x0b
	menu->menu_function = myfunction;
     f16:	d6 87       	std	Z+14, r29	; 0x0e
     f18:	c5 87       	std	Z+13, r28	; 0x0d
	menu->offset = "  ";
     f1a:	8e eb       	ldi	r24, 0xBE	; 190
     f1c:	91 e0       	ldi	r25, 0x01	; 1
     f1e:	91 83       	std	Z+1, r25	; 0x01
     f20:	80 83       	st	Z, r24
	return menu;
}
     f22:	cf 01       	movw	r24, r30
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	ff 90       	pop	r15
     f2e:	08 95       	ret

00000f30 <menu_display>:
	current_menu = main_menu;
	menu_display(current_menu);
}


void menu_display(menu_node* menu){
     f30:	df 92       	push	r13
     f32:	ef 92       	push	r14
     f34:	ff 92       	push	r15
     f36:	0f 93       	push	r16
     f38:	1f 93       	push	r17
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	7c 01       	movw	r14, r24
	oled_reset();
     f40:	0e 94 18 0b 	call	0x1630	; 0x1630 <oled_reset>
	if (menu->child_menu == NULL){
     f44:	f7 01       	movw	r30, r14
     f46:	c1 85       	ldd	r28, Z+9	; 0x09
     f48:	d2 85       	ldd	r29, Z+10	; 0x0a
     f4a:	20 97       	sbiw	r28, 0x00	; 0
     f4c:	09 f4       	brne	.+2      	; 0xf50 <menu_display+0x20>
     f4e:	5d c0       	rjmp	.+186    	; 0x100a <menu_display+0xda>
		return;
	}
	menu_node* current = menu->child_menu;
	/* start by printing the menu name (parent menu) */
	oled_goto_page(0);
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <oled_goto_page>
	oled_goto_column(0);
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <oled_goto_column>
	oled_printf("---");
     f5c:	0d e4       	ldi	r16, 0x4D	; 77
     f5e:	11 e0       	ldi	r17, 0x01	; 1
     f60:	1f 93       	push	r17
     f62:	0f 93       	push	r16
     f64:	0e 94 92 0b 	call	0x1724	; 0x1724 <oled_printf>
	oled_printf(current->parent_menu->name);
     f68:	eb 85       	ldd	r30, Y+11	; 0x0b
     f6a:	fc 85       	ldd	r31, Y+12	; 0x0c
     f6c:	83 81       	ldd	r24, Z+3	; 0x03
     f6e:	8f 93       	push	r24
     f70:	82 81       	ldd	r24, Z+2	; 0x02
     f72:	8f 93       	push	r24
     f74:	0e 94 92 0b 	call	0x1724	; 0x1724 <oled_printf>
	oled_printf("---");
     f78:	1f 93       	push	r17
     f7a:	0f 93       	push	r16
     f7c:	0e 94 92 0b 	call	0x1724	; 0x1724 <oled_printf>
	oled_goto_page(1);
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <oled_goto_page>
	oled_goto_column(0);
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <oled_goto_column>
	oled_printf("->");
     f8c:	81 ec       	ldi	r24, 0xC1	; 193
     f8e:	91 e0       	ldi	r25, 0x01	; 1
     f90:	9f 93       	push	r25
     f92:	8f 93       	push	r24
     f94:	0e 94 92 0b 	call	0x1724	; 0x1724 <oled_printf>
	oled_printf(current->name);
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	8f 93       	push	r24
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	8f 93       	push	r24
     fa0:	0e 94 92 0b 	call	0x1724	; 0x1724 <oled_printf>
	uint8_t i = 2;
	while (current->sibling_right != NULL){
     fa4:	0f 80       	ldd	r0, Y+7	; 0x07
     fa6:	d8 85       	ldd	r29, Y+8	; 0x08
     fa8:	c0 2d       	mov	r28, r0
     faa:	8d b7       	in	r24, 0x3d	; 61
     fac:	9e b7       	in	r25, 0x3e	; 62
     fae:	0a 96       	adiw	r24, 0x0a	; 10
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	9e bf       	out	0x3e, r25	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	8d bf       	out	0x3d, r24	; 61
     fba:	20 97       	sbiw	r28, 0x00	; 0
     fbc:	f9 f0       	breq	.+62     	; 0xffc <menu_display+0xcc>
	oled_printf("---");
	oled_goto_page(1);
	oled_goto_column(0);
	oled_printf("->");
	oled_printf(current->name);
	uint8_t i = 2;
     fbe:	68 94       	set
     fc0:	dd 24       	eor	r13, r13
     fc2:	d1 f8       	bld	r13, 1
	while (current->sibling_right != NULL){
		current = current->sibling_right;
		oled_goto_page(i);
		oled_goto_column(0);
		oled_printf("  ");
     fc4:	0e eb       	ldi	r16, 0xBE	; 190
     fc6:	11 e0       	ldi	r17, 0x01	; 1
	oled_printf("->");
	oled_printf(current->name);
	uint8_t i = 2;
	while (current->sibling_right != NULL){
		current = current->sibling_right;
		oled_goto_page(i);
     fc8:	8d 2d       	mov	r24, r13
     fca:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <oled_goto_page>
		oled_goto_column(0);
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <oled_goto_column>
		oled_printf("  ");
     fd4:	1f 93       	push	r17
     fd6:	0f 93       	push	r16
     fd8:	0e 94 92 0b 	call	0x1724	; 0x1724 <oled_printf>
		oled_printf(current->name);
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	8f 93       	push	r24
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	8f 93       	push	r24
     fe4:	0e 94 92 0b 	call	0x1724	; 0x1724 <oled_printf>
		i++;
     fe8:	d3 94       	inc	r13
	oled_goto_page(1);
	oled_goto_column(0);
	oled_printf("->");
	oled_printf(current->name);
	uint8_t i = 2;
	while (current->sibling_right != NULL){
     fea:	0f 80       	ldd	r0, Y+7	; 0x07
     fec:	d8 85       	ldd	r29, Y+8	; 0x08
     fee:	c0 2d       	mov	r28, r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	20 97       	sbiw	r28, 0x00	; 0
     ffa:	31 f7       	brne	.-52     	; 0xfc8 <menu_display+0x98>
		oled_goto_column(0);
		oled_printf("  ");
		oled_printf(current->name);
		i++;
	} 
	current_menu = menu->child_menu;
     ffc:	f7 01       	movw	r30, r14
     ffe:	81 85       	ldd	r24, Z+9	; 0x09
    1000:	92 85       	ldd	r25, Z+10	; 0x0a
    1002:	90 93 1d 03 	sts	0x031D, r25
    1006:	80 93 1c 03 	sts	0x031C, r24
}
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16
    1012:	ff 90       	pop	r15
    1014:	ef 90       	pop	r14
    1016:	df 90       	pop	r13
    1018:	08 95       	ret

0000101a <menu_init>:
	menu->menu_function = myfunction;
	menu->offset = "  ";
	return menu;
}

void menu_init(){
    101a:	ef 92       	push	r14
    101c:	ff 92       	push	r15
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
	main_menu = menu_create("Main Menu",NULL,0);
    1026:	40 e0       	ldi	r20, 0x00	; 0
    1028:	60 e0       	ldi	r22, 0x00	; 0
    102a:	70 e0       	ldi	r23, 0x00	; 0
    102c:	84 ec       	ldi	r24, 0xC4	; 196
    102e:	91 e0       	ldi	r25, 0x01	; 1
    1030:	0e 94 73 07 	call	0xee6	; 0xee6 <menu_create>
    1034:	ec 01       	movw	r28, r24
    1036:	90 93 1f 03 	sts	0x031F, r25
    103a:	80 93 1e 03 	sts	0x031E, r24
	
	/* --- play_pong --- */
	
	main_menu->child_menu = menu_create("Play Pong",&menu_play_pong,1);
    103e:	41 e0       	ldi	r20, 0x01	; 1
    1040:	61 ec       	ldi	r22, 0xC1	; 193
    1042:	79 e0       	ldi	r23, 0x09	; 9
    1044:	8e ec       	ldi	r24, 0xCE	; 206
    1046:	91 e0       	ldi	r25, 0x01	; 1
    1048:	0e 94 73 07 	call	0xee6	; 0xee6 <menu_create>
    104c:	9a 87       	std	Y+10, r25	; 0x0a
    104e:	89 87       	std	Y+9, r24	; 0x09
	menu_node* play_pong = main_menu->child_menu;
    1050:	e0 91 1e 03 	lds	r30, 0x031E
    1054:	f0 91 1f 03 	lds	r31, 0x031F
    1058:	c1 85       	ldd	r28, Z+9	; 0x09
    105a:	d2 85       	ldd	r29, Z+10	; 0x0a
	play_pong->parent_menu = main_menu;
    105c:	fc 87       	std	Y+12, r31	; 0x0c
    105e:	eb 87       	std	Y+11, r30	; 0x0b
	
	/* --- play_pong submenu -> replay? --- */
	
	play_pong->child_menu = menu_create("Replay?",NULL,1);
    1060:	41 e0       	ldi	r20, 0x01	; 1
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	88 ed       	ldi	r24, 0xD8	; 216
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	0e 94 73 07 	call	0xee6	; 0xee6 <menu_create>
    106e:	8c 01       	movw	r16, r24
    1070:	9a 87       	std	Y+10, r25	; 0x0a
    1072:	89 87       	std	Y+9, r24	; 0x09
	menu_node* replay = play_pong->child_menu;
	replay->parent_menu = play_pong;
    1074:	fc 01       	movw	r30, r24
    1076:	d4 87       	std	Z+12, r29	; 0x0c
    1078:	c3 87       	std	Z+11, r28	; 0x0b
	
	/* --- replay submenu -> yes! --- */
	
	replay->child_menu = menu_create("Yes!",&menu_replay_yes,1);
    107a:	41 e0       	ldi	r20, 0x01	; 1
    107c:	64 e4       	ldi	r22, 0x44	; 68
    107e:	77 e0       	ldi	r23, 0x07	; 7
    1080:	80 ee       	ldi	r24, 0xE0	; 224
    1082:	91 e0       	ldi	r25, 0x01	; 1
    1084:	0e 94 73 07 	call	0xee6	; 0xee6 <menu_create>
    1088:	7c 01       	movw	r14, r24
    108a:	f8 01       	movw	r30, r16
    108c:	92 87       	std	Z+10, r25	; 0x0a
    108e:	81 87       	std	Z+9, r24	; 0x09
	menu_node * yes = replay->child_menu;
	yes->parent_menu = replay;
    1090:	fc 01       	movw	r30, r24
    1092:	14 87       	std	Z+12, r17	; 0x0c
    1094:	03 87       	std	Z+11, r16	; 0x0b
	
	/* --- replay submenu -> no =( --- */
	
	yes->sibling_right = menu_create("No=(",&menu_replay_no,2);
    1096:	42 e0       	ldi	r20, 0x02	; 2
    1098:	6b ec       	ldi	r22, 0xCB	; 203
    109a:	78 e0       	ldi	r23, 0x08	; 8
    109c:	85 ee       	ldi	r24, 0xE5	; 229
    109e:	91 e0       	ldi	r25, 0x01	; 1
    10a0:	0e 94 73 07 	call	0xee6	; 0xee6 <menu_create>
    10a4:	f7 01       	movw	r30, r14
    10a6:	90 87       	std	Z+8, r25	; 0x08
    10a8:	87 83       	std	Z+7, r24	; 0x07
	menu_node* no = yes->sibling_right;
	no->sibling_left = yes;
    10aa:	fc 01       	movw	r30, r24
    10ac:	f6 82       	std	Z+6, r15	; 0x06
    10ae:	e5 82       	std	Z+5, r14	; 0x05
	no->parent_menu = replay;	
    10b0:	14 87       	std	Z+12, r17	; 0x0c
    10b2:	03 87       	std	Z+11, r16	; 0x0b
	
	/* --- Play Snake ---*/
	
	play_pong ->sibling_right = menu_create("Play Snake",NULL,2);
    10b4:	42 e0       	ldi	r20, 0x02	; 2
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	89 e3       	ldi	r24, 0x39	; 57
    10bc:	91 e0       	ldi	r25, 0x01	; 1
    10be:	0e 94 73 07 	call	0xee6	; 0xee6 <menu_create>
    10c2:	8c 01       	movw	r16, r24
    10c4:	98 87       	std	Y+8, r25	; 0x08
    10c6:	8f 83       	std	Y+7, r24	; 0x07
	menu_node* play_snake = play_pong->sibling_right;
	play_snake->sibling_left = play_pong;
    10c8:	fc 01       	movw	r30, r24
    10ca:	d6 83       	std	Z+6, r29	; 0x06
    10cc:	c5 83       	std	Z+5, r28	; 0x05
	play_snake->parent_menu = main_menu;
    10ce:	80 91 1e 03 	lds	r24, 0x031E
    10d2:	90 91 1f 03 	lds	r25, 0x031F
    10d6:	94 87       	std	Z+12, r25	; 0x0c
    10d8:	83 87       	std	Z+11, r24	; 0x0b
	
	
	/*  Difficulty --- */
	
	play_snake->sibling_right = menu_create("Difficulty", &menu_difficulty,3);
    10da:	43 e0       	ldi	r20, 0x03	; 3
    10dc:	64 ee       	ldi	r22, 0xE4	; 228
    10de:	78 e0       	ldi	r23, 0x08	; 8
    10e0:	8a ee       	ldi	r24, 0xEA	; 234
    10e2:	91 e0       	ldi	r25, 0x01	; 1
    10e4:	0e 94 73 07 	call	0xee6	; 0xee6 <menu_create>
    10e8:	ec 01       	movw	r28, r24
    10ea:	f8 01       	movw	r30, r16
    10ec:	90 87       	std	Z+8, r25	; 0x08
    10ee:	87 83       	std	Z+7, r24	; 0x07
	menu_node* difficulty = play_snake->sibling_right;
	difficulty->sibling_left = play_snake;
    10f0:	1e 83       	std	Y+6, r17	; 0x06
    10f2:	0d 83       	std	Y+5, r16	; 0x05
	difficulty->parent_menu = main_menu;
    10f4:	80 91 1e 03 	lds	r24, 0x031E
    10f8:	90 91 1f 03 	lds	r25, 0x031F
    10fc:	9c 87       	std	Y+12, r25	; 0x0c
    10fe:	8b 87       	std	Y+11, r24	; 0x0b
	
	/* Difficulty submeny -> Easy --- */
	
	difficulty->child_menu = menu_create("Easy", &menu_difficulty_easy,1);
    1100:	41 e0       	ldi	r20, 0x01	; 1
    1102:	65 ef       	ldi	r22, 0xF5	; 245
    1104:	78 e0       	ldi	r23, 0x08	; 8
    1106:	85 ef       	ldi	r24, 0xF5	; 245
    1108:	91 e0       	ldi	r25, 0x01	; 1
    110a:	0e 94 73 07 	call	0xee6	; 0xee6 <menu_create>
    110e:	7c 01       	movw	r14, r24
    1110:	9a 87       	std	Y+10, r25	; 0x0a
    1112:	89 87       	std	Y+9, r24	; 0x09
	menu_node* easy = difficulty->child_menu;
	easy->parent_menu = difficulty;
    1114:	fc 01       	movw	r30, r24
    1116:	d4 87       	std	Z+12, r29	; 0x0c
    1118:	c3 87       	std	Z+11, r28	; 0x0b
	
	/* Difficulty submeny -> Medium --- */
	
	easy->sibling_right = menu_create("Medium", &menu_difficulty_medium,2);
    111a:	42 e0       	ldi	r20, 0x02	; 2
    111c:	6e ef       	ldi	r22, 0xFE	; 254
    111e:	78 e0       	ldi	r23, 0x08	; 8
    1120:	8a ef       	ldi	r24, 0xFA	; 250
    1122:	91 e0       	ldi	r25, 0x01	; 1
    1124:	0e 94 73 07 	call	0xee6	; 0xee6 <menu_create>
    1128:	8c 01       	movw	r16, r24
    112a:	f7 01       	movw	r30, r14
    112c:	90 87       	std	Z+8, r25	; 0x08
    112e:	87 83       	std	Z+7, r24	; 0x07
	menu_node* medium = easy->sibling_right;
	medium->sibling_left = easy;
    1130:	fc 01       	movw	r30, r24
    1132:	f6 82       	std	Z+6, r15	; 0x06
    1134:	e5 82       	std	Z+5, r14	; 0x05
	medium->parent_menu = difficulty;
    1136:	d4 87       	std	Z+12, r29	; 0x0c
    1138:	c3 87       	std	Z+11, r28	; 0x0b
	
	/* Difficulty submeny -> Insane --- */
	
	medium->sibling_right = menu_create("Insane", &menu_difficulty_insane,3);
    113a:	43 e0       	ldi	r20, 0x03	; 3
    113c:	68 e0       	ldi	r22, 0x08	; 8
    113e:	79 e0       	ldi	r23, 0x09	; 9
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	92 e0       	ldi	r25, 0x02	; 2
    1144:	0e 94 73 07 	call	0xee6	; 0xee6 <menu_create>
    1148:	f8 01       	movw	r30, r16
    114a:	90 87       	std	Z+8, r25	; 0x08
    114c:	87 83       	std	Z+7, r24	; 0x07
	menu_node* insane = medium->sibling_right;
	insane->sibling_left = medium;
    114e:	fc 01       	movw	r30, r24
    1150:	16 83       	std	Z+6, r17	; 0x06
    1152:	05 83       	std	Z+5, r16	; 0x05
	insane->parent_menu = difficulty;
    1154:	d4 87       	std	Z+12, r29	; 0x0c
    1156:	c3 87       	std	Z+11, r28	; 0x0b
	
	/* --- Help --- */
	
	difficulty->sibling_right = menu_create("Help",&menu_help,4);
    1158:	44 e0       	ldi	r20, 0x04	; 4
    115a:	64 e5       	ldi	r22, 0x54	; 84
    115c:	77 e0       	ldi	r23, 0x07	; 7
    115e:	88 e0       	ldi	r24, 0x08	; 8
    1160:	92 e0       	ldi	r25, 0x02	; 2
    1162:	0e 94 73 07 	call	0xee6	; 0xee6 <menu_create>
    1166:	fc 01       	movw	r30, r24
    1168:	98 87       	std	Y+8, r25	; 0x08
    116a:	8f 83       	std	Y+7, r24	; 0x07
	menu_node* help = difficulty->sibling_right;
	help->sibling_left = difficulty;
    116c:	d6 83       	std	Z+6, r29	; 0x06
    116e:	c5 83       	std	Z+5, r28	; 0x05
	help->parent_menu = main_menu;
    1170:	80 91 1e 03 	lds	r24, 0x031E
    1174:	90 91 1f 03 	lds	r25, 0x031F
    1178:	94 87       	std	Z+12, r25	; 0x0c
    117a:	83 87       	std	Z+11, r24	; 0x0b
	
	/* --- set global current menu --- */
	
	current_menu = main_menu;
    117c:	90 93 1d 03 	sts	0x031D, r25
    1180:	80 93 1c 03 	sts	0x031C, r24
	menu_display(current_menu);
    1184:	0e 94 98 07 	call	0xf30	; 0xf30 <menu_display>
}
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	ff 90       	pop	r15
    1192:	ef 90       	pop	r14
    1194:	08 95       	ret

00001196 <menu_replay_no>:
	current_menu = main_menu->child_menu;
	current_menu->menu_function();
}

void menu_replay_no(){
	oled_reset();
    1196:	0e 94 18 0b 	call	0x1630	; 0x1630 <oled_reset>
    119a:	2f ef       	ldi	r18, 0xFF	; 255
    119c:	8f e7       	ldi	r24, 0x7F	; 127
    119e:	91 e0       	ldi	r25, 0x01	; 1
    11a0:	21 50       	subi	r18, 0x01	; 1
    11a2:	80 40       	sbci	r24, 0x00	; 0
    11a4:	90 40       	sbci	r25, 0x00	; 0
    11a6:	e1 f7       	brne	.-8      	; 0x11a0 <menu_replay_no+0xa>
    11a8:	00 c0       	rjmp	.+0      	; 0x11aa <menu_replay_no+0x14>
    11aa:	00 c0       	rjmp	.+0      	; 0x11ac <menu_replay_no+0x16>
	_delay_ms(100);
	current_menu = main_menu->child_menu;
    11ac:	80 91 1e 03 	lds	r24, 0x031E
    11b0:	90 91 1f 03 	lds	r25, 0x031F
    11b4:	fc 01       	movw	r30, r24
    11b6:	21 85       	ldd	r18, Z+9	; 0x09
    11b8:	32 85       	ldd	r19, Z+10	; 0x0a
    11ba:	30 93 1d 03 	sts	0x031D, r19
    11be:	20 93 1c 03 	sts	0x031C, r18
	menu_display(main_menu);
    11c2:	0e 94 98 07 	call	0xf30	; 0xf30 <menu_display>
    11c6:	08 95       	ret

000011c8 <menu_difficulty>:
}

void menu_difficulty(){
	oled_reset();
    11c8:	0e 94 18 0b 	call	0x1630	; 0x1630 <oled_reset>
	menu_display(main_menu->child_menu->sibling_right->sibling_right);
    11cc:	e0 91 1e 03 	lds	r30, 0x031E
    11d0:	f0 91 1f 03 	lds	r31, 0x031F
    11d4:	01 84       	ldd	r0, Z+9	; 0x09
    11d6:	f2 85       	ldd	r31, Z+10	; 0x0a
    11d8:	e0 2d       	mov	r30, r0
    11da:	07 80       	ldd	r0, Z+7	; 0x07
    11dc:	f0 85       	ldd	r31, Z+8	; 0x08
    11de:	e0 2d       	mov	r30, r0
    11e0:	87 81       	ldd	r24, Z+7	; 0x07
    11e2:	90 85       	ldd	r25, Z+8	; 0x08
    11e4:	0e 94 98 07 	call	0xf30	; 0xf30 <menu_display>
    11e8:	08 95       	ret

000011ea <menu_difficulty_easy>:
}


void menu_difficulty_easy(){
	difficulty = EASY;
    11ea:	10 92 18 03 	sts	0x0318, r1
	menu_display(main_menu);
    11ee:	80 91 1e 03 	lds	r24, 0x031E
    11f2:	90 91 1f 03 	lds	r25, 0x031F
    11f6:	0e 94 98 07 	call	0xf30	; 0xf30 <menu_display>
    11fa:	08 95       	ret

000011fc <menu_difficulty_medium>:
}

void menu_difficulty_medium(){
	difficulty = MEDIUM;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	80 93 18 03 	sts	0x0318, r24
	menu_display(main_menu);
    1202:	80 91 1e 03 	lds	r24, 0x031E
    1206:	90 91 1f 03 	lds	r25, 0x031F
    120a:	0e 94 98 07 	call	0xf30	; 0xf30 <menu_display>
    120e:	08 95       	ret

00001210 <menu_difficulty_insane>:
}

void menu_difficulty_insane(){
	difficulty = INSANE;
    1210:	82 e0       	ldi	r24, 0x02	; 2
    1212:	80 93 18 03 	sts	0x0318, r24
	menu_display(main_menu);
    1216:	80 91 1e 03 	lds	r24, 0x031E
    121a:	90 91 1f 03 	lds	r25, 0x031F
    121e:	0e 94 98 07 	call	0xf30	; 0xf30 <menu_display>
    1222:	08 95       	ret

00001224 <menu_move>:
	current_menu = menu->child_menu;
}


void menu_move(){
	joystick_print_position();
    1224:	0e 94 c0 05 	call	0xb80	; 0xb80 <joystick_print_position>
	if (joystick_find_direction() == UP){
    1228:	0e 94 37 06 	call	0xc6e	; 0xc6e <joystick_find_direction>
    122c:	82 30       	cpi	r24, 0x02	; 2
    122e:	c1 f5       	brne	.+112    	; 0x12a0 <menu_move+0x7c>
		if (current_menu->sibling_left == NULL || current_menu->page_id == 1){
    1230:	e0 91 1c 03 	lds	r30, 0x031C
    1234:	f0 91 1d 03 	lds	r31, 0x031D
    1238:	85 81       	ldd	r24, Z+5	; 0x05
    123a:	96 81       	ldd	r25, Z+6	; 0x06
    123c:	89 2b       	or	r24, r25
    123e:	09 f4       	brne	.+2      	; 0x1242 <menu_move+0x1e>
    1240:	82 c0       	rjmp	.+260    	; 0x1346 <menu_move+0x122>
    1242:	84 81       	ldd	r24, Z+4	; 0x04
    1244:	81 30       	cpi	r24, 0x01	; 1
    1246:	09 f4       	brne	.+2      	; 0x124a <menu_move+0x26>
    1248:	7e c0       	rjmp	.+252    	; 0x1346 <menu_move+0x122>
			return;
		}
		oled_goto_page(current_menu->page_id);
    124a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <oled_goto_page>
		oled_goto_column(0);
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <oled_goto_column>
		oled_printf(current_menu->offset);
    1254:	e0 91 1c 03 	lds	r30, 0x031C
    1258:	f0 91 1d 03 	lds	r31, 0x031D
    125c:	81 81       	ldd	r24, Z+1	; 0x01
    125e:	8f 93       	push	r24
    1260:	80 81       	ld	r24, Z
    1262:	8f 93       	push	r24
    1264:	0e 94 92 0b 	call	0x1724	; 0x1724 <oled_printf>
		current_menu = current_menu->sibling_left;
    1268:	e0 91 1c 03 	lds	r30, 0x031C
    126c:	f0 91 1d 03 	lds	r31, 0x031D
    1270:	05 80       	ldd	r0, Z+5	; 0x05
    1272:	f6 81       	ldd	r31, Z+6	; 0x06
    1274:	e0 2d       	mov	r30, r0
    1276:	f0 93 1d 03 	sts	0x031D, r31
    127a:	e0 93 1c 03 	sts	0x031C, r30
		oled_goto_page(current_menu->page_id);
    127e:	84 81       	ldd	r24, Z+4	; 0x04
    1280:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <oled_goto_page>
		oled_goto_column(0);
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <oled_goto_column>
		oled_printf("->");
    128a:	81 ec       	ldi	r24, 0xC1	; 193
    128c:	91 e0       	ldi	r25, 0x01	; 1
    128e:	9f 93       	push	r25
    1290:	8f 93       	push	r24
    1292:	0e 94 92 0b 	call	0x1724	; 0x1724 <oled_printf>
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	08 95       	ret
	}
	else if (joystick_find_direction() == DOWN){
    12a0:	0e 94 37 06 	call	0xc6e	; 0xc6e <joystick_find_direction>
    12a4:	83 30       	cpi	r24, 0x03	; 3
    12a6:	a9 f5       	brne	.+106    	; 0x1312 <menu_move+0xee>
		if (current_menu->sibling_right == NULL){
    12a8:	e0 91 1c 03 	lds	r30, 0x031C
    12ac:	f0 91 1d 03 	lds	r31, 0x031D
    12b0:	87 81       	ldd	r24, Z+7	; 0x07
    12b2:	90 85       	ldd	r25, Z+8	; 0x08
    12b4:	89 2b       	or	r24, r25
    12b6:	09 f4       	brne	.+2      	; 0x12ba <menu_move+0x96>
    12b8:	46 c0       	rjmp	.+140    	; 0x1346 <menu_move+0x122>
			return;
		}
		oled_goto_page(current_menu->page_id);
    12ba:	84 81       	ldd	r24, Z+4	; 0x04
    12bc:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <oled_goto_page>
		oled_goto_column(0);
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <oled_goto_column>
		oled_printf(current_menu->offset);
    12c6:	e0 91 1c 03 	lds	r30, 0x031C
    12ca:	f0 91 1d 03 	lds	r31, 0x031D
    12ce:	81 81       	ldd	r24, Z+1	; 0x01
    12d0:	8f 93       	push	r24
    12d2:	80 81       	ld	r24, Z
    12d4:	8f 93       	push	r24
    12d6:	0e 94 92 0b 	call	0x1724	; 0x1724 <oled_printf>
		current_menu = current_menu->sibling_right;
    12da:	e0 91 1c 03 	lds	r30, 0x031C
    12de:	f0 91 1d 03 	lds	r31, 0x031D
    12e2:	07 80       	ldd	r0, Z+7	; 0x07
    12e4:	f0 85       	ldd	r31, Z+8	; 0x08
    12e6:	e0 2d       	mov	r30, r0
    12e8:	f0 93 1d 03 	sts	0x031D, r31
    12ec:	e0 93 1c 03 	sts	0x031C, r30
		oled_goto_page(current_menu->page_id);
    12f0:	84 81       	ldd	r24, Z+4	; 0x04
    12f2:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <oled_goto_page>
		oled_goto_column(0);
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <oled_goto_column>
		oled_printf("->");
    12fc:	81 ec       	ldi	r24, 0xC1	; 193
    12fe:	91 e0       	ldi	r25, 0x01	; 1
    1300:	9f 93       	push	r25
    1302:	8f 93       	push	r24
    1304:	0e 94 92 0b 	call	0x1724	; 0x1724 <oled_printf>
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	08 95       	ret
	}
	else if (joystick_find_direction() == LEFT){
    1312:	0e 94 37 06 	call	0xc6e	; 0xc6e <joystick_find_direction>
    1316:	81 11       	cpse	r24, r1
    1318:	16 c0       	rjmp	.+44     	; 0x1346 <menu_move+0x122>
		if (current_menu->name == main_menu->name){
    131a:	80 91 1e 03 	lds	r24, 0x031E
    131e:	90 91 1f 03 	lds	r25, 0x031F
    1322:	e0 91 1c 03 	lds	r30, 0x031C
    1326:	f0 91 1d 03 	lds	r31, 0x031D
    132a:	42 81       	ldd	r20, Z+2	; 0x02
    132c:	53 81       	ldd	r21, Z+3	; 0x03
    132e:	fc 01       	movw	r30, r24
    1330:	22 81       	ldd	r18, Z+2	; 0x02
    1332:	33 81       	ldd	r19, Z+3	; 0x03
    1334:	42 17       	cp	r20, r18
    1336:	53 07       	cpc	r21, r19
    1338:	31 f0       	breq	.+12     	; 0x1346 <menu_move+0x122>
			//Do nothing, preventing main menu to load itself when direction = LEFT
		}
		else {
			current_menu = main_menu;
    133a:	90 93 1d 03 	sts	0x031D, r25
    133e:	80 93 1c 03 	sts	0x031C, r24
			menu_display(main_menu);
    1342:	0e 94 98 07 	call	0xf30	; 0xf30 <menu_display>
    1346:	08 95       	ret

00001348 <menu_get_current_menu>:
	}
}

menu_node* menu_get_current_menu(){
	return current_menu;
}
    1348:	80 91 1c 03 	lds	r24, 0x031C
    134c:	90 91 1d 03 	lds	r25, 0x031D
    1350:	08 95       	ret

00001352 <menu_get_difficulty>:
	menu_display(main_menu);
}

uint8_t menu_get_difficulty(){
	return difficulty;
}
    1352:	80 91 18 03 	lds	r24, 0x0318
    1356:	08 95       	ret

00001358 <menu_timer_init>:


/* ---------- MENU TIMER FUNCTIONS ------------ */

void menu_timer_init(){
	cli();
    1358:	f8 94       	cli
	// enable overflow interupt
	set_bit(TIMSK,TOIE0);
    135a:	89 b7       	in	r24, 0x39	; 57
    135c:	82 60       	ori	r24, 0x02	; 2
    135e:	89 bf       	out	0x39, r24	; 57
	// set prescalar
	set_bit(TCCR0,CS02);
    1360:	83 b7       	in	r24, 0x33	; 51
    1362:	84 60       	ori	r24, 0x04	; 4
    1364:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0,CS01);
    1366:	83 b7       	in	r24, 0x33	; 51
    1368:	8d 7f       	andi	r24, 0xFD	; 253
    136a:	83 bf       	out	0x33, r24	; 51
	set_bit(TCCR0,CS00);
    136c:	83 b7       	in	r24, 0x33	; 51
    136e:	81 60       	ori	r24, 0x01	; 1
    1370:	83 bf       	out	0x33, r24	; 51
	
	//set normal mode
	clear_bit(TCCR0,WGM00);
    1372:	83 b7       	in	r24, 0x33	; 51
    1374:	8f 7b       	andi	r24, 0xBF	; 191
    1376:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0,WGM01);
    1378:	83 b7       	in	r24, 0x33	; 51
    137a:	87 7f       	andi	r24, 0xF7	; 247
    137c:	83 bf       	out	0x33, r24	; 51
	// should now have a timer interrupt every 53 ms -> (1/(4915200 / 1024 (prescaler) /256 (1 byte))
	sei();
    137e:	78 94       	sei
    1380:	08 95       	ret

00001382 <menu_play_pong>:
	return current_menu;
}

/* --------- MENU NODE FUNCTIONS ------------- */

void menu_play_pong(){
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	6e 97       	sbiw	r28, 0x1e	; 30
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
menu_node* menu_get_main(){
	return main_menu;
}

void menu_reset_score(){
	score = 0;
    139a:	10 92 14 03 	sts	0x0314, r1
    139e:	10 92 15 03 	sts	0x0315, r1
    13a2:	10 92 16 03 	sts	0x0316, r1
    13a6:	10 92 17 03 	sts	0x0317, r1

/* --------- MENU NODE FUNCTIONS ------------- */

void menu_play_pong(){
	menu_reset_score();
	current_menu = main_menu->child_menu;
    13aa:	e0 91 1e 03 	lds	r30, 0x031E
    13ae:	f0 91 1f 03 	lds	r31, 0x031F
    13b2:	81 85       	ldd	r24, Z+9	; 0x09
    13b4:	92 85       	ldd	r25, Z+10	; 0x0a
    13b6:	90 93 1d 03 	sts	0x031D, r25
    13ba:	80 93 1c 03 	sts	0x031C, r24
	oled_reset();
    13be:	0e 94 18 0b 	call	0x1630	; 0x1630 <oled_reset>
	oled_goto_page(2);
    13c2:	82 e0       	ldi	r24, 0x02	; 2
    13c4:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <oled_goto_page>
	oled_goto_column(0);
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <oled_goto_column>
	oled_printf("   Good luck");
    13ce:	8d e0       	ldi	r24, 0x0D	; 13
    13d0:	92 e0       	ldi	r25, 0x02	; 2
    13d2:	9f 93       	push	r25
    13d4:	8f 93       	push	r24
    13d6:	0e 94 92 0b 	call	0x1724	; 0x1724 <oled_printf>
	oled_goto_page(3);
    13da:	83 e0       	ldi	r24, 0x03	; 3
    13dc:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <oled_goto_page>
	oled_goto_column(0);
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <oled_goto_column>
	oled_printf("   have fun!");
    13e6:	8a e1       	ldi	r24, 0x1A	; 26
    13e8:	92 e0       	ldi	r25, 0x02	; 2
    13ea:	9f 93       	push	r25
    13ec:	8f 93       	push	r24
    13ee:	0e 94 92 0b 	call	0x1724	; 0x1724 <oled_printf>
	menu_timer_init();
    13f2:	0e 94 ac 09 	call	0x1358	; 0x1358 <menu_timer_init>
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	2f ef       	ldi	r18, 0xFF	; 255
    1400:	8f e7       	ldi	r24, 0x7F	; 127
    1402:	91 e0       	ldi	r25, 0x01	; 1
    1404:	21 50       	subi	r18, 0x01	; 1
    1406:	80 40       	sbci	r24, 0x00	; 0
    1408:	90 40       	sbci	r25, 0x00	; 0
    140a:	e1 f7       	brne	.-8      	; 0x1404 <menu_play_pong+0x82>
    140c:	00 c0       	rjmp	.+0      	; 0x140e <menu_play_pong+0x8c>
    140e:	00 c0       	rjmp	.+0      	; 0x1410 <menu_play_pong+0x8e>
	while(1){
		_delay_ms(100);
		CAN_send(CAN_package(1,menu_get_difficulty()));
    1410:	40 91 18 03 	lds	r20, 0x0318
    1414:	61 e0       	ldi	r22, 0x01	; 1
    1416:	ce 01       	movw	r24, r28
    1418:	45 96       	adiw	r24, 0x15	; 21
    141a:	0e 94 5e 05 	call	0xabc	; 0xabc <CAN_package>
    141e:	0d 89       	ldd	r16, Y+21	; 0x15
    1420:	1e 89       	ldd	r17, Y+22	; 0x16
    1422:	2f 89       	ldd	r18, Y+23	; 0x17
    1424:	38 8d       	ldd	r19, Y+24	; 0x18
    1426:	49 8d       	ldd	r20, Y+25	; 0x19
    1428:	5a 8d       	ldd	r21, Y+26	; 0x1a
    142a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    142c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    142e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1430:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1432:	0e 94 83 04 	call	0x906	; 0x906 <CAN_send>
		if(CAN_recieve().data[0] == 1){ // if node 2 sends game_over can package
    1436:	ce 01       	movw	r24, r28
    1438:	0b 96       	adiw	r24, 0x0b	; 11
    143a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <CAN_recieve>
    143e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	e9 f6       	brne	.-70     	; 0x13fe <menu_play_pong+0x7c>
			oled_reset();
    1444:	0e 94 18 0b 	call	0x1630	; 0x1630 <oled_reset>
			oled_goto_column(0);
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <oled_goto_column>
			oled_goto_page(0);
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <oled_goto_page>
			oled_printf("-- Game over --");
    1454:	87 e2       	ldi	r24, 0x27	; 39
    1456:	92 e0       	ldi	r25, 0x02	; 2
    1458:	9f 93       	push	r25
    145a:	8f 93       	push	r24
    145c:	0e 94 92 0b 	call	0x1724	; 0x1724 <oled_printf>
			CAN_send(CAN_package(0,menu_get_difficulty()));
    1460:	40 91 18 03 	lds	r20, 0x0318
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	ce 01       	movw	r24, r28
    1468:	01 96       	adiw	r24, 0x01	; 1
    146a:	0e 94 5e 05 	call	0xabc	; 0xabc <CAN_package>
    146e:	09 81       	ldd	r16, Y+1	; 0x01
    1470:	1a 81       	ldd	r17, Y+2	; 0x02
    1472:	2b 81       	ldd	r18, Y+3	; 0x03
    1474:	3c 81       	ldd	r19, Y+4	; 0x04
    1476:	4d 81       	ldd	r20, Y+5	; 0x05
    1478:	5e 81       	ldd	r21, Y+6	; 0x06
    147a:	6f 81       	ldd	r22, Y+7	; 0x07
    147c:	78 85       	ldd	r23, Y+8	; 0x08
    147e:	89 85       	ldd	r24, Y+9	; 0x09
    1480:	9a 85       	ldd	r25, Y+10	; 0x0a
    1482:	0e 94 83 04 	call	0x906	; 0x906 <CAN_send>
			oled_goto_column(0);
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <oled_goto_column>
			oled_goto_page(1);
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <oled_goto_page>

ISR(TIMER0_OVF_vect){
	score += 0.053; // since the overflow flag is set every 53 ms
}
uint8_t menu_get_score(){
	return score;
    1492:	60 91 14 03 	lds	r22, 0x0314
    1496:	70 91 15 03 	lds	r23, 0x0315
    149a:	80 91 16 03 	lds	r24, 0x0316
    149e:	90 91 17 03 	lds	r25, 0x0317
    14a2:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__fixunssfsi>
			oled_goto_page(0);
			oled_printf("-- Game over --");
			CAN_send(CAN_package(0,menu_get_difficulty()));
			oled_goto_column(0);
			oled_goto_page(1);
			oled_printf("score: %d",menu_get_score());
    14a6:	1f 92       	push	r1
    14a8:	6f 93       	push	r22
    14aa:	87 e3       	ldi	r24, 0x37	; 55
    14ac:	92 e0       	ldi	r25, 0x02	; 2
    14ae:	9f 93       	push	r25
    14b0:	8f 93       	push	r24
    14b2:	0e 94 92 0b 	call	0x1724	; 0x1724 <oled_printf>
    14b6:	2f ef       	ldi	r18, 0xFF	; 255
    14b8:	8f ef       	ldi	r24, 0xFF	; 255
    14ba:	97 e7       	ldi	r25, 0x77	; 119
    14bc:	21 50       	subi	r18, 0x01	; 1
    14be:	80 40       	sbci	r24, 0x00	; 0
    14c0:	90 40       	sbci	r25, 0x00	; 0
    14c2:	e1 f7       	brne	.-8      	; 0x14bc <menu_play_pong+0x13a>
    14c4:	00 c0       	rjmp	.+0      	; 0x14c6 <menu_play_pong+0x144>
    14c6:	00 00       	nop
			_delay_ms(8000);
			current_menu = current_menu->child_menu;
    14c8:	e0 91 1c 03 	lds	r30, 0x031C
    14cc:	f0 91 1d 03 	lds	r31, 0x031D
    14d0:	81 85       	ldd	r24, Z+9	; 0x09
    14d2:	92 85       	ldd	r25, Z+10	; 0x0a
    14d4:	90 93 1d 03 	sts	0x031D, r25
    14d8:	80 93 1c 03 	sts	0x031C, r24
			menu_display(current_menu);
    14dc:	0e 94 98 07 	call	0xf30	; 0xf30 <menu_display>
menu_node* menu_get_main(){
	return main_menu;
}

void menu_reset_score(){
	score = 0;
    14e0:	10 92 14 03 	sts	0x0314, r1
    14e4:	10 92 15 03 	sts	0x0315, r1
    14e8:	10 92 16 03 	sts	0x0316, r1
    14ec:	10 92 17 03 	sts	0x0317, r1
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
			menu_display(current_menu);
			break;
		}
	}
	menu_reset_score();
}
    14fc:	6e 96       	adiw	r28, 0x1e	; 30
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	cd bf       	out	0x3d, r28	; 61
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	1f 91       	pop	r17
    150e:	0f 91       	pop	r16
    1510:	08 95       	ret

00001512 <__vector_17>:
	clear_bit(TCCR0,WGM01);
	// should now have a timer interrupt every 53 ms -> (1/(4915200 / 1024 (prescaler) /256 (1 byte))
	sei();
}

ISR(TIMER0_OVF_vect){
    1512:	1f 92       	push	r1
    1514:	0f 92       	push	r0
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	0f 92       	push	r0
    151a:	11 24       	eor	r1, r1
    151c:	2f 93       	push	r18
    151e:	3f 93       	push	r19
    1520:	4f 93       	push	r20
    1522:	5f 93       	push	r21
    1524:	6f 93       	push	r22
    1526:	7f 93       	push	r23
    1528:	8f 93       	push	r24
    152a:	9f 93       	push	r25
    152c:	af 93       	push	r26
    152e:	bf 93       	push	r27
    1530:	ef 93       	push	r30
    1532:	ff 93       	push	r31
	score += 0.053; // since the overflow flag is set every 53 ms
    1534:	27 e8       	ldi	r18, 0x87	; 135
    1536:	36 e1       	ldi	r19, 0x16	; 22
    1538:	49 e5       	ldi	r20, 0x59	; 89
    153a:	5d e3       	ldi	r21, 0x3D	; 61
    153c:	60 91 14 03 	lds	r22, 0x0314
    1540:	70 91 15 03 	lds	r23, 0x0315
    1544:	80 91 16 03 	lds	r24, 0x0316
    1548:	90 91 17 03 	lds	r25, 0x0317
    154c:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__addsf3>
    1550:	60 93 14 03 	sts	0x0314, r22
    1554:	70 93 15 03 	sts	0x0315, r23
    1558:	80 93 16 03 	sts	0x0316, r24
    155c:	90 93 17 03 	sts	0x0317, r25
}
    1560:	ff 91       	pop	r31
    1562:	ef 91       	pop	r30
    1564:	bf 91       	pop	r27
    1566:	af 91       	pop	r26
    1568:	9f 91       	pop	r25
    156a:	8f 91       	pop	r24
    156c:	7f 91       	pop	r23
    156e:	6f 91       	pop	r22
    1570:	5f 91       	pop	r21
    1572:	4f 91       	pop	r20
    1574:	3f 91       	pop	r19
    1576:	2f 91       	pop	r18
    1578:	0f 90       	pop	r0
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	0f 90       	pop	r0
    157e:	1f 90       	pop	r1
    1580:	18 95       	reti

00001582 <menu_get_main>:
	return score;
}

menu_node* menu_get_main(){
	return main_menu;
}
    1582:	80 91 1e 03 	lds	r24, 0x031E
    1586:	90 91 1f 03 	lds	r25, 0x031F
    158a:	08 95       	ret

0000158c <oled_write_d>:
uint8_t page_data = 0;
void oled_write_c(char command){
	*address_oled_cmd = command;
}
void oled_write_d(char data){
	*address_oled_data = data;
    158c:	80 93 00 12 	sts	0x1200, r24
    1590:	08 95       	ret

00001592 <oled_init>:
static uint8_t column = 0;
static uint8_t page = 0;
static uint8_t font_width = 8;
uint8_t page_data = 0;
void oled_write_c(char command){
	*address_oled_cmd = command;
    1592:	e0 e0       	ldi	r30, 0x00	; 0
    1594:	f0 e1       	ldi	r31, 0x10	; 16
    1596:	8e ea       	ldi	r24, 0xAE	; 174
    1598:	80 83       	st	Z, r24
    159a:	81 ea       	ldi	r24, 0xA1	; 161
    159c:	80 83       	st	Z, r24
    159e:	8a ed       	ldi	r24, 0xDA	; 218
    15a0:	80 83       	st	Z, r24
    15a2:	82 e1       	ldi	r24, 0x12	; 18
    15a4:	80 83       	st	Z, r24
    15a6:	88 ec       	ldi	r24, 0xC8	; 200
    15a8:	80 83       	st	Z, r24
    15aa:	88 ea       	ldi	r24, 0xA8	; 168
    15ac:	80 83       	st	Z, r24
    15ae:	8f e3       	ldi	r24, 0x3F	; 63
    15b0:	80 83       	st	Z, r24
    15b2:	85 ed       	ldi	r24, 0xD5	; 213
    15b4:	80 83       	st	Z, r24
    15b6:	80 e8       	ldi	r24, 0x80	; 128
    15b8:	80 83       	st	Z, r24
    15ba:	81 e8       	ldi	r24, 0x81	; 129
    15bc:	80 83       	st	Z, r24
    15be:	80 e5       	ldi	r24, 0x50	; 80
    15c0:	80 83       	st	Z, r24
    15c2:	89 ed       	ldi	r24, 0xD9	; 217
    15c4:	80 83       	st	Z, r24
    15c6:	81 e2       	ldi	r24, 0x21	; 33
    15c8:	80 83       	st	Z, r24
    15ca:	80 e2       	ldi	r24, 0x20	; 32
    15cc:	80 83       	st	Z, r24
    15ce:	82 e0       	ldi	r24, 0x02	; 2
    15d0:	80 83       	st	Z, r24
    15d2:	8b ed       	ldi	r24, 0xDB	; 219
    15d4:	80 83       	st	Z, r24
    15d6:	80 e3       	ldi	r24, 0x30	; 48
    15d8:	80 83       	st	Z, r24
    15da:	8d ea       	ldi	r24, 0xAD	; 173
    15dc:	80 83       	st	Z, r24
    15de:	10 82       	st	Z, r1
    15e0:	84 ea       	ldi	r24, 0xA4	; 164
    15e2:	80 83       	st	Z, r24
    15e4:	86 ea       	ldi	r24, 0xA6	; 166
    15e6:	80 83       	st	Z, r24
    15e8:	8f ea       	ldi	r24, 0xAF	; 175
    15ea:	80 83       	st	Z, r24
    15ec:	08 95       	ret

000015ee <oled_goto_page>:
	for(int i = 0; i < 128; i++){
		oled_write_d(0);
	}
}
void oled_goto_page(uint8_t my_page){
	oled_write_c(0xb0 + my_page);
    15ee:	90 eb       	ldi	r25, 0xB0	; 176
    15f0:	98 0f       	add	r25, r24
static uint8_t column = 0;
static uint8_t page = 0;
static uint8_t font_width = 8;
uint8_t page_data = 0;
void oled_write_c(char command){
	*address_oled_cmd = command;
    15f2:	90 93 00 10 	sts	0x1000, r25
		oled_write_d(0);
	}
}
void oled_goto_page(uint8_t my_page){
	oled_write_c(0xb0 + my_page);
	page = my_page;
    15f6:	80 93 19 03 	sts	0x0319, r24
    15fa:	08 95       	ret

000015fc <oled_goto_column>:
}
void oled_goto_column(uint8_t my_column){
	column = my_column;
    15fc:	80 93 1a 03 	sts	0x031A, r24
	oled_write_c(0b00001111 & my_column);
    1600:	98 2f       	mov	r25, r24
    1602:	9f 70       	andi	r25, 0x0F	; 15
static uint8_t column = 0;
static uint8_t page = 0;
static uint8_t font_width = 8;
uint8_t page_data = 0;
void oled_write_c(char command){
	*address_oled_cmd = command;
    1604:	e0 e0       	ldi	r30, 0x00	; 0
    1606:	f0 e1       	ldi	r31, 0x10	; 16
    1608:	90 83       	st	Z, r25
	page = my_page;
}
void oled_goto_column(uint8_t my_column){
	column = my_column;
	oled_write_c(0b00001111 & my_column);
	oled_write_c(0x10+((0b11110000 & my_column)>> 4));
    160a:	82 95       	swap	r24
    160c:	8f 70       	andi	r24, 0x0F	; 15
    160e:	80 5f       	subi	r24, 0xF0	; 240
static uint8_t column = 0;
static uint8_t page = 0;
static uint8_t font_width = 8;
uint8_t page_data = 0;
void oled_write_c(char command){
	*address_oled_cmd = command;
    1610:	80 83       	st	Z, r24
    1612:	08 95       	ret

00001614 <oled_clear_page>:
	}
	oled_goto_column(0);
	oled_goto_page(0);
}
void oled_clear_page(uint8_t my_page){
	oled_goto_page(my_page);
    1614:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <oled_goto_page>
	oled_goto_column(0);
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <oled_goto_column>
    161e:	80 e8       	ldi	r24, 0x80	; 128
    1620:	90 e0       	ldi	r25, 0x00	; 0
uint8_t page_data = 0;
void oled_write_c(char command){
	*address_oled_cmd = command;
}
void oled_write_d(char data){
	*address_oled_data = data;
    1622:	e0 e0       	ldi	r30, 0x00	; 0
    1624:	f2 e1       	ldi	r31, 0x12	; 18
    1626:	10 82       	st	Z, r1
    1628:	01 97       	sbiw	r24, 0x01	; 1
	oled_goto_page(0);
}
void oled_clear_page(uint8_t my_page){
	oled_goto_page(my_page);
	oled_goto_column(0);
	for(int i = 0; i < 128; i++){
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	e1 f7       	brne	.-8      	; 0x1626 <oled_clear_page+0x12>
		oled_write_d(0);
	}
}
    162e:	08 95       	ret

00001630 <oled_reset>:
	oled_write_c(0xa4);        //out  follows  RAM  content
	oled_write_c(0xa6);        //set  normal  display
	oled_write_c(0xaf);        //  display  on
}

void oled_reset(void){
    1630:	cf 93       	push	r28
    1632:	c0 e0       	ldi	r28, 0x00	; 0
	for (int page = 0; page < OLED_PAGES; page++){
		oled_clear_page(page);
    1634:	8c 2f       	mov	r24, r28
    1636:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_clear_page>
    163a:	cf 5f       	subi	r28, 0xFF	; 255
	oled_write_c(0xa6);        //set  normal  display
	oled_write_c(0xaf);        //  display  on
}

void oled_reset(void){
	for (int page = 0; page < OLED_PAGES; page++){
    163c:	c8 30       	cpi	r28, 0x08	; 8
    163e:	d1 f7       	brne	.-12     	; 0x1634 <oled_reset+0x4>
		oled_clear_page(page);
	}
	oled_goto_column(0);
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <oled_goto_column>
	oled_goto_page(0);
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <oled_goto_page>
}
    164c:	cf 91       	pop	r28
    164e:	08 95       	ret

00001650 <oled_print>:
	oled_write_c(0b00001111 & my_column);
	oled_write_c(0x10+((0b11110000 & my_column)>> 4));
	
}

void oled_print(char letter){
    1650:	1f 93       	push	r17
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	18 2f       	mov	r17, r24
	oled_goto_page(page);
    1658:	80 91 19 03 	lds	r24, 0x0319
    165c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <oled_goto_page>
	oled_goto_column(column);
    1660:	80 91 1a 03 	lds	r24, 0x031A
    1664:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <oled_goto_column>
	char *byte;
	if (font_width == 8){
    1668:	90 91 0a 01 	lds	r25, 0x010A
    166c:	98 30       	cpi	r25, 0x08	; 8
    166e:	59 f4       	brne	.+22     	; 0x1686 <oled_print+0x36>
		byte = font8[letter-FONT_OFFSET];
    1670:	c1 2f       	mov	r28, r17
    1672:	d0 e0       	ldi	r29, 0x00	; 0
    1674:	cc 0f       	add	r28, r28
    1676:	dd 1f       	adc	r29, r29
    1678:	cc 0f       	add	r28, r28
    167a:	dd 1f       	adc	r29, r29
    167c:	cc 0f       	add	r28, r28
    167e:	dd 1f       	adc	r29, r29
    1680:	cb 50       	subi	r28, 0x0B	; 11
    1682:	dd 4f       	sbci	r29, 0xFD	; 253
    1684:	1a c0       	rjmp	.+52     	; 0x16ba <oled_print+0x6a>
	}
	if (font_width == 5){
    1686:	95 30       	cpi	r25, 0x05	; 5
    1688:	71 f4       	brne	.+28     	; 0x16a6 <oled_print+0x56>
		byte = font5[letter-FONT_OFFSET];
    168a:	21 2f       	mov	r18, r17
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	20 52       	subi	r18, 0x20	; 32
    1690:	31 09       	sbc	r19, r1
    1692:	e9 01       	movw	r28, r18
    1694:	cc 0f       	add	r28, r28
    1696:	dd 1f       	adc	r29, r29
    1698:	cc 0f       	add	r28, r28
    169a:	dd 1f       	adc	r29, r29
    169c:	c2 0f       	add	r28, r18
    169e:	d3 1f       	adc	r29, r19
    16a0:	c6 5e       	subi	r28, 0xE6	; 230
    16a2:	dd 4f       	sbci	r29, 0xFD	; 253
    16a4:	0a c0       	rjmp	.+20     	; 0x16ba <oled_print+0x6a>
	}
	if (font_width == 4){
    16a6:	94 30       	cpi	r25, 0x04	; 4
    16a8:	41 f4       	brne	.+16     	; 0x16ba <oled_print+0x6a>
		byte = font4[letter-FONT_OFFSET];
    16aa:	c1 2f       	mov	r28, r17
    16ac:	d0 e0       	ldi	r29, 0x00	; 0
    16ae:	cc 0f       	add	r28, r28
    16b0:	dd 1f       	adc	r29, r29
    16b2:	cc 0f       	add	r28, r28
    16b4:	dd 1f       	adc	r29, r29
    16b6:	c2 5e       	subi	r28, 0xE2	; 226
    16b8:	df 4f       	sbci	r29, 0xFF	; 255
	}
	if (((column+font_width) >  OLED_WIDTH)){
    16ba:	20 91 1a 03 	lds	r18, 0x031A
    16be:	89 2f       	mov	r24, r25
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	82 0f       	add	r24, r18
    16c4:	91 1d       	adc	r25, r1
    16c6:	81 38       	cpi	r24, 0x81	; 129
    16c8:	91 05       	cpc	r25, r1
    16ca:	7c f0       	brlt	.+30     	; 0x16ea <oled_print+0x9a>
		oled_goto_page(page+1);
    16cc:	80 91 19 03 	lds	r24, 0x0319
    16d0:	8f 5f       	subi	r24, 0xFF	; 255
    16d2:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <oled_goto_page>
		oled_goto_column(0);
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <oled_goto_column>
		if (page == 8){
    16dc:	80 91 19 03 	lds	r24, 0x0319
    16e0:	88 30       	cpi	r24, 0x08	; 8
    16e2:	19 f4       	brne	.+6      	; 0x16ea <oled_print+0x9a>
			oled_goto_page(0);
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <oled_goto_page>
		}
	}
	for (int i = 0; i < font_width; i++){
    16ea:	80 91 0a 01 	lds	r24, 0x010A
    16ee:	88 23       	and	r24, r24
    16f0:	a9 f0       	breq	.+42     	; 0x171c <oled_print+0xcc>
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	90 e0       	ldi	r25, 0x00	; 0
uint8_t page_data = 0;
void oled_write_c(char command){
	*address_oled_cmd = command;
}
void oled_write_d(char data){
	*address_oled_data = data;
    16f6:	a0 e0       	ldi	r26, 0x00	; 0
    16f8:	b2 e1       	ldi	r27, 0x12	; 18
    16fa:	fe 01       	movw	r30, r28
    16fc:	e8 0f       	add	r30, r24
    16fe:	f9 1f       	adc	r31, r25
		if (page == 8){
			oled_goto_page(0);
		}
	}
	for (int i = 0; i < font_width; i++){
		oled_write_d(pgm_read_byte(byte + i));
    1700:	e4 91       	lpm	r30, Z
uint8_t page_data = 0;
void oled_write_c(char command){
	*address_oled_cmd = command;
}
void oled_write_d(char data){
	*address_oled_data = data;
    1702:	ec 93       	st	X, r30
			oled_goto_page(0);
		}
	}
	for (int i = 0; i < font_width; i++){
		oled_write_d(pgm_read_byte(byte + i));
		column += 1;
    1704:	20 91 1a 03 	lds	r18, 0x031A
    1708:	2f 5f       	subi	r18, 0xFF	; 255
    170a:	20 93 1a 03 	sts	0x031A, r18
		oled_goto_column(0);
		if (page == 8){
			oled_goto_page(0);
		}
	}
	for (int i = 0; i < font_width; i++){
    170e:	01 96       	adiw	r24, 0x01	; 1
    1710:	20 91 0a 01 	lds	r18, 0x010A
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	82 17       	cp	r24, r18
    1718:	93 07       	cpc	r25, r19
    171a:	7c f3       	brlt	.-34     	; 0x16fa <oled_print+0xaa>
		oled_write_d(pgm_read_byte(byte + i));
		column += 1;
	}
}
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	1f 91       	pop	r17
    1722:	08 95       	ret

00001724 <oled_printf>:

void set_width(uint8_t width){
	font_width = width;
}

void oled_printf(const char* fmt, ...){
    1724:	cf 93       	push	r28
    1726:	df 93       	push	r29
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	fe 01       	movw	r30, r28
    172e:	35 96       	adiw	r30, 0x05	; 5
    1730:	61 91       	ld	r22, Z+
    1732:	71 91       	ld	r23, Z+
	va_list args;
	va_start(args, fmt);
	vfprintf(&oled_stdout, fmt, args);
    1734:	af 01       	movw	r20, r30
    1736:	8b e0       	ldi	r24, 0x0B	; 11
    1738:	91 e0       	ldi	r25, 0x01	; 1
    173a:	0e 94 bd 12 	call	0x257a	; 0x257a <vfprintf>
	va_end(args);
}
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

00001744 <slider_left_button>:
    1744:	86 b3       	in	r24, 0x16	; 22
    1746:	86 95       	lsr	r24
    1748:	81 70       	andi	r24, 0x01	; 1
    174a:	08 95       	ret

0000174c <slider_right_button>:
    174c:	86 b3       	in	r24, 0x16	; 22
    174e:	81 70       	andi	r24, 0x01	; 1
    1750:	08 95       	ret

00001752 <slider_find_position>:
    1752:	cf 93       	push	r28
    1754:	86 e0       	ldi	r24, 0x06	; 6
    1756:	0e 94 98 03 	call	0x730	; 0x730 <ADC_read>
    175a:	c8 2f       	mov	r28, r24
    175c:	87 e0       	ldi	r24, 0x07	; 7
    175e:	0e 94 98 03 	call	0x730	; 0x730 <ADC_read>
    1762:	98 2f       	mov	r25, r24
    1764:	8c 2f       	mov	r24, r28
    1766:	cf 91       	pop	r28
    1768:	08 95       	ret

0000176a <snake_setup>:
DIRECTION dir;
DIRECTION last_direction;
GAME_MODE diff = EASY;

void snake_setup(GAME_MODE difficulty){
	diff = difficulty;
    176a:	80 93 1b 03 	sts	0x031B, r24
	gameOver = 0;
    176e:	10 92 22 03 	sts	0x0322, r1
	dir = NEUTRAL;
    1772:	84 e0       	ldi	r24, 0x04	; 4
    1774:	80 93 57 03 	sts	0x0357, r24
	x = WIDTH / 2;
    1778:	80 e1       	ldi	r24, 0x10	; 16
    177a:	80 93 20 03 	sts	0x0320, r24
	y = HEIGHT / 2;
    177e:	88 e0       	ldi	r24, 0x08	; 8
    1780:	80 93 56 03 	sts	0x0356, r24
	rand();
    1784:	0e 94 21 12 	call	0x2442	; 0x2442 <rand>
	// yield different seeds each time (unless srand() is called before thisfunction)
	uint16_t seed = ADC_read(CH_RIGHT_SLIDER);//rand();
    1788:	87 e0       	ldi	r24, 0x07	; 7
    178a:	0e 94 98 03 	call	0x730	; 0x730 <ADC_read>
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	0e 94 26 12 	call	0x244c	; 0x244c <srand>
	fruitX = rand() % WIDTH;
    1794:	0e 94 21 12 	call	0x2442	; 0x2442 <rand>
    1798:	8f 71       	andi	r24, 0x1F	; 31
    179a:	90 78       	andi	r25, 0x80	; 128
    179c:	99 23       	and	r25, r25
    179e:	24 f4       	brge	.+8      	; 0x17a8 <snake_setup+0x3e>
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	80 6e       	ori	r24, 0xE0	; 224
    17a4:	9f 6f       	ori	r25, 0xFF	; 255
    17a6:	01 96       	adiw	r24, 0x01	; 1
    17a8:	80 93 8b 03 	sts	0x038B, r24
	fruitY = rand() % HEIGHT;
    17ac:	0e 94 21 12 	call	0x2442	; 0x2442 <rand>
    17b0:	8f 70       	andi	r24, 0x0F	; 15
    17b2:	90 78       	andi	r25, 0x80	; 128
    17b4:	99 23       	and	r25, r25
    17b6:	24 f4       	brge	.+8      	; 0x17c0 <snake_setup+0x56>
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	80 6f       	ori	r24, 0xF0	; 240
    17bc:	9f 6f       	ori	r25, 0xFF	; 255
    17be:	01 96       	adiw	r24, 0x01	; 1
    17c0:	80 93 21 03 	sts	0x0321, r24
	score = 0;
    17c4:	10 92 14 03 	sts	0x0314, r1
	nTail = 0;
    17c8:	10 92 58 03 	sts	0x0358, r1
    17cc:	08 95       	ret

000017ce <snake_logic>:
			}
		}
	}
	oled_buffer_display();
}
void snake_logic(){
    17ce:	ff 92       	push	r15
    17d0:	0f 93       	push	r16
    17d2:	1f 93       	push	r17
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
	int8_t prevX = tailX[0];
    17d8:	a9 e5       	ldi	r26, 0x59	; 89
    17da:	b3 e0       	ldi	r27, 0x03	; 3
    17dc:	4c 91       	ld	r20, X
	int8_t prevY = tailY[0];
    17de:	e4 e2       	ldi	r30, 0x24	; 36
    17e0:	f3 e0       	ldi	r31, 0x03	; 3
    17e2:	50 81       	ld	r21, Z
	int8_t prev2X, prev2Y;
	tailX[0] = x;
    17e4:	d0 91 20 03 	lds	r29, 0x0320
    17e8:	dc 93       	st	X, r29
	tailY[0] = y;
    17ea:	c0 91 56 03 	lds	r28, 0x0356
    17ee:	c0 83       	st	Z, r28
	// Updating body
	for (int i = 1; i < nTail; i++){
    17f0:	20 91 58 03 	lds	r18, 0x0358
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	22 30       	cpi	r18, 0x02	; 2
    17f8:	31 05       	cpc	r19, r1
    17fa:	8c f0       	brlt	.+34     	; 0x181e <snake_logic+0x50>
    17fc:	aa e5       	ldi	r26, 0x5A	; 90
    17fe:	b3 e0       	ldi	r27, 0x03	; 3
    1800:	e5 e2       	ldi	r30, 0x25	; 37
    1802:	f3 e0       	ldi	r31, 0x03	; 3
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
		prev2X = tailX[i];
    1808:	6c 91       	ld	r22, X
		prev2Y = tailY[i];
    180a:	70 81       	ld	r23, Z
		tailX[i] = prevX;
    180c:	4d 93       	st	X+, r20
		tailY[i] = prevY;
    180e:	51 93       	st	Z+, r21
	int8_t prevY = tailY[0];
	int8_t prev2X, prev2Y;
	tailX[0] = x;
	tailY[0] = y;
	// Updating body
	for (int i = 1; i < nTail; i++){
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	82 17       	cp	r24, r18
    1814:	93 07       	cpc	r25, r19
    1816:	1c f4       	brge	.+6      	; 0x181e <snake_logic+0x50>
		prev2X = tailX[i];
		prev2Y = tailY[i];
		tailX[i] = prevX;
		tailY[i] = prevY;
		prevX = prev2X;
		prevY = prev2Y;
    1818:	57 2f       	mov	r21, r23
	for (int i = 1; i < nTail; i++){
		prev2X = tailX[i];
		prev2Y = tailY[i];
		tailX[i] = prevX;
		tailY[i] = prevY;
		prevX = prev2X;
    181a:	46 2f       	mov	r20, r22
    181c:	f5 cf       	rjmp	.-22     	; 0x1808 <snake_logic+0x3a>
		prevY = prev2Y;
	}
	switch (dir)
    181e:	80 91 57 03 	lds	r24, 0x0357
    1822:	81 30       	cpi	r24, 0x01	; 1
    1824:	51 f0       	breq	.+20     	; 0x183a <snake_logic+0x6c>
    1826:	28 f0       	brcs	.+10     	; 0x1832 <snake_logic+0x64>
    1828:	82 30       	cpi	r24, 0x02	; 2
    182a:	59 f0       	breq	.+22     	; 0x1842 <snake_logic+0x74>
    182c:	83 30       	cpi	r24, 0x03	; 3
    182e:	69 f0       	breq	.+26     	; 0x184a <snake_logic+0x7c>
    1830:	0f c0       	rjmp	.+30     	; 0x1850 <snake_logic+0x82>
	{
		case LEFT:
		x--;
    1832:	d1 50       	subi	r29, 0x01	; 1
    1834:	d0 93 20 03 	sts	0x0320, r29
		break;
    1838:	0b c0       	rjmp	.+22     	; 0x1850 <snake_logic+0x82>
		case RIGHT:
		x++;
    183a:	df 5f       	subi	r29, 0xFF	; 255
    183c:	d0 93 20 03 	sts	0x0320, r29
		break;
    1840:	07 c0       	rjmp	.+14     	; 0x1850 <snake_logic+0x82>
		case UP:
		y--;
    1842:	c1 50       	subi	r28, 0x01	; 1
    1844:	c0 93 56 03 	sts	0x0356, r28
		break;
    1848:	03 c0       	rjmp	.+6      	; 0x1850 <snake_logic+0x82>
		case DOWN:
		y++;
    184a:	cf 5f       	subi	r28, 0xFF	; 255
    184c:	c0 93 56 03 	sts	0x0356, r28
		break;
		default:
		break;
	}
	printf("Before limits\n");
    1850:	81 e4       	ldi	r24, 0x41	; 65
    1852:	92 e0       	ldi	r25, 0x02	; 2
    1854:	0e 94 90 12 	call	0x2520	; 0x2520 <puts>
	if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT){
    1858:	80 91 20 03 	lds	r24, 0x0320
    185c:	80 32       	cpi	r24, 0x20	; 32
    185e:	20 f4       	brcc	.+8      	; 0x1868 <snake_logic+0x9a>
    1860:	80 91 56 03 	lds	r24, 0x0356
    1864:	80 31       	cpi	r24, 0x10	; 16
    1866:	38 f0       	brcs	.+14     	; 0x1876 <snake_logic+0xa8>
		gameOver = 1;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	80 93 22 03 	sts	0x0322, r24
		printf("Game over set in border cases \n");
    186e:	8f e4       	ldi	r24, 0x4F	; 79
    1870:	92 e0       	ldi	r25, 0x02	; 2
    1872:	0e 94 90 12 	call	0x2520	; 0x2520 <puts>
	}
	for (int i = 0; i < nTail; i++){
    1876:	80 91 58 03 	lds	r24, 0x0358
    187a:	88 23       	and	r24, r24
    187c:	11 f1       	breq	.+68     	; 0x18c2 <snake_logic+0xf4>
    187e:	09 e5       	ldi	r16, 0x59	; 89
    1880:	13 e0       	ldi	r17, 0x03	; 3
    1882:	c0 e0       	ldi	r28, 0x00	; 0
    1884:	d0 e0       	ldi	r29, 0x00	; 0
		if (tailX[i] == x && tailY[i] == y){
			gameOver = 1;
    1886:	ff 24       	eor	r15, r15
    1888:	f3 94       	inc	r15
	if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT){
		gameOver = 1;
		printf("Game over set in border cases \n");
	}
	for (int i = 0; i < nTail; i++){
		if (tailX[i] == x && tailY[i] == y){
    188a:	f8 01       	movw	r30, r16
    188c:	91 91       	ld	r25, Z+
    188e:	8f 01       	movw	r16, r30
    1890:	80 91 20 03 	lds	r24, 0x0320
    1894:	98 13       	cpse	r25, r24
    1896:	0e c0       	rjmp	.+28     	; 0x18b4 <snake_logic+0xe6>
    1898:	fe 01       	movw	r30, r28
    189a:	ec 5d       	subi	r30, 0xDC	; 220
    189c:	fc 4f       	sbci	r31, 0xFC	; 252
    189e:	90 81       	ld	r25, Z
    18a0:	80 91 56 03 	lds	r24, 0x0356
    18a4:	98 13       	cpse	r25, r24
    18a6:	06 c0       	rjmp	.+12     	; 0x18b4 <snake_logic+0xe6>
			gameOver = 1;
    18a8:	f0 92 22 03 	sts	0x0322, r15
			printf("Game over set in tail collision \n");
    18ac:	8e e6       	ldi	r24, 0x6E	; 110
    18ae:	92 e0       	ldi	r25, 0x02	; 2
    18b0:	0e 94 90 12 	call	0x2520	; 0x2520 <puts>
	printf("Before limits\n");
	if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT){
		gameOver = 1;
		printf("Game over set in border cases \n");
	}
	for (int i = 0; i < nTail; i++){
    18b4:	21 96       	adiw	r28, 0x01	; 1
    18b6:	80 91 58 03 	lds	r24, 0x0358
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	c8 17       	cp	r28, r24
    18be:	d9 07       	cpc	r29, r25
    18c0:	24 f3       	brlt	.-56     	; 0x188a <snake_logic+0xbc>
			gameOver = 1;
			printf("Game over set in tail collision \n");
		}
	}
	
	if (x == fruitX && y == fruitY){
    18c2:	90 91 20 03 	lds	r25, 0x0320
    18c6:	80 91 8b 03 	lds	r24, 0x038B
    18ca:	98 13       	cpse	r25, r24
    18cc:	28 c0       	rjmp	.+80     	; 0x191e <snake_logic+0x150>
    18ce:	90 91 56 03 	lds	r25, 0x0356
    18d2:	80 91 21 03 	lds	r24, 0x0321
    18d6:	98 13       	cpse	r25, r24
    18d8:	22 c0       	rjmp	.+68     	; 0x191e <snake_logic+0x150>
		score += 1;
    18da:	80 91 14 03 	lds	r24, 0x0314
    18de:	8f 5f       	subi	r24, 0xFF	; 255
    18e0:	80 93 14 03 	sts	0x0314, r24
		fruitX = rand() % WIDTH;
    18e4:	0e 94 21 12 	call	0x2442	; 0x2442 <rand>
    18e8:	8f 71       	andi	r24, 0x1F	; 31
    18ea:	90 78       	andi	r25, 0x80	; 128
    18ec:	99 23       	and	r25, r25
    18ee:	24 f4       	brge	.+8      	; 0x18f8 <snake_logic+0x12a>
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	80 6e       	ori	r24, 0xE0	; 224
    18f4:	9f 6f       	ori	r25, 0xFF	; 255
    18f6:	01 96       	adiw	r24, 0x01	; 1
    18f8:	80 93 8b 03 	sts	0x038B, r24
		fruitY = rand() % HEIGHT;
    18fc:	0e 94 21 12 	call	0x2442	; 0x2442 <rand>
    1900:	8f 70       	andi	r24, 0x0F	; 15
    1902:	90 78       	andi	r25, 0x80	; 128
    1904:	99 23       	and	r25, r25
    1906:	24 f4       	brge	.+8      	; 0x1910 <snake_logic+0x142>
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	80 6f       	ori	r24, 0xF0	; 240
    190c:	9f 6f       	ori	r25, 0xFF	; 255
    190e:	01 96       	adiw	r24, 0x01	; 1
    1910:	80 93 21 03 	sts	0x0321, r24
		nTail++;
    1914:	80 91 58 03 	lds	r24, 0x0358
    1918:	8f 5f       	subi	r24, 0xFF	; 255
    191a:	80 93 58 03 	sts	0x0358, r24
	}
}
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	1f 91       	pop	r17
    1924:	0f 91       	pop	r16
    1926:	ff 90       	pop	r15
    1928:	08 95       	ret

0000192a <snake_input>:
void snake_input(){
	last_direction = dir;
    192a:	80 91 57 03 	lds	r24, 0x0357
    192e:	80 93 23 03 	sts	0x0323, r24
	dir = joystick_find_direction();
    1932:	0e 94 37 06 	call	0xc6e	; 0xc6e <joystick_find_direction>
    1936:	80 93 57 03 	sts	0x0357, r24
	printf("current direction: %d\n",dir);
    193a:	1f 92       	push	r1
    193c:	8f 93       	push	r24
    193e:	8f e8       	ldi	r24, 0x8F	; 143
    1940:	92 e0       	ldi	r25, 0x02	; 2
    1942:	9f 93       	push	r25
    1944:	8f 93       	push	r24
    1946:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <printf>
	if ((dir == NEUTRAL) || (last_direction == LEFT && dir == RIGHT) || (last_direction == RIGHT && dir == LEFT) || (last_direction == UP && dir == DOWN) || (last_direction == DOWN && dir == UP)){
    194a:	80 91 57 03 	lds	r24, 0x0357
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	84 30       	cpi	r24, 0x04	; 4
    1958:	a9 f0       	breq	.+42     	; 0x1984 <snake_input+0x5a>
    195a:	90 91 23 03 	lds	r25, 0x0323
    195e:	91 11       	cpse	r25, r1
    1960:	03 c0       	rjmp	.+6      	; 0x1968 <snake_input+0x3e>
    1962:	81 30       	cpi	r24, 0x01	; 1
    1964:	59 f4       	brne	.+22     	; 0x197c <snake_input+0x52>
    1966:	0e c0       	rjmp	.+28     	; 0x1984 <snake_input+0x5a>
    1968:	91 30       	cpi	r25, 0x01	; 1
    196a:	19 f4       	brne	.+6      	; 0x1972 <snake_input+0x48>
    196c:	88 23       	and	r24, r24
    196e:	51 f0       	breq	.+20     	; 0x1984 <snake_input+0x5a>
    1970:	08 95       	ret
    1972:	92 30       	cpi	r25, 0x02	; 2
    1974:	19 f4       	brne	.+6      	; 0x197c <snake_input+0x52>
    1976:	83 30       	cpi	r24, 0x03	; 3
    1978:	49 f4       	brne	.+18     	; 0x198c <snake_input+0x62>
    197a:	04 c0       	rjmp	.+8      	; 0x1984 <snake_input+0x5a>
    197c:	93 30       	cpi	r25, 0x03	; 3
    197e:	31 f4       	brne	.+12     	; 0x198c <snake_input+0x62>
    1980:	82 30       	cpi	r24, 0x02	; 2
    1982:	21 f4       	brne	.+8      	; 0x198c <snake_input+0x62>
		dir = last_direction;
    1984:	80 91 23 03 	lds	r24, 0x0323
    1988:	80 93 57 03 	sts	0x0357, r24
    198c:	08 95       	ret

0000198e <snake_draw_pixel>:
	}
	// if you want to break out of the game
}
void snake_draw_pixel(x,y){
    198e:	0f 93       	push	r16
	oled_buffer_rectangle(x*4,y*4,4,4,1);
    1990:	66 0f       	add	r22, r22
    1992:	66 0f       	add	r22, r22
    1994:	01 e0       	ldi	r16, 0x01	; 1
    1996:	24 e0       	ldi	r18, 0x04	; 4
    1998:	44 e0       	ldi	r20, 0x04	; 4
    199a:	88 0f       	add	r24, r24
    199c:	88 0f       	add	r24, r24
    199e:	0e 94 06 04 	call	0x80c	; 0x80c <oled_buffer_rectangle>
}
    19a2:	0f 91       	pop	r16
    19a4:	08 95       	ret

000019a6 <snake_draw>:
			_delay_ms(40);
		}
	}
}

void snake_draw(){
    19a6:	6f 92       	push	r6
    19a8:	7f 92       	push	r7
    19aa:	8f 92       	push	r8
    19ac:	9f 92       	push	r9
    19ae:	af 92       	push	r10
    19b0:	bf 92       	push	r11
    19b2:	cf 92       	push	r12
    19b4:	df 92       	push	r13
    19b6:	ef 92       	push	r14
    19b8:	ff 92       	push	r15
    19ba:	0f 93       	push	r16
    19bc:	1f 93       	push	r17
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
	oled_buffer_init();
    19c2:	0e 94 b9 03 	call	0x772	; 0x772 <oled_buffer_init>
	for (int i = 0; i < HEIGHT; i++)
    19c6:	a1 2c       	mov	r10, r1
    19c8:	b1 2c       	mov	r11, r1
			_delay_ms(40);
		}
	}
}

void snake_draw(){
    19ca:	61 2c       	mov	r6, r1
    19cc:	71 2c       	mov	r7, r1
    19ce:	0f 2e       	mov	r0, r31
    19d0:	f9 e5       	ldi	r31, 0x59	; 89
    19d2:	cf 2e       	mov	r12, r31
    19d4:	f3 e0       	ldi	r31, 0x03	; 3
    19d6:	df 2e       	mov	r13, r31
    19d8:	f0 2d       	mov	r31, r0
			// snake "fruit"
			else if (i == fruitY && j == fruitX){
				snake_draw_pixel(j,i);
			}
			else {
				for (int k = 0; k < nTail; k++){
    19da:	86 2c       	mov	r8, r6
    19dc:	97 2c       	mov	r9, r7
    19de:	5d c0       	rjmp	.+186    	; 0x1a9a <snake_draw+0xf4>
	for (int i = 0; i < HEIGHT; i++)
	{
		for (int j = 0; j < WIDTH; j++)
		{
			// snake head
			if (i == y && j == x){
    19e0:	80 91 56 03 	lds	r24, 0x0356
    19e4:	99 27       	eor	r25, r25
    19e6:	87 fd       	sbrc	r24, 7
    19e8:	90 95       	com	r25
    19ea:	8a 15       	cp	r24, r10
    19ec:	9b 05       	cpc	r25, r11
    19ee:	61 f4       	brne	.+24     	; 0x1a08 <snake_draw+0x62>
    19f0:	80 91 20 03 	lds	r24, 0x0320
    19f4:	99 27       	eor	r25, r25
    19f6:	87 fd       	sbrc	r24, 7
    19f8:	90 95       	com	r25
    19fa:	8e 15       	cp	r24, r14
    19fc:	9f 05       	cpc	r25, r15
    19fe:	21 f4       	brne	.+8      	; 0x1a08 <snake_draw+0x62>
				snake_draw_pixel(j,i);
    1a00:	b5 01       	movw	r22, r10
    1a02:	0e 94 c7 0c 	call	0x198e	; 0x198e <snake_draw_pixel>
    1a06:	3a c0       	rjmp	.+116    	; 0x1a7c <snake_draw+0xd6>
			}
			// snake "fruit"
			else if (i == fruitY && j == fruitX){
    1a08:	80 91 21 03 	lds	r24, 0x0321
    1a0c:	99 27       	eor	r25, r25
    1a0e:	87 fd       	sbrc	r24, 7
    1a10:	90 95       	com	r25
    1a12:	8a 15       	cp	r24, r10
    1a14:	9b 05       	cpc	r25, r11
    1a16:	29 f0       	breq	.+10     	; 0x1a22 <snake_draw+0x7c>
				snake_draw_pixel(j,i);
			}
			else {
				for (int k = 0; k < nTail; k++){
    1a18:	80 91 58 03 	lds	r24, 0x0358
    1a1c:	81 11       	cpse	r24, r1
    1a1e:	0d c0       	rjmp	.+26     	; 0x1a3a <snake_draw+0x94>
    1a20:	2d c0       	rjmp	.+90     	; 0x1a7c <snake_draw+0xd6>
			// snake head
			if (i == y && j == x){
				snake_draw_pixel(j,i);
			}
			// snake "fruit"
			else if (i == fruitY && j == fruitX){
    1a22:	80 91 8b 03 	lds	r24, 0x038B
    1a26:	99 27       	eor	r25, r25
    1a28:	87 fd       	sbrc	r24, 7
    1a2a:	90 95       	com	r25
    1a2c:	8e 15       	cp	r24, r14
    1a2e:	9f 05       	cpc	r25, r15
    1a30:	99 f7       	brne	.-26     	; 0x1a18 <snake_draw+0x72>
				snake_draw_pixel(j,i);
    1a32:	b5 01       	movw	r22, r10
    1a34:	0e 94 c7 0c 	call	0x198e	; 0x198e <snake_draw_pixel>
    1a38:	21 c0       	rjmp	.+66     	; 0x1a7c <snake_draw+0xd6>
    1a3a:	86 01       	movw	r16, r12
			}
			else {
				for (int k = 0; k < nTail; k++){
    1a3c:	c8 2d       	mov	r28, r8
    1a3e:	d9 2d       	mov	r29, r9
					if (tailX[k] == j && tailY[k] == i){
    1a40:	f8 01       	movw	r30, r16
    1a42:	81 91       	ld	r24, Z+
    1a44:	8f 01       	movw	r16, r30
    1a46:	99 27       	eor	r25, r25
    1a48:	87 fd       	sbrc	r24, 7
    1a4a:	90 95       	com	r25
    1a4c:	8e 15       	cp	r24, r14
    1a4e:	9f 05       	cpc	r25, r15
    1a50:	71 f4       	brne	.+28     	; 0x1a6e <snake_draw+0xc8>
    1a52:	fe 01       	movw	r30, r28
    1a54:	ec 5d       	subi	r30, 0xDC	; 220
    1a56:	fc 4f       	sbci	r31, 0xFC	; 252
    1a58:	80 81       	ld	r24, Z
    1a5a:	99 27       	eor	r25, r25
    1a5c:	87 fd       	sbrc	r24, 7
    1a5e:	90 95       	com	r25
    1a60:	8a 15       	cp	r24, r10
    1a62:	9b 05       	cpc	r25, r11
    1a64:	21 f4       	brne	.+8      	; 0x1a6e <snake_draw+0xc8>
						snake_draw_pixel(j,i);
    1a66:	b5 01       	movw	r22, r10
    1a68:	c7 01       	movw	r24, r14
    1a6a:	0e 94 c7 0c 	call	0x198e	; 0x198e <snake_draw_pixel>
			// snake "fruit"
			else if (i == fruitY && j == fruitX){
				snake_draw_pixel(j,i);
			}
			else {
				for (int k = 0; k < nTail; k++){
    1a6e:	21 96       	adiw	r28, 0x01	; 1
    1a70:	20 91 58 03 	lds	r18, 0x0358
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	c2 17       	cp	r28, r18
    1a78:	d3 07       	cpc	r29, r19
    1a7a:	14 f3       	brlt	.-60     	; 0x1a40 <snake_draw+0x9a>

void snake_draw(){
	oled_buffer_init();
	for (int i = 0; i < HEIGHT; i++)
	{
		for (int j = 0; j < WIDTH; j++)
    1a7c:	ff ef       	ldi	r31, 0xFF	; 255
    1a7e:	ef 1a       	sub	r14, r31
    1a80:	ff 0a       	sbc	r15, r31
    1a82:	80 e2       	ldi	r24, 0x20	; 32
    1a84:	e8 16       	cp	r14, r24
    1a86:	f1 04       	cpc	r15, r1
    1a88:	09 f0       	breq	.+2      	; 0x1a8c <snake_draw+0xe6>
    1a8a:	aa cf       	rjmp	.-172    	; 0x19e0 <snake_draw+0x3a>
	}
}

void snake_draw(){
	oled_buffer_init();
	for (int i = 0; i < HEIGHT; i++)
    1a8c:	ef ef       	ldi	r30, 0xFF	; 255
    1a8e:	ae 1a       	sub	r10, r30
    1a90:	be 0a       	sbc	r11, r30
    1a92:	f0 e1       	ldi	r31, 0x10	; 16
    1a94:	af 16       	cp	r10, r31
    1a96:	b1 04       	cpc	r11, r1
    1a98:	19 f0       	breq	.+6      	; 0x1aa0 <snake_draw+0xfa>
			_delay_ms(40);
		}
	}
}

void snake_draw(){
    1a9a:	e6 2c       	mov	r14, r6
    1a9c:	f7 2c       	mov	r15, r7
    1a9e:	a0 cf       	rjmp	.-192    	; 0x19e0 <snake_draw+0x3a>
					}
				}
			}
		}
	}
	oled_buffer_display();
    1aa0:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <oled_buffer_display>
}
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	ff 90       	pop	r15
    1aae:	ef 90       	pop	r14
    1ab0:	df 90       	pop	r13
    1ab2:	cf 90       	pop	r12
    1ab4:	bf 90       	pop	r11
    1ab6:	af 90       	pop	r10
    1ab8:	9f 90       	pop	r9
    1aba:	8f 90       	pop	r8
    1abc:	7f 90       	pop	r7
    1abe:	6f 90       	pop	r6
    1ac0:	08 95       	ret

00001ac2 <snake_play_snake>:
	fruitX = rand() % WIDTH;
	fruitY = rand() % HEIGHT;
	score = 0;
	nTail = 0;
}
void snake_play_snake(GAME_MODE difficulty){
    1ac2:	cf 93       	push	r28
    1ac4:	c8 2f       	mov	r28, r24
	//int seed = time(NULL);
	snake_setup(difficulty);
    1ac6:	0e 94 b5 0b 	call	0x176a	; 0x176a <snake_setup>
	while (!gameOver){
    1aca:	26 c0       	rjmp	.+76     	; 0x1b18 <snake_play_snake+0x56>
		snake_draw();
    1acc:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <snake_draw>
		snake_input();
    1ad0:	0e 94 95 0c 	call	0x192a	; 0x192a <snake_input>
		snake_logic();
    1ad4:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <snake_logic>
		if (difficulty == EASY){
    1ad8:	c1 11       	cpse	r28, r1
    1ada:	0a c0       	rjmp	.+20     	; 0x1af0 <snake_play_snake+0x2e>
    1adc:	2f ef       	ldi	r18, 0xFF	; 255
    1ade:	8f e7       	ldi	r24, 0x7F	; 127
    1ae0:	91 e0       	ldi	r25, 0x01	; 1
    1ae2:	21 50       	subi	r18, 0x01	; 1
    1ae4:	80 40       	sbci	r24, 0x00	; 0
    1ae6:	90 40       	sbci	r25, 0x00	; 0
    1ae8:	e1 f7       	brne	.-8      	; 0x1ae2 <snake_play_snake+0x20>
    1aea:	00 c0       	rjmp	.+0      	; 0x1aec <snake_play_snake+0x2a>
    1aec:	00 c0       	rjmp	.+0      	; 0x1aee <snake_play_snake+0x2c>
    1aee:	14 c0       	rjmp	.+40     	; 0x1b18 <snake_play_snake+0x56>
			_delay_ms(100);
		}
		if (difficulty == MEDIUM){
    1af0:	c1 30       	cpi	r28, 0x01	; 1
    1af2:	51 f4       	brne	.+20     	; 0x1b08 <snake_play_snake+0x46>
    1af4:	22 e3       	ldi	r18, 0x32	; 50
    1af6:	83 e3       	ldi	r24, 0x33	; 51
    1af8:	91 e0       	ldi	r25, 0x01	; 1
    1afa:	21 50       	subi	r18, 0x01	; 1
    1afc:	80 40       	sbci	r24, 0x00	; 0
    1afe:	90 40       	sbci	r25, 0x00	; 0
    1b00:	e1 f7       	brne	.-8      	; 0x1afa <snake_play_snake+0x38>
    1b02:	00 c0       	rjmp	.+0      	; 0x1b04 <snake_play_snake+0x42>
    1b04:	00 c0       	rjmp	.+0      	; 0x1b06 <snake_play_snake+0x44>
    1b06:	08 c0       	rjmp	.+16     	; 0x1b18 <snake_play_snake+0x56>
			_delay_ms(80);
		}
		if (difficulty == INSANE){
    1b08:	c2 30       	cpi	r28, 0x02	; 2
    1b0a:	31 f4       	brne	.+12     	; 0x1b18 <snake_play_snake+0x56>
    1b0c:	8f ef       	ldi	r24, 0xFF	; 255
    1b0e:	9f eb       	ldi	r25, 0xBF	; 191
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	f1 f7       	brne	.-4      	; 0x1b10 <snake_play_snake+0x4e>
    1b14:	00 c0       	rjmp	.+0      	; 0x1b16 <snake_play_snake+0x54>
    1b16:	00 00       	nop
	nTail = 0;
}
void snake_play_snake(GAME_MODE difficulty){
	//int seed = time(NULL);
	snake_setup(difficulty);
	while (!gameOver){
    1b18:	80 91 22 03 	lds	r24, 0x0322
    1b1c:	88 23       	and	r24, r24
    1b1e:	b1 f2       	breq	.-84     	; 0x1acc <snake_play_snake+0xa>
		}
		if (difficulty == INSANE){
			_delay_ms(40);
		}
	}
}
    1b20:	cf 91       	pop	r28
    1b22:	08 95       	ret

00001b24 <SPI_MasterInit>:
    1b24:	bd 9a       	sbi	0x17, 5	; 23
    1b26:	bf 9a       	sbi	0x17, 7	; 23
    1b28:	bc 9a       	sbi	0x17, 4	; 23
    1b2a:	be 98       	cbi	0x17, 6	; 23
    1b2c:	81 e5       	ldi	r24, 0x51	; 81
    1b2e:	8d b9       	out	0x0d, r24	; 13
    1b30:	c4 9a       	sbi	0x18, 4	; 24
    1b32:	08 95       	ret

00001b34 <SPI_MasterTransmit>:
    1b34:	8f b9       	out	0x0f, r24	; 15
    1b36:	77 9b       	sbis	0x0e, 7	; 14
    1b38:	fe cf       	rjmp	.-4      	; 0x1b36 <SPI_MasterTransmit+0x2>
    1b3a:	08 95       	ret

00001b3c <SPI_MasterRecieve>:
    1b3c:	1f b8       	out	0x0f, r1	; 15
    1b3e:	77 9b       	sbis	0x0e, 7	; 14
    1b40:	fe cf       	rjmp	.-4      	; 0x1b3e <SPI_MasterRecieve+0x2>
    1b42:	8f b1       	in	r24, 0x0f	; 15
    1b44:	08 95       	ret

00001b46 <SPI_slave_on>:
    1b46:	c4 98       	cbi	0x18, 4	; 24
    1b48:	08 95       	ret

00001b4a <SPI_slave_off>:
    1b4a:	c4 9a       	sbi	0x18, 4	; 24
    1b4c:	08 95       	ret

00001b4e <SRAM_test>:
    1b4e:	ef 92       	push	r14
    1b50:	ff 92       	push	r15
    1b52:	0f 93       	push	r16
    1b54:	1f 93       	push	r17
    1b56:	cf 93       	push	r28
    1b58:	df 93       	push	r29
    1b5a:	86 ea       	ldi	r24, 0xA6	; 166
    1b5c:	92 e0       	ldi	r25, 0x02	; 2
    1b5e:	0e 94 90 12 	call	0x2520	; 0x2520 <puts>
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	0e 94 26 12 	call	0x244c	; 0x244c <srand>
    1b6a:	c0 e0       	ldi	r28, 0x00	; 0
    1b6c:	d8 e1       	ldi	r29, 0x18	; 24
    1b6e:	00 e0       	ldi	r16, 0x00	; 0
    1b70:	10 e0       	ldi	r17, 0x00	; 0
    1b72:	0e 94 21 12 	call	0x2442	; 0x2442 <rand>
    1b76:	88 83       	st	Y, r24
    1b78:	98 81       	ld	r25, Y
    1b7a:	98 17       	cp	r25, r24
    1b7c:	11 f0       	breq	.+4      	; 0x1b82 <SRAM_test+0x34>
    1b7e:	0f 5f       	subi	r16, 0xFF	; 255
    1b80:	1f 4f       	sbci	r17, 0xFF	; 255
    1b82:	21 96       	adiw	r28, 0x01	; 1
    1b84:	c1 15       	cp	r28, r1
    1b86:	80 e2       	ldi	r24, 0x20	; 32
    1b88:	d8 07       	cpc	r29, r24
    1b8a:	99 f7       	brne	.-26     	; 0x1b72 <SRAM_test+0x24>
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	0e 94 26 12 	call	0x244c	; 0x244c <srand>
    1b94:	c0 e0       	ldi	r28, 0x00	; 0
    1b96:	d8 e1       	ldi	r29, 0x18	; 24
    1b98:	e1 2c       	mov	r14, r1
    1b9a:	f1 2c       	mov	r15, r1
    1b9c:	0e 94 21 12 	call	0x2442	; 0x2442 <rand>
    1ba0:	98 81       	ld	r25, Y
    1ba2:	98 17       	cp	r25, r24
    1ba4:	19 f0       	breq	.+6      	; 0x1bac <SRAM_test+0x5e>
    1ba6:	8f ef       	ldi	r24, 0xFF	; 255
    1ba8:	e8 1a       	sub	r14, r24
    1baa:	f8 0a       	sbc	r15, r24
    1bac:	21 96       	adiw	r28, 0x01	; 1
    1bae:	c1 15       	cp	r28, r1
    1bb0:	80 e2       	ldi	r24, 0x20	; 32
    1bb2:	d8 07       	cpc	r29, r24
    1bb4:	99 f7       	brne	.-26     	; 0x1b9c <SRAM_test+0x4e>
    1bb6:	ff 92       	push	r15
    1bb8:	ef 92       	push	r14
    1bba:	1f 93       	push	r17
    1bbc:	0f 93       	push	r16
    1bbe:	8c eb       	ldi	r24, 0xBC	; 188
    1bc0:	92 e0       	ldi	r25, 0x02	; 2
    1bc2:	9f 93       	push	r25
    1bc4:	8f 93       	push	r24
    1bc6:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <printf>
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	1f 91       	pop	r17
    1bdc:	0f 91       	pop	r16
    1bde:	ff 90       	pop	r15
    1be0:	ef 90       	pop	r14
    1be2:	08 95       	ret

00001be4 <uart_send>:
    1be4:	5d 9b       	sbis	0x0b, 5	; 11
    1be6:	fe cf       	rjmp	.-4      	; 0x1be4 <uart_send>
    1be8:	8c b9       	out	0x0c, r24	; 12
    1bea:	08 95       	ret

00001bec <uart_init>:
    1bec:	10 bc       	out	0x20, r1	; 32
    1bee:	8f e1       	ldi	r24, 0x1F	; 31
    1bf0:	89 b9       	out	0x09, r24	; 9
    1bf2:	88 e1       	ldi	r24, 0x18	; 24
    1bf4:	8a b9       	out	0x0a, r24	; 10
    1bf6:	86 e8       	ldi	r24, 0x86	; 134
    1bf8:	80 bd       	out	0x20, r24	; 32
    1bfa:	60 e0       	ldi	r22, 0x00	; 0
    1bfc:	70 e0       	ldi	r23, 0x00	; 0
    1bfe:	82 ef       	ldi	r24, 0xF2	; 242
    1c00:	9d e0       	ldi	r25, 0x0D	; 13
    1c02:	0e 94 31 12 	call	0x2462	; 0x2462 <fdevopen>
    1c06:	08 95       	ret

00001c08 <__subsf3>:
    1c08:	50 58       	subi	r21, 0x80	; 128

00001c0a <__addsf3>:
    1c0a:	bb 27       	eor	r27, r27
    1c0c:	aa 27       	eor	r26, r26
    1c0e:	0e d0       	rcall	.+28     	; 0x1c2c <__addsf3x>
    1c10:	fa c1       	rjmp	.+1012   	; 0x2006 <__fp_round>
    1c12:	eb d1       	rcall	.+982    	; 0x1fea <__fp_pscA>
    1c14:	30 f0       	brcs	.+12     	; 0x1c22 <__addsf3+0x18>
    1c16:	f0 d1       	rcall	.+992    	; 0x1ff8 <__fp_pscB>
    1c18:	20 f0       	brcs	.+8      	; 0x1c22 <__addsf3+0x18>
    1c1a:	31 f4       	brne	.+12     	; 0x1c28 <__addsf3+0x1e>
    1c1c:	9f 3f       	cpi	r25, 0xFF	; 255
    1c1e:	11 f4       	brne	.+4      	; 0x1c24 <__addsf3+0x1a>
    1c20:	1e f4       	brtc	.+6      	; 0x1c28 <__addsf3+0x1e>
    1c22:	bb c1       	rjmp	.+886    	; 0x1f9a <__fp_nan>
    1c24:	0e f4       	brtc	.+2      	; 0x1c28 <__addsf3+0x1e>
    1c26:	e0 95       	com	r30
    1c28:	e7 fb       	bst	r30, 7
    1c2a:	b1 c1       	rjmp	.+866    	; 0x1f8e <__fp_inf>

00001c2c <__addsf3x>:
    1c2c:	e9 2f       	mov	r30, r25
    1c2e:	fc d1       	rcall	.+1016   	; 0x2028 <__fp_split3>
    1c30:	80 f3       	brcs	.-32     	; 0x1c12 <__addsf3+0x8>
    1c32:	ba 17       	cp	r27, r26
    1c34:	62 07       	cpc	r22, r18
    1c36:	73 07       	cpc	r23, r19
    1c38:	84 07       	cpc	r24, r20
    1c3a:	95 07       	cpc	r25, r21
    1c3c:	18 f0       	brcs	.+6      	; 0x1c44 <__addsf3x+0x18>
    1c3e:	71 f4       	brne	.+28     	; 0x1c5c <__addsf3x+0x30>
    1c40:	9e f5       	brtc	.+102    	; 0x1ca8 <__addsf3x+0x7c>
    1c42:	14 c2       	rjmp	.+1064   	; 0x206c <__fp_zero>
    1c44:	0e f4       	brtc	.+2      	; 0x1c48 <__addsf3x+0x1c>
    1c46:	e0 95       	com	r30
    1c48:	0b 2e       	mov	r0, r27
    1c4a:	ba 2f       	mov	r27, r26
    1c4c:	a0 2d       	mov	r26, r0
    1c4e:	0b 01       	movw	r0, r22
    1c50:	b9 01       	movw	r22, r18
    1c52:	90 01       	movw	r18, r0
    1c54:	0c 01       	movw	r0, r24
    1c56:	ca 01       	movw	r24, r20
    1c58:	a0 01       	movw	r20, r0
    1c5a:	11 24       	eor	r1, r1
    1c5c:	ff 27       	eor	r31, r31
    1c5e:	59 1b       	sub	r21, r25
    1c60:	99 f0       	breq	.+38     	; 0x1c88 <__addsf3x+0x5c>
    1c62:	59 3f       	cpi	r21, 0xF9	; 249
    1c64:	50 f4       	brcc	.+20     	; 0x1c7a <__addsf3x+0x4e>
    1c66:	50 3e       	cpi	r21, 0xE0	; 224
    1c68:	68 f1       	brcs	.+90     	; 0x1cc4 <__addsf3x+0x98>
    1c6a:	1a 16       	cp	r1, r26
    1c6c:	f0 40       	sbci	r31, 0x00	; 0
    1c6e:	a2 2f       	mov	r26, r18
    1c70:	23 2f       	mov	r18, r19
    1c72:	34 2f       	mov	r19, r20
    1c74:	44 27       	eor	r20, r20
    1c76:	58 5f       	subi	r21, 0xF8	; 248
    1c78:	f3 cf       	rjmp	.-26     	; 0x1c60 <__addsf3x+0x34>
    1c7a:	46 95       	lsr	r20
    1c7c:	37 95       	ror	r19
    1c7e:	27 95       	ror	r18
    1c80:	a7 95       	ror	r26
    1c82:	f0 40       	sbci	r31, 0x00	; 0
    1c84:	53 95       	inc	r21
    1c86:	c9 f7       	brne	.-14     	; 0x1c7a <__addsf3x+0x4e>
    1c88:	7e f4       	brtc	.+30     	; 0x1ca8 <__addsf3x+0x7c>
    1c8a:	1f 16       	cp	r1, r31
    1c8c:	ba 0b       	sbc	r27, r26
    1c8e:	62 0b       	sbc	r22, r18
    1c90:	73 0b       	sbc	r23, r19
    1c92:	84 0b       	sbc	r24, r20
    1c94:	ba f0       	brmi	.+46     	; 0x1cc4 <__addsf3x+0x98>
    1c96:	91 50       	subi	r25, 0x01	; 1
    1c98:	a1 f0       	breq	.+40     	; 0x1cc2 <__addsf3x+0x96>
    1c9a:	ff 0f       	add	r31, r31
    1c9c:	bb 1f       	adc	r27, r27
    1c9e:	66 1f       	adc	r22, r22
    1ca0:	77 1f       	adc	r23, r23
    1ca2:	88 1f       	adc	r24, r24
    1ca4:	c2 f7       	brpl	.-16     	; 0x1c96 <__addsf3x+0x6a>
    1ca6:	0e c0       	rjmp	.+28     	; 0x1cc4 <__addsf3x+0x98>
    1ca8:	ba 0f       	add	r27, r26
    1caa:	62 1f       	adc	r22, r18
    1cac:	73 1f       	adc	r23, r19
    1cae:	84 1f       	adc	r24, r20
    1cb0:	48 f4       	brcc	.+18     	; 0x1cc4 <__addsf3x+0x98>
    1cb2:	87 95       	ror	r24
    1cb4:	77 95       	ror	r23
    1cb6:	67 95       	ror	r22
    1cb8:	b7 95       	ror	r27
    1cba:	f7 95       	ror	r31
    1cbc:	9e 3f       	cpi	r25, 0xFE	; 254
    1cbe:	08 f0       	brcs	.+2      	; 0x1cc2 <__addsf3x+0x96>
    1cc0:	b3 cf       	rjmp	.-154    	; 0x1c28 <__addsf3+0x1e>
    1cc2:	93 95       	inc	r25
    1cc4:	88 0f       	add	r24, r24
    1cc6:	08 f0       	brcs	.+2      	; 0x1cca <__addsf3x+0x9e>
    1cc8:	99 27       	eor	r25, r25
    1cca:	ee 0f       	add	r30, r30
    1ccc:	97 95       	ror	r25
    1cce:	87 95       	ror	r24
    1cd0:	08 95       	ret
    1cd2:	8b d1       	rcall	.+790    	; 0x1fea <__fp_pscA>
    1cd4:	58 f0       	brcs	.+22     	; 0x1cec <__addsf3x+0xc0>
    1cd6:	80 e8       	ldi	r24, 0x80	; 128
    1cd8:	91 e0       	ldi	r25, 0x01	; 1
    1cda:	09 f4       	brne	.+2      	; 0x1cde <__addsf3x+0xb2>
    1cdc:	9e ef       	ldi	r25, 0xFE	; 254
    1cde:	8c d1       	rcall	.+792    	; 0x1ff8 <__fp_pscB>
    1ce0:	28 f0       	brcs	.+10     	; 0x1cec <__addsf3x+0xc0>
    1ce2:	40 e8       	ldi	r20, 0x80	; 128
    1ce4:	51 e0       	ldi	r21, 0x01	; 1
    1ce6:	59 f4       	brne	.+22     	; 0x1cfe <atan2+0xe>
    1ce8:	5e ef       	ldi	r21, 0xFE	; 254
    1cea:	09 c0       	rjmp	.+18     	; 0x1cfe <atan2+0xe>
    1cec:	56 c1       	rjmp	.+684    	; 0x1f9a <__fp_nan>
    1cee:	be c1       	rjmp	.+892    	; 0x206c <__fp_zero>

00001cf0 <atan2>:
    1cf0:	e9 2f       	mov	r30, r25
    1cf2:	e0 78       	andi	r30, 0x80	; 128
    1cf4:	99 d1       	rcall	.+818    	; 0x2028 <__fp_split3>
    1cf6:	68 f3       	brcs	.-38     	; 0x1cd2 <__addsf3x+0xa6>
    1cf8:	09 2e       	mov	r0, r25
    1cfa:	05 2a       	or	r0, r21
    1cfc:	c1 f3       	breq	.-16     	; 0x1cee <__addsf3x+0xc2>
    1cfe:	26 17       	cp	r18, r22
    1d00:	37 07       	cpc	r19, r23
    1d02:	48 07       	cpc	r20, r24
    1d04:	59 07       	cpc	r21, r25
    1d06:	38 f0       	brcs	.+14     	; 0x1d16 <atan2+0x26>
    1d08:	0e 2e       	mov	r0, r30
    1d0a:	07 f8       	bld	r0, 7
    1d0c:	e0 25       	eor	r30, r0
    1d0e:	69 f0       	breq	.+26     	; 0x1d2a <atan2+0x3a>
    1d10:	e0 25       	eor	r30, r0
    1d12:	e0 64       	ori	r30, 0x40	; 64
    1d14:	0a c0       	rjmp	.+20     	; 0x1d2a <atan2+0x3a>
    1d16:	ef 63       	ori	r30, 0x3F	; 63
    1d18:	07 f8       	bld	r0, 7
    1d1a:	00 94       	com	r0
    1d1c:	07 fa       	bst	r0, 7
    1d1e:	db 01       	movw	r26, r22
    1d20:	b9 01       	movw	r22, r18
    1d22:	9d 01       	movw	r18, r26
    1d24:	dc 01       	movw	r26, r24
    1d26:	ca 01       	movw	r24, r20
    1d28:	ad 01       	movw	r20, r26
    1d2a:	ef 93       	push	r30
    1d2c:	45 d0       	rcall	.+138    	; 0x1db8 <__divsf3_pse>
    1d2e:	6b d1       	rcall	.+726    	; 0x2006 <__fp_round>
    1d30:	0a d0       	rcall	.+20     	; 0x1d46 <atan>
    1d32:	5f 91       	pop	r21
    1d34:	55 23       	and	r21, r21
    1d36:	31 f0       	breq	.+12     	; 0x1d44 <atan2+0x54>
    1d38:	2b ed       	ldi	r18, 0xDB	; 219
    1d3a:	3f e0       	ldi	r19, 0x0F	; 15
    1d3c:	49 e4       	ldi	r20, 0x49	; 73
    1d3e:	50 fd       	sbrc	r21, 0
    1d40:	49 ec       	ldi	r20, 0xC9	; 201
    1d42:	63 cf       	rjmp	.-314    	; 0x1c0a <__addsf3>
    1d44:	08 95       	ret

00001d46 <atan>:
    1d46:	df 93       	push	r29
    1d48:	dd 27       	eor	r29, r29
    1d4a:	b9 2f       	mov	r27, r25
    1d4c:	bf 77       	andi	r27, 0x7F	; 127
    1d4e:	40 e8       	ldi	r20, 0x80	; 128
    1d50:	5f e3       	ldi	r21, 0x3F	; 63
    1d52:	16 16       	cp	r1, r22
    1d54:	17 06       	cpc	r1, r23
    1d56:	48 07       	cpc	r20, r24
    1d58:	5b 07       	cpc	r21, r27
    1d5a:	10 f4       	brcc	.+4      	; 0x1d60 <atan+0x1a>
    1d5c:	d9 2f       	mov	r29, r25
    1d5e:	8d d1       	rcall	.+794    	; 0x207a <inverse>
    1d60:	9f 93       	push	r25
    1d62:	8f 93       	push	r24
    1d64:	7f 93       	push	r23
    1d66:	6f 93       	push	r22
    1d68:	f2 d1       	rcall	.+996    	; 0x214e <square>
    1d6a:	e0 e7       	ldi	r30, 0x70	; 112
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	18 d1       	rcall	.+560    	; 0x1fa0 <__fp_powser>
    1d70:	4a d1       	rcall	.+660    	; 0x2006 <__fp_round>
    1d72:	2f 91       	pop	r18
    1d74:	3f 91       	pop	r19
    1d76:	4f 91       	pop	r20
    1d78:	5f 91       	pop	r21
    1d7a:	92 d1       	rcall	.+804    	; 0x20a0 <__mulsf3x>
    1d7c:	dd 23       	and	r29, r29
    1d7e:	49 f0       	breq	.+18     	; 0x1d92 <atan+0x4c>
    1d80:	90 58       	subi	r25, 0x80	; 128
    1d82:	a2 ea       	ldi	r26, 0xA2	; 162
    1d84:	2a ed       	ldi	r18, 0xDA	; 218
    1d86:	3f e0       	ldi	r19, 0x0F	; 15
    1d88:	49 ec       	ldi	r20, 0xC9	; 201
    1d8a:	5f e3       	ldi	r21, 0x3F	; 63
    1d8c:	d0 78       	andi	r29, 0x80	; 128
    1d8e:	5d 27       	eor	r21, r29
    1d90:	4d df       	rcall	.-358    	; 0x1c2c <__addsf3x>
    1d92:	df 91       	pop	r29
    1d94:	38 c1       	rjmp	.+624    	; 0x2006 <__fp_round>

00001d96 <__cmpsf2>:
    1d96:	d7 d0       	rcall	.+430    	; 0x1f46 <__fp_cmp>
    1d98:	08 f4       	brcc	.+2      	; 0x1d9c <__cmpsf2+0x6>
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	08 95       	ret
    1d9e:	2c d1       	rcall	.+600    	; 0x1ff8 <__fp_pscB>
    1da0:	40 f0       	brcs	.+16     	; 0x1db2 <__cmpsf2+0x1c>
    1da2:	23 d1       	rcall	.+582    	; 0x1fea <__fp_pscA>
    1da4:	30 f0       	brcs	.+12     	; 0x1db2 <__cmpsf2+0x1c>
    1da6:	21 f4       	brne	.+8      	; 0x1db0 <__cmpsf2+0x1a>
    1da8:	5f 3f       	cpi	r21, 0xFF	; 255
    1daa:	19 f0       	breq	.+6      	; 0x1db2 <__cmpsf2+0x1c>
    1dac:	f0 c0       	rjmp	.+480    	; 0x1f8e <__fp_inf>
    1dae:	51 11       	cpse	r21, r1
    1db0:	5e c1       	rjmp	.+700    	; 0x206e <__fp_szero>
    1db2:	f3 c0       	rjmp	.+486    	; 0x1f9a <__fp_nan>

00001db4 <__divsf3x>:
    1db4:	39 d1       	rcall	.+626    	; 0x2028 <__fp_split3>
    1db6:	98 f3       	brcs	.-26     	; 0x1d9e <__cmpsf2+0x8>

00001db8 <__divsf3_pse>:
    1db8:	99 23       	and	r25, r25
    1dba:	c9 f3       	breq	.-14     	; 0x1dae <__cmpsf2+0x18>
    1dbc:	55 23       	and	r21, r21
    1dbe:	b1 f3       	breq	.-20     	; 0x1dac <__cmpsf2+0x16>
    1dc0:	95 1b       	sub	r25, r21
    1dc2:	55 0b       	sbc	r21, r21
    1dc4:	bb 27       	eor	r27, r27
    1dc6:	aa 27       	eor	r26, r26
    1dc8:	62 17       	cp	r22, r18
    1dca:	73 07       	cpc	r23, r19
    1dcc:	84 07       	cpc	r24, r20
    1dce:	38 f0       	brcs	.+14     	; 0x1dde <__divsf3_pse+0x26>
    1dd0:	9f 5f       	subi	r25, 0xFF	; 255
    1dd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd4:	22 0f       	add	r18, r18
    1dd6:	33 1f       	adc	r19, r19
    1dd8:	44 1f       	adc	r20, r20
    1dda:	aa 1f       	adc	r26, r26
    1ddc:	a9 f3       	breq	.-22     	; 0x1dc8 <__divsf3_pse+0x10>
    1dde:	33 d0       	rcall	.+102    	; 0x1e46 <__divsf3_pse+0x8e>
    1de0:	0e 2e       	mov	r0, r30
    1de2:	3a f0       	brmi	.+14     	; 0x1df2 <__divsf3_pse+0x3a>
    1de4:	e0 e8       	ldi	r30, 0x80	; 128
    1de6:	30 d0       	rcall	.+96     	; 0x1e48 <__divsf3_pse+0x90>
    1de8:	91 50       	subi	r25, 0x01	; 1
    1dea:	50 40       	sbci	r21, 0x00	; 0
    1dec:	e6 95       	lsr	r30
    1dee:	00 1c       	adc	r0, r0
    1df0:	ca f7       	brpl	.-14     	; 0x1de4 <__divsf3_pse+0x2c>
    1df2:	29 d0       	rcall	.+82     	; 0x1e46 <__divsf3_pse+0x8e>
    1df4:	fe 2f       	mov	r31, r30
    1df6:	27 d0       	rcall	.+78     	; 0x1e46 <__divsf3_pse+0x8e>
    1df8:	66 0f       	add	r22, r22
    1dfa:	77 1f       	adc	r23, r23
    1dfc:	88 1f       	adc	r24, r24
    1dfe:	bb 1f       	adc	r27, r27
    1e00:	26 17       	cp	r18, r22
    1e02:	37 07       	cpc	r19, r23
    1e04:	48 07       	cpc	r20, r24
    1e06:	ab 07       	cpc	r26, r27
    1e08:	b0 e8       	ldi	r27, 0x80	; 128
    1e0a:	09 f0       	breq	.+2      	; 0x1e0e <__divsf3_pse+0x56>
    1e0c:	bb 0b       	sbc	r27, r27
    1e0e:	80 2d       	mov	r24, r0
    1e10:	bf 01       	movw	r22, r30
    1e12:	ff 27       	eor	r31, r31
    1e14:	93 58       	subi	r25, 0x83	; 131
    1e16:	5f 4f       	sbci	r21, 0xFF	; 255
    1e18:	2a f0       	brmi	.+10     	; 0x1e24 <__divsf3_pse+0x6c>
    1e1a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e1c:	51 05       	cpc	r21, r1
    1e1e:	68 f0       	brcs	.+26     	; 0x1e3a <__divsf3_pse+0x82>
    1e20:	b6 c0       	rjmp	.+364    	; 0x1f8e <__fp_inf>
    1e22:	25 c1       	rjmp	.+586    	; 0x206e <__fp_szero>
    1e24:	5f 3f       	cpi	r21, 0xFF	; 255
    1e26:	ec f3       	brlt	.-6      	; 0x1e22 <__divsf3_pse+0x6a>
    1e28:	98 3e       	cpi	r25, 0xE8	; 232
    1e2a:	dc f3       	brlt	.-10     	; 0x1e22 <__divsf3_pse+0x6a>
    1e2c:	86 95       	lsr	r24
    1e2e:	77 95       	ror	r23
    1e30:	67 95       	ror	r22
    1e32:	b7 95       	ror	r27
    1e34:	f7 95       	ror	r31
    1e36:	9f 5f       	subi	r25, 0xFF	; 255
    1e38:	c9 f7       	brne	.-14     	; 0x1e2c <__divsf3_pse+0x74>
    1e3a:	88 0f       	add	r24, r24
    1e3c:	91 1d       	adc	r25, r1
    1e3e:	96 95       	lsr	r25
    1e40:	87 95       	ror	r24
    1e42:	97 f9       	bld	r25, 7
    1e44:	08 95       	ret
    1e46:	e1 e0       	ldi	r30, 0x01	; 1
    1e48:	66 0f       	add	r22, r22
    1e4a:	77 1f       	adc	r23, r23
    1e4c:	88 1f       	adc	r24, r24
    1e4e:	bb 1f       	adc	r27, r27
    1e50:	62 17       	cp	r22, r18
    1e52:	73 07       	cpc	r23, r19
    1e54:	84 07       	cpc	r24, r20
    1e56:	ba 07       	cpc	r27, r26
    1e58:	20 f0       	brcs	.+8      	; 0x1e62 <__divsf3_pse+0xaa>
    1e5a:	62 1b       	sub	r22, r18
    1e5c:	73 0b       	sbc	r23, r19
    1e5e:	84 0b       	sbc	r24, r20
    1e60:	ba 0b       	sbc	r27, r26
    1e62:	ee 1f       	adc	r30, r30
    1e64:	88 f7       	brcc	.-30     	; 0x1e48 <__divsf3_pse+0x90>
    1e66:	e0 95       	com	r30
    1e68:	08 95       	ret

00001e6a <__fixsfsi>:
    1e6a:	04 d0       	rcall	.+8      	; 0x1e74 <__fixunssfsi>
    1e6c:	68 94       	set
    1e6e:	b1 11       	cpse	r27, r1
    1e70:	fe c0       	rjmp	.+508    	; 0x206e <__fp_szero>
    1e72:	08 95       	ret

00001e74 <__fixunssfsi>:
    1e74:	e1 d0       	rcall	.+450    	; 0x2038 <__fp_splitA>
    1e76:	88 f0       	brcs	.+34     	; 0x1e9a <__fixunssfsi+0x26>
    1e78:	9f 57       	subi	r25, 0x7F	; 127
    1e7a:	90 f0       	brcs	.+36     	; 0x1ea0 <__fixunssfsi+0x2c>
    1e7c:	b9 2f       	mov	r27, r25
    1e7e:	99 27       	eor	r25, r25
    1e80:	b7 51       	subi	r27, 0x17	; 23
    1e82:	a0 f0       	brcs	.+40     	; 0x1eac <__fixunssfsi+0x38>
    1e84:	d1 f0       	breq	.+52     	; 0x1eba <__fixunssfsi+0x46>
    1e86:	66 0f       	add	r22, r22
    1e88:	77 1f       	adc	r23, r23
    1e8a:	88 1f       	adc	r24, r24
    1e8c:	99 1f       	adc	r25, r25
    1e8e:	1a f0       	brmi	.+6      	; 0x1e96 <__fixunssfsi+0x22>
    1e90:	ba 95       	dec	r27
    1e92:	c9 f7       	brne	.-14     	; 0x1e86 <__fixunssfsi+0x12>
    1e94:	12 c0       	rjmp	.+36     	; 0x1eba <__fixunssfsi+0x46>
    1e96:	b1 30       	cpi	r27, 0x01	; 1
    1e98:	81 f0       	breq	.+32     	; 0x1eba <__fixunssfsi+0x46>
    1e9a:	e8 d0       	rcall	.+464    	; 0x206c <__fp_zero>
    1e9c:	b1 e0       	ldi	r27, 0x01	; 1
    1e9e:	08 95       	ret
    1ea0:	e5 c0       	rjmp	.+458    	; 0x206c <__fp_zero>
    1ea2:	67 2f       	mov	r22, r23
    1ea4:	78 2f       	mov	r23, r24
    1ea6:	88 27       	eor	r24, r24
    1ea8:	b8 5f       	subi	r27, 0xF8	; 248
    1eaa:	39 f0       	breq	.+14     	; 0x1eba <__fixunssfsi+0x46>
    1eac:	b9 3f       	cpi	r27, 0xF9	; 249
    1eae:	cc f3       	brlt	.-14     	; 0x1ea2 <__fixunssfsi+0x2e>
    1eb0:	86 95       	lsr	r24
    1eb2:	77 95       	ror	r23
    1eb4:	67 95       	ror	r22
    1eb6:	b3 95       	inc	r27
    1eb8:	d9 f7       	brne	.-10     	; 0x1eb0 <__fixunssfsi+0x3c>
    1eba:	3e f4       	brtc	.+14     	; 0x1eca <__fixunssfsi+0x56>
    1ebc:	90 95       	com	r25
    1ebe:	80 95       	com	r24
    1ec0:	70 95       	com	r23
    1ec2:	61 95       	neg	r22
    1ec4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eca:	08 95       	ret

00001ecc <__floatunsisf>:
    1ecc:	e8 94       	clt
    1ece:	09 c0       	rjmp	.+18     	; 0x1ee2 <__floatsisf+0x12>

00001ed0 <__floatsisf>:
    1ed0:	97 fb       	bst	r25, 7
    1ed2:	3e f4       	brtc	.+14     	; 0x1ee2 <__floatsisf+0x12>
    1ed4:	90 95       	com	r25
    1ed6:	80 95       	com	r24
    1ed8:	70 95       	com	r23
    1eda:	61 95       	neg	r22
    1edc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ede:	8f 4f       	sbci	r24, 0xFF	; 255
    1ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee2:	99 23       	and	r25, r25
    1ee4:	a9 f0       	breq	.+42     	; 0x1f10 <__floatsisf+0x40>
    1ee6:	f9 2f       	mov	r31, r25
    1ee8:	96 e9       	ldi	r25, 0x96	; 150
    1eea:	bb 27       	eor	r27, r27
    1eec:	93 95       	inc	r25
    1eee:	f6 95       	lsr	r31
    1ef0:	87 95       	ror	r24
    1ef2:	77 95       	ror	r23
    1ef4:	67 95       	ror	r22
    1ef6:	b7 95       	ror	r27
    1ef8:	f1 11       	cpse	r31, r1
    1efa:	f8 cf       	rjmp	.-16     	; 0x1eec <__floatsisf+0x1c>
    1efc:	fa f4       	brpl	.+62     	; 0x1f3c <__floatsisf+0x6c>
    1efe:	bb 0f       	add	r27, r27
    1f00:	11 f4       	brne	.+4      	; 0x1f06 <__floatsisf+0x36>
    1f02:	60 ff       	sbrs	r22, 0
    1f04:	1b c0       	rjmp	.+54     	; 0x1f3c <__floatsisf+0x6c>
    1f06:	6f 5f       	subi	r22, 0xFF	; 255
    1f08:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0e:	16 c0       	rjmp	.+44     	; 0x1f3c <__floatsisf+0x6c>
    1f10:	88 23       	and	r24, r24
    1f12:	11 f0       	breq	.+4      	; 0x1f18 <__floatsisf+0x48>
    1f14:	96 e9       	ldi	r25, 0x96	; 150
    1f16:	11 c0       	rjmp	.+34     	; 0x1f3a <__floatsisf+0x6a>
    1f18:	77 23       	and	r23, r23
    1f1a:	21 f0       	breq	.+8      	; 0x1f24 <__floatsisf+0x54>
    1f1c:	9e e8       	ldi	r25, 0x8E	; 142
    1f1e:	87 2f       	mov	r24, r23
    1f20:	76 2f       	mov	r23, r22
    1f22:	05 c0       	rjmp	.+10     	; 0x1f2e <__floatsisf+0x5e>
    1f24:	66 23       	and	r22, r22
    1f26:	71 f0       	breq	.+28     	; 0x1f44 <__floatsisf+0x74>
    1f28:	96 e8       	ldi	r25, 0x86	; 134
    1f2a:	86 2f       	mov	r24, r22
    1f2c:	70 e0       	ldi	r23, 0x00	; 0
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	2a f0       	brmi	.+10     	; 0x1f3c <__floatsisf+0x6c>
    1f32:	9a 95       	dec	r25
    1f34:	66 0f       	add	r22, r22
    1f36:	77 1f       	adc	r23, r23
    1f38:	88 1f       	adc	r24, r24
    1f3a:	da f7       	brpl	.-10     	; 0x1f32 <__floatsisf+0x62>
    1f3c:	88 0f       	add	r24, r24
    1f3e:	96 95       	lsr	r25
    1f40:	87 95       	ror	r24
    1f42:	97 f9       	bld	r25, 7
    1f44:	08 95       	ret

00001f46 <__fp_cmp>:
    1f46:	99 0f       	add	r25, r25
    1f48:	00 08       	sbc	r0, r0
    1f4a:	55 0f       	add	r21, r21
    1f4c:	aa 0b       	sbc	r26, r26
    1f4e:	e0 e8       	ldi	r30, 0x80	; 128
    1f50:	fe ef       	ldi	r31, 0xFE	; 254
    1f52:	16 16       	cp	r1, r22
    1f54:	17 06       	cpc	r1, r23
    1f56:	e8 07       	cpc	r30, r24
    1f58:	f9 07       	cpc	r31, r25
    1f5a:	c0 f0       	brcs	.+48     	; 0x1f8c <__fp_cmp+0x46>
    1f5c:	12 16       	cp	r1, r18
    1f5e:	13 06       	cpc	r1, r19
    1f60:	e4 07       	cpc	r30, r20
    1f62:	f5 07       	cpc	r31, r21
    1f64:	98 f0       	brcs	.+38     	; 0x1f8c <__fp_cmp+0x46>
    1f66:	62 1b       	sub	r22, r18
    1f68:	73 0b       	sbc	r23, r19
    1f6a:	84 0b       	sbc	r24, r20
    1f6c:	95 0b       	sbc	r25, r21
    1f6e:	39 f4       	brne	.+14     	; 0x1f7e <__fp_cmp+0x38>
    1f70:	0a 26       	eor	r0, r26
    1f72:	61 f0       	breq	.+24     	; 0x1f8c <__fp_cmp+0x46>
    1f74:	23 2b       	or	r18, r19
    1f76:	24 2b       	or	r18, r20
    1f78:	25 2b       	or	r18, r21
    1f7a:	21 f4       	brne	.+8      	; 0x1f84 <__fp_cmp+0x3e>
    1f7c:	08 95       	ret
    1f7e:	0a 26       	eor	r0, r26
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <__fp_cmp+0x3e>
    1f82:	a1 40       	sbci	r26, 0x01	; 1
    1f84:	a6 95       	lsr	r26
    1f86:	8f ef       	ldi	r24, 0xFF	; 255
    1f88:	81 1d       	adc	r24, r1
    1f8a:	81 1d       	adc	r24, r1
    1f8c:	08 95       	ret

00001f8e <__fp_inf>:
    1f8e:	97 f9       	bld	r25, 7
    1f90:	9f 67       	ori	r25, 0x7F	; 127
    1f92:	80 e8       	ldi	r24, 0x80	; 128
    1f94:	70 e0       	ldi	r23, 0x00	; 0
    1f96:	60 e0       	ldi	r22, 0x00	; 0
    1f98:	08 95       	ret

00001f9a <__fp_nan>:
    1f9a:	9f ef       	ldi	r25, 0xFF	; 255
    1f9c:	80 ec       	ldi	r24, 0xC0	; 192
    1f9e:	08 95       	ret

00001fa0 <__fp_powser>:
    1fa0:	df 93       	push	r29
    1fa2:	cf 93       	push	r28
    1fa4:	1f 93       	push	r17
    1fa6:	0f 93       	push	r16
    1fa8:	ff 92       	push	r15
    1faa:	ef 92       	push	r14
    1fac:	df 92       	push	r13
    1fae:	7b 01       	movw	r14, r22
    1fb0:	8c 01       	movw	r16, r24
    1fb2:	68 94       	set
    1fb4:	05 c0       	rjmp	.+10     	; 0x1fc0 <__fp_powser+0x20>
    1fb6:	da 2e       	mov	r13, r26
    1fb8:	ef 01       	movw	r28, r30
    1fba:	72 d0       	rcall	.+228    	; 0x20a0 <__mulsf3x>
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	e8 94       	clt
    1fc0:	a5 91       	lpm	r26, Z+
    1fc2:	25 91       	lpm	r18, Z+
    1fc4:	35 91       	lpm	r19, Z+
    1fc6:	45 91       	lpm	r20, Z+
    1fc8:	55 91       	lpm	r21, Z+
    1fca:	ae f3       	brts	.-22     	; 0x1fb6 <__fp_powser+0x16>
    1fcc:	ef 01       	movw	r28, r30
    1fce:	2e de       	rcall	.-932    	; 0x1c2c <__addsf3x>
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	97 01       	movw	r18, r14
    1fd4:	a8 01       	movw	r20, r16
    1fd6:	da 94       	dec	r13
    1fd8:	79 f7       	brne	.-34     	; 0x1fb8 <__fp_powser+0x18>
    1fda:	df 90       	pop	r13
    1fdc:	ef 90       	pop	r14
    1fde:	ff 90       	pop	r15
    1fe0:	0f 91       	pop	r16
    1fe2:	1f 91       	pop	r17
    1fe4:	cf 91       	pop	r28
    1fe6:	df 91       	pop	r29
    1fe8:	08 95       	ret

00001fea <__fp_pscA>:
    1fea:	00 24       	eor	r0, r0
    1fec:	0a 94       	dec	r0
    1fee:	16 16       	cp	r1, r22
    1ff0:	17 06       	cpc	r1, r23
    1ff2:	18 06       	cpc	r1, r24
    1ff4:	09 06       	cpc	r0, r25
    1ff6:	08 95       	ret

00001ff8 <__fp_pscB>:
    1ff8:	00 24       	eor	r0, r0
    1ffa:	0a 94       	dec	r0
    1ffc:	12 16       	cp	r1, r18
    1ffe:	13 06       	cpc	r1, r19
    2000:	14 06       	cpc	r1, r20
    2002:	05 06       	cpc	r0, r21
    2004:	08 95       	ret

00002006 <__fp_round>:
    2006:	09 2e       	mov	r0, r25
    2008:	03 94       	inc	r0
    200a:	00 0c       	add	r0, r0
    200c:	11 f4       	brne	.+4      	; 0x2012 <__fp_round+0xc>
    200e:	88 23       	and	r24, r24
    2010:	52 f0       	brmi	.+20     	; 0x2026 <__fp_round+0x20>
    2012:	bb 0f       	add	r27, r27
    2014:	40 f4       	brcc	.+16     	; 0x2026 <__fp_round+0x20>
    2016:	bf 2b       	or	r27, r31
    2018:	11 f4       	brne	.+4      	; 0x201e <__fp_round+0x18>
    201a:	60 ff       	sbrs	r22, 0
    201c:	04 c0       	rjmp	.+8      	; 0x2026 <__fp_round+0x20>
    201e:	6f 5f       	subi	r22, 0xFF	; 255
    2020:	7f 4f       	sbci	r23, 0xFF	; 255
    2022:	8f 4f       	sbci	r24, 0xFF	; 255
    2024:	9f 4f       	sbci	r25, 0xFF	; 255
    2026:	08 95       	ret

00002028 <__fp_split3>:
    2028:	57 fd       	sbrc	r21, 7
    202a:	90 58       	subi	r25, 0x80	; 128
    202c:	44 0f       	add	r20, r20
    202e:	55 1f       	adc	r21, r21
    2030:	59 f0       	breq	.+22     	; 0x2048 <__fp_splitA+0x10>
    2032:	5f 3f       	cpi	r21, 0xFF	; 255
    2034:	71 f0       	breq	.+28     	; 0x2052 <__fp_splitA+0x1a>
    2036:	47 95       	ror	r20

00002038 <__fp_splitA>:
    2038:	88 0f       	add	r24, r24
    203a:	97 fb       	bst	r25, 7
    203c:	99 1f       	adc	r25, r25
    203e:	61 f0       	breq	.+24     	; 0x2058 <__fp_splitA+0x20>
    2040:	9f 3f       	cpi	r25, 0xFF	; 255
    2042:	79 f0       	breq	.+30     	; 0x2062 <__fp_splitA+0x2a>
    2044:	87 95       	ror	r24
    2046:	08 95       	ret
    2048:	12 16       	cp	r1, r18
    204a:	13 06       	cpc	r1, r19
    204c:	14 06       	cpc	r1, r20
    204e:	55 1f       	adc	r21, r21
    2050:	f2 cf       	rjmp	.-28     	; 0x2036 <__fp_split3+0xe>
    2052:	46 95       	lsr	r20
    2054:	f1 df       	rcall	.-30     	; 0x2038 <__fp_splitA>
    2056:	08 c0       	rjmp	.+16     	; 0x2068 <__fp_splitA+0x30>
    2058:	16 16       	cp	r1, r22
    205a:	17 06       	cpc	r1, r23
    205c:	18 06       	cpc	r1, r24
    205e:	99 1f       	adc	r25, r25
    2060:	f1 cf       	rjmp	.-30     	; 0x2044 <__fp_splitA+0xc>
    2062:	86 95       	lsr	r24
    2064:	71 05       	cpc	r23, r1
    2066:	61 05       	cpc	r22, r1
    2068:	08 94       	sec
    206a:	08 95       	ret

0000206c <__fp_zero>:
    206c:	e8 94       	clt

0000206e <__fp_szero>:
    206e:	bb 27       	eor	r27, r27
    2070:	66 27       	eor	r22, r22
    2072:	77 27       	eor	r23, r23
    2074:	cb 01       	movw	r24, r22
    2076:	97 f9       	bld	r25, 7
    2078:	08 95       	ret

0000207a <inverse>:
    207a:	9b 01       	movw	r18, r22
    207c:	ac 01       	movw	r20, r24
    207e:	60 e0       	ldi	r22, 0x00	; 0
    2080:	70 e0       	ldi	r23, 0x00	; 0
    2082:	80 e8       	ldi	r24, 0x80	; 128
    2084:	9f e3       	ldi	r25, 0x3F	; 63
    2086:	66 c0       	rjmp	.+204    	; 0x2154 <__divsf3>

00002088 <__mulsf3>:
    2088:	0b d0       	rcall	.+22     	; 0x20a0 <__mulsf3x>
    208a:	bd cf       	rjmp	.-134    	; 0x2006 <__fp_round>
    208c:	ae df       	rcall	.-164    	; 0x1fea <__fp_pscA>
    208e:	28 f0       	brcs	.+10     	; 0x209a <__mulsf3+0x12>
    2090:	b3 df       	rcall	.-154    	; 0x1ff8 <__fp_pscB>
    2092:	18 f0       	brcs	.+6      	; 0x209a <__mulsf3+0x12>
    2094:	95 23       	and	r25, r21
    2096:	09 f0       	breq	.+2      	; 0x209a <__mulsf3+0x12>
    2098:	7a cf       	rjmp	.-268    	; 0x1f8e <__fp_inf>
    209a:	7f cf       	rjmp	.-258    	; 0x1f9a <__fp_nan>
    209c:	11 24       	eor	r1, r1
    209e:	e7 cf       	rjmp	.-50     	; 0x206e <__fp_szero>

000020a0 <__mulsf3x>:
    20a0:	c3 df       	rcall	.-122    	; 0x2028 <__fp_split3>
    20a2:	a0 f3       	brcs	.-24     	; 0x208c <__mulsf3+0x4>

000020a4 <__mulsf3_pse>:
    20a4:	95 9f       	mul	r25, r21
    20a6:	d1 f3       	breq	.-12     	; 0x209c <__mulsf3+0x14>
    20a8:	95 0f       	add	r25, r21
    20aa:	50 e0       	ldi	r21, 0x00	; 0
    20ac:	55 1f       	adc	r21, r21
    20ae:	62 9f       	mul	r22, r18
    20b0:	f0 01       	movw	r30, r0
    20b2:	72 9f       	mul	r23, r18
    20b4:	bb 27       	eor	r27, r27
    20b6:	f0 0d       	add	r31, r0
    20b8:	b1 1d       	adc	r27, r1
    20ba:	63 9f       	mul	r22, r19
    20bc:	aa 27       	eor	r26, r26
    20be:	f0 0d       	add	r31, r0
    20c0:	b1 1d       	adc	r27, r1
    20c2:	aa 1f       	adc	r26, r26
    20c4:	64 9f       	mul	r22, r20
    20c6:	66 27       	eor	r22, r22
    20c8:	b0 0d       	add	r27, r0
    20ca:	a1 1d       	adc	r26, r1
    20cc:	66 1f       	adc	r22, r22
    20ce:	82 9f       	mul	r24, r18
    20d0:	22 27       	eor	r18, r18
    20d2:	b0 0d       	add	r27, r0
    20d4:	a1 1d       	adc	r26, r1
    20d6:	62 1f       	adc	r22, r18
    20d8:	73 9f       	mul	r23, r19
    20da:	b0 0d       	add	r27, r0
    20dc:	a1 1d       	adc	r26, r1
    20de:	62 1f       	adc	r22, r18
    20e0:	83 9f       	mul	r24, r19
    20e2:	a0 0d       	add	r26, r0
    20e4:	61 1d       	adc	r22, r1
    20e6:	22 1f       	adc	r18, r18
    20e8:	74 9f       	mul	r23, r20
    20ea:	33 27       	eor	r19, r19
    20ec:	a0 0d       	add	r26, r0
    20ee:	61 1d       	adc	r22, r1
    20f0:	23 1f       	adc	r18, r19
    20f2:	84 9f       	mul	r24, r20
    20f4:	60 0d       	add	r22, r0
    20f6:	21 1d       	adc	r18, r1
    20f8:	82 2f       	mov	r24, r18
    20fa:	76 2f       	mov	r23, r22
    20fc:	6a 2f       	mov	r22, r26
    20fe:	11 24       	eor	r1, r1
    2100:	9f 57       	subi	r25, 0x7F	; 127
    2102:	50 40       	sbci	r21, 0x00	; 0
    2104:	8a f0       	brmi	.+34     	; 0x2128 <__mulsf3_pse+0x84>
    2106:	e1 f0       	breq	.+56     	; 0x2140 <__mulsf3_pse+0x9c>
    2108:	88 23       	and	r24, r24
    210a:	4a f0       	brmi	.+18     	; 0x211e <__mulsf3_pse+0x7a>
    210c:	ee 0f       	add	r30, r30
    210e:	ff 1f       	adc	r31, r31
    2110:	bb 1f       	adc	r27, r27
    2112:	66 1f       	adc	r22, r22
    2114:	77 1f       	adc	r23, r23
    2116:	88 1f       	adc	r24, r24
    2118:	91 50       	subi	r25, 0x01	; 1
    211a:	50 40       	sbci	r21, 0x00	; 0
    211c:	a9 f7       	brne	.-22     	; 0x2108 <__mulsf3_pse+0x64>
    211e:	9e 3f       	cpi	r25, 0xFE	; 254
    2120:	51 05       	cpc	r21, r1
    2122:	70 f0       	brcs	.+28     	; 0x2140 <__mulsf3_pse+0x9c>
    2124:	34 cf       	rjmp	.-408    	; 0x1f8e <__fp_inf>
    2126:	a3 cf       	rjmp	.-186    	; 0x206e <__fp_szero>
    2128:	5f 3f       	cpi	r21, 0xFF	; 255
    212a:	ec f3       	brlt	.-6      	; 0x2126 <__mulsf3_pse+0x82>
    212c:	98 3e       	cpi	r25, 0xE8	; 232
    212e:	dc f3       	brlt	.-10     	; 0x2126 <__mulsf3_pse+0x82>
    2130:	86 95       	lsr	r24
    2132:	77 95       	ror	r23
    2134:	67 95       	ror	r22
    2136:	b7 95       	ror	r27
    2138:	f7 95       	ror	r31
    213a:	e7 95       	ror	r30
    213c:	9f 5f       	subi	r25, 0xFF	; 255
    213e:	c1 f7       	brne	.-16     	; 0x2130 <__mulsf3_pse+0x8c>
    2140:	fe 2b       	or	r31, r30
    2142:	88 0f       	add	r24, r24
    2144:	91 1d       	adc	r25, r1
    2146:	96 95       	lsr	r25
    2148:	87 95       	ror	r24
    214a:	97 f9       	bld	r25, 7
    214c:	08 95       	ret

0000214e <square>:
    214e:	9b 01       	movw	r18, r22
    2150:	ac 01       	movw	r20, r24
    2152:	9a cf       	rjmp	.-204    	; 0x2088 <__mulsf3>

00002154 <__divsf3>:
    2154:	2f de       	rcall	.-930    	; 0x1db4 <__divsf3x>
    2156:	57 cf       	rjmp	.-338    	; 0x2006 <__fp_round>

00002158 <malloc>:
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	82 30       	cpi	r24, 0x02	; 2
    215e:	91 05       	cpc	r25, r1
    2160:	10 f4       	brcc	.+4      	; 0x2166 <malloc+0xe>
    2162:	82 e0       	ldi	r24, 0x02	; 2
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	e0 91 8e 03 	lds	r30, 0x038E
    216a:	f0 91 8f 03 	lds	r31, 0x038F
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	a0 e0       	ldi	r26, 0x00	; 0
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	30 97       	sbiw	r30, 0x00	; 0
    2178:	39 f1       	breq	.+78     	; 0x21c8 <malloc+0x70>
    217a:	40 81       	ld	r20, Z
    217c:	51 81       	ldd	r21, Z+1	; 0x01
    217e:	48 17       	cp	r20, r24
    2180:	59 07       	cpc	r21, r25
    2182:	b8 f0       	brcs	.+46     	; 0x21b2 <malloc+0x5a>
    2184:	48 17       	cp	r20, r24
    2186:	59 07       	cpc	r21, r25
    2188:	71 f4       	brne	.+28     	; 0x21a6 <malloc+0x4e>
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	93 81       	ldd	r25, Z+3	; 0x03
    218e:	10 97       	sbiw	r26, 0x00	; 0
    2190:	29 f0       	breq	.+10     	; 0x219c <malloc+0x44>
    2192:	13 96       	adiw	r26, 0x03	; 3
    2194:	9c 93       	st	X, r25
    2196:	8e 93       	st	-X, r24
    2198:	12 97       	sbiw	r26, 0x02	; 2
    219a:	2c c0       	rjmp	.+88     	; 0x21f4 <malloc+0x9c>
    219c:	90 93 8f 03 	sts	0x038F, r25
    21a0:	80 93 8e 03 	sts	0x038E, r24
    21a4:	27 c0       	rjmp	.+78     	; 0x21f4 <malloc+0x9c>
    21a6:	21 15       	cp	r18, r1
    21a8:	31 05       	cpc	r19, r1
    21aa:	31 f0       	breq	.+12     	; 0x21b8 <malloc+0x60>
    21ac:	42 17       	cp	r20, r18
    21ae:	53 07       	cpc	r21, r19
    21b0:	18 f0       	brcs	.+6      	; 0x21b8 <malloc+0x60>
    21b2:	a9 01       	movw	r20, r18
    21b4:	db 01       	movw	r26, r22
    21b6:	01 c0       	rjmp	.+2      	; 0x21ba <malloc+0x62>
    21b8:	ef 01       	movw	r28, r30
    21ba:	9a 01       	movw	r18, r20
    21bc:	bd 01       	movw	r22, r26
    21be:	df 01       	movw	r26, r30
    21c0:	02 80       	ldd	r0, Z+2	; 0x02
    21c2:	f3 81       	ldd	r31, Z+3	; 0x03
    21c4:	e0 2d       	mov	r30, r0
    21c6:	d7 cf       	rjmp	.-82     	; 0x2176 <malloc+0x1e>
    21c8:	21 15       	cp	r18, r1
    21ca:	31 05       	cpc	r19, r1
    21cc:	f9 f0       	breq	.+62     	; 0x220c <malloc+0xb4>
    21ce:	28 1b       	sub	r18, r24
    21d0:	39 0b       	sbc	r19, r25
    21d2:	24 30       	cpi	r18, 0x04	; 4
    21d4:	31 05       	cpc	r19, r1
    21d6:	80 f4       	brcc	.+32     	; 0x21f8 <malloc+0xa0>
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	9b 81       	ldd	r25, Y+3	; 0x03
    21dc:	61 15       	cp	r22, r1
    21de:	71 05       	cpc	r23, r1
    21e0:	21 f0       	breq	.+8      	; 0x21ea <malloc+0x92>
    21e2:	fb 01       	movw	r30, r22
    21e4:	93 83       	std	Z+3, r25	; 0x03
    21e6:	82 83       	std	Z+2, r24	; 0x02
    21e8:	04 c0       	rjmp	.+8      	; 0x21f2 <malloc+0x9a>
    21ea:	90 93 8f 03 	sts	0x038F, r25
    21ee:	80 93 8e 03 	sts	0x038E, r24
    21f2:	fe 01       	movw	r30, r28
    21f4:	32 96       	adiw	r30, 0x02	; 2
    21f6:	44 c0       	rjmp	.+136    	; 0x2280 <malloc+0x128>
    21f8:	fe 01       	movw	r30, r28
    21fa:	e2 0f       	add	r30, r18
    21fc:	f3 1f       	adc	r31, r19
    21fe:	81 93       	st	Z+, r24
    2200:	91 93       	st	Z+, r25
    2202:	22 50       	subi	r18, 0x02	; 2
    2204:	31 09       	sbc	r19, r1
    2206:	39 83       	std	Y+1, r19	; 0x01
    2208:	28 83       	st	Y, r18
    220a:	3a c0       	rjmp	.+116    	; 0x2280 <malloc+0x128>
    220c:	20 91 8c 03 	lds	r18, 0x038C
    2210:	30 91 8d 03 	lds	r19, 0x038D
    2214:	23 2b       	or	r18, r19
    2216:	41 f4       	brne	.+16     	; 0x2228 <malloc+0xd0>
    2218:	20 91 02 01 	lds	r18, 0x0102
    221c:	30 91 03 01 	lds	r19, 0x0103
    2220:	30 93 8d 03 	sts	0x038D, r19
    2224:	20 93 8c 03 	sts	0x038C, r18
    2228:	20 91 00 01 	lds	r18, 0x0100
    222c:	30 91 01 01 	lds	r19, 0x0101
    2230:	21 15       	cp	r18, r1
    2232:	31 05       	cpc	r19, r1
    2234:	41 f4       	brne	.+16     	; 0x2246 <malloc+0xee>
    2236:	2d b7       	in	r18, 0x3d	; 61
    2238:	3e b7       	in	r19, 0x3e	; 62
    223a:	40 91 04 01 	lds	r20, 0x0104
    223e:	50 91 05 01 	lds	r21, 0x0105
    2242:	24 1b       	sub	r18, r20
    2244:	35 0b       	sbc	r19, r21
    2246:	e0 91 8c 03 	lds	r30, 0x038C
    224a:	f0 91 8d 03 	lds	r31, 0x038D
    224e:	e2 17       	cp	r30, r18
    2250:	f3 07       	cpc	r31, r19
    2252:	a0 f4       	brcc	.+40     	; 0x227c <malloc+0x124>
    2254:	2e 1b       	sub	r18, r30
    2256:	3f 0b       	sbc	r19, r31
    2258:	28 17       	cp	r18, r24
    225a:	39 07       	cpc	r19, r25
    225c:	78 f0       	brcs	.+30     	; 0x227c <malloc+0x124>
    225e:	ac 01       	movw	r20, r24
    2260:	4e 5f       	subi	r20, 0xFE	; 254
    2262:	5f 4f       	sbci	r21, 0xFF	; 255
    2264:	24 17       	cp	r18, r20
    2266:	35 07       	cpc	r19, r21
    2268:	48 f0       	brcs	.+18     	; 0x227c <malloc+0x124>
    226a:	4e 0f       	add	r20, r30
    226c:	5f 1f       	adc	r21, r31
    226e:	50 93 8d 03 	sts	0x038D, r21
    2272:	40 93 8c 03 	sts	0x038C, r20
    2276:	81 93       	st	Z+, r24
    2278:	91 93       	st	Z+, r25
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <malloc+0x128>
    227c:	e0 e0       	ldi	r30, 0x00	; 0
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	cf 01       	movw	r24, r30
    2282:	df 91       	pop	r29
    2284:	cf 91       	pop	r28
    2286:	08 95       	ret

00002288 <free>:
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	09 f4       	brne	.+2      	; 0x2292 <free+0xa>
    2290:	87 c0       	rjmp	.+270    	; 0x23a0 <free+0x118>
    2292:	fc 01       	movw	r30, r24
    2294:	32 97       	sbiw	r30, 0x02	; 2
    2296:	13 82       	std	Z+3, r1	; 0x03
    2298:	12 82       	std	Z+2, r1	; 0x02
    229a:	c0 91 8e 03 	lds	r28, 0x038E
    229e:	d0 91 8f 03 	lds	r29, 0x038F
    22a2:	20 97       	sbiw	r28, 0x00	; 0
    22a4:	81 f4       	brne	.+32     	; 0x22c6 <free+0x3e>
    22a6:	20 81       	ld	r18, Z
    22a8:	31 81       	ldd	r19, Z+1	; 0x01
    22aa:	28 0f       	add	r18, r24
    22ac:	39 1f       	adc	r19, r25
    22ae:	80 91 8c 03 	lds	r24, 0x038C
    22b2:	90 91 8d 03 	lds	r25, 0x038D
    22b6:	82 17       	cp	r24, r18
    22b8:	93 07       	cpc	r25, r19
    22ba:	79 f5       	brne	.+94     	; 0x231a <free+0x92>
    22bc:	f0 93 8d 03 	sts	0x038D, r31
    22c0:	e0 93 8c 03 	sts	0x038C, r30
    22c4:	6d c0       	rjmp	.+218    	; 0x23a0 <free+0x118>
    22c6:	de 01       	movw	r26, r28
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	ae 17       	cp	r26, r30
    22ce:	bf 07       	cpc	r27, r31
    22d0:	50 f4       	brcc	.+20     	; 0x22e6 <free+0x5e>
    22d2:	12 96       	adiw	r26, 0x02	; 2
    22d4:	4d 91       	ld	r20, X+
    22d6:	5c 91       	ld	r21, X
    22d8:	13 97       	sbiw	r26, 0x03	; 3
    22da:	9d 01       	movw	r18, r26
    22dc:	41 15       	cp	r20, r1
    22de:	51 05       	cpc	r21, r1
    22e0:	09 f1       	breq	.+66     	; 0x2324 <free+0x9c>
    22e2:	da 01       	movw	r26, r20
    22e4:	f3 cf       	rjmp	.-26     	; 0x22cc <free+0x44>
    22e6:	b3 83       	std	Z+3, r27	; 0x03
    22e8:	a2 83       	std	Z+2, r26	; 0x02
    22ea:	40 81       	ld	r20, Z
    22ec:	51 81       	ldd	r21, Z+1	; 0x01
    22ee:	84 0f       	add	r24, r20
    22f0:	95 1f       	adc	r25, r21
    22f2:	8a 17       	cp	r24, r26
    22f4:	9b 07       	cpc	r25, r27
    22f6:	71 f4       	brne	.+28     	; 0x2314 <free+0x8c>
    22f8:	8d 91       	ld	r24, X+
    22fa:	9c 91       	ld	r25, X
    22fc:	11 97       	sbiw	r26, 0x01	; 1
    22fe:	84 0f       	add	r24, r20
    2300:	95 1f       	adc	r25, r21
    2302:	02 96       	adiw	r24, 0x02	; 2
    2304:	91 83       	std	Z+1, r25	; 0x01
    2306:	80 83       	st	Z, r24
    2308:	12 96       	adiw	r26, 0x02	; 2
    230a:	8d 91       	ld	r24, X+
    230c:	9c 91       	ld	r25, X
    230e:	13 97       	sbiw	r26, 0x03	; 3
    2310:	93 83       	std	Z+3, r25	; 0x03
    2312:	82 83       	std	Z+2, r24	; 0x02
    2314:	21 15       	cp	r18, r1
    2316:	31 05       	cpc	r19, r1
    2318:	29 f4       	brne	.+10     	; 0x2324 <free+0x9c>
    231a:	f0 93 8f 03 	sts	0x038F, r31
    231e:	e0 93 8e 03 	sts	0x038E, r30
    2322:	3e c0       	rjmp	.+124    	; 0x23a0 <free+0x118>
    2324:	d9 01       	movw	r26, r18
    2326:	13 96       	adiw	r26, 0x03	; 3
    2328:	fc 93       	st	X, r31
    232a:	ee 93       	st	-X, r30
    232c:	12 97       	sbiw	r26, 0x02	; 2
    232e:	4d 91       	ld	r20, X+
    2330:	5d 91       	ld	r21, X+
    2332:	a4 0f       	add	r26, r20
    2334:	b5 1f       	adc	r27, r21
    2336:	ea 17       	cp	r30, r26
    2338:	fb 07       	cpc	r31, r27
    233a:	79 f4       	brne	.+30     	; 0x235a <free+0xd2>
    233c:	80 81       	ld	r24, Z
    233e:	91 81       	ldd	r25, Z+1	; 0x01
    2340:	84 0f       	add	r24, r20
    2342:	95 1f       	adc	r25, r21
    2344:	02 96       	adiw	r24, 0x02	; 2
    2346:	d9 01       	movw	r26, r18
    2348:	11 96       	adiw	r26, 0x01	; 1
    234a:	9c 93       	st	X, r25
    234c:	8e 93       	st	-X, r24
    234e:	82 81       	ldd	r24, Z+2	; 0x02
    2350:	93 81       	ldd	r25, Z+3	; 0x03
    2352:	13 96       	adiw	r26, 0x03	; 3
    2354:	9c 93       	st	X, r25
    2356:	8e 93       	st	-X, r24
    2358:	12 97       	sbiw	r26, 0x02	; 2
    235a:	e0 e0       	ldi	r30, 0x00	; 0
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	9b 81       	ldd	r25, Y+3	; 0x03
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	19 f0       	breq	.+6      	; 0x236c <free+0xe4>
    2366:	fe 01       	movw	r30, r28
    2368:	ec 01       	movw	r28, r24
    236a:	f9 cf       	rjmp	.-14     	; 0x235e <free+0xd6>
    236c:	ce 01       	movw	r24, r28
    236e:	02 96       	adiw	r24, 0x02	; 2
    2370:	28 81       	ld	r18, Y
    2372:	39 81       	ldd	r19, Y+1	; 0x01
    2374:	82 0f       	add	r24, r18
    2376:	93 1f       	adc	r25, r19
    2378:	20 91 8c 03 	lds	r18, 0x038C
    237c:	30 91 8d 03 	lds	r19, 0x038D
    2380:	28 17       	cp	r18, r24
    2382:	39 07       	cpc	r19, r25
    2384:	69 f4       	brne	.+26     	; 0x23a0 <free+0x118>
    2386:	30 97       	sbiw	r30, 0x00	; 0
    2388:	29 f4       	brne	.+10     	; 0x2394 <free+0x10c>
    238a:	10 92 8f 03 	sts	0x038F, r1
    238e:	10 92 8e 03 	sts	0x038E, r1
    2392:	02 c0       	rjmp	.+4      	; 0x2398 <free+0x110>
    2394:	13 82       	std	Z+3, r1	; 0x03
    2396:	12 82       	std	Z+2, r1	; 0x02
    2398:	d0 93 8d 03 	sts	0x038D, r29
    239c:	c0 93 8c 03 	sts	0x038C, r28
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	08 95       	ret

000023a6 <do_rand>:
    23a6:	8f 92       	push	r8
    23a8:	9f 92       	push	r9
    23aa:	af 92       	push	r10
    23ac:	bf 92       	push	r11
    23ae:	cf 92       	push	r12
    23b0:	df 92       	push	r13
    23b2:	ef 92       	push	r14
    23b4:	ff 92       	push	r15
    23b6:	cf 93       	push	r28
    23b8:	df 93       	push	r29
    23ba:	ec 01       	movw	r28, r24
    23bc:	68 81       	ld	r22, Y
    23be:	79 81       	ldd	r23, Y+1	; 0x01
    23c0:	8a 81       	ldd	r24, Y+2	; 0x02
    23c2:	9b 81       	ldd	r25, Y+3	; 0x03
    23c4:	61 15       	cp	r22, r1
    23c6:	71 05       	cpc	r23, r1
    23c8:	81 05       	cpc	r24, r1
    23ca:	91 05       	cpc	r25, r1
    23cc:	21 f4       	brne	.+8      	; 0x23d6 <do_rand+0x30>
    23ce:	64 e2       	ldi	r22, 0x24	; 36
    23d0:	79 ed       	ldi	r23, 0xD9	; 217
    23d2:	8b e5       	ldi	r24, 0x5B	; 91
    23d4:	97 e0       	ldi	r25, 0x07	; 7
    23d6:	2d e1       	ldi	r18, 0x1D	; 29
    23d8:	33 ef       	ldi	r19, 0xF3	; 243
    23da:	41 e0       	ldi	r20, 0x01	; 1
    23dc:	50 e0       	ldi	r21, 0x00	; 0
    23de:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <__divmodsi4>
    23e2:	49 01       	movw	r8, r18
    23e4:	5a 01       	movw	r10, r20
    23e6:	9b 01       	movw	r18, r22
    23e8:	ac 01       	movw	r20, r24
    23ea:	a7 ea       	ldi	r26, 0xA7	; 167
    23ec:	b1 e4       	ldi	r27, 0x41	; 65
    23ee:	0e 94 77 15 	call	0x2aee	; 0x2aee <__muluhisi3>
    23f2:	6b 01       	movw	r12, r22
    23f4:	7c 01       	movw	r14, r24
    23f6:	ac ee       	ldi	r26, 0xEC	; 236
    23f8:	b4 ef       	ldi	r27, 0xF4	; 244
    23fa:	a5 01       	movw	r20, r10
    23fc:	94 01       	movw	r18, r8
    23fe:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <__mulohisi3>
    2402:	c6 0e       	add	r12, r22
    2404:	d7 1e       	adc	r13, r23
    2406:	e8 1e       	adc	r14, r24
    2408:	f9 1e       	adc	r15, r25
    240a:	f7 fe       	sbrs	r15, 7
    240c:	06 c0       	rjmp	.+12     	; 0x241a <do_rand+0x74>
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	c8 1a       	sub	r12, r24
    2412:	d1 08       	sbc	r13, r1
    2414:	e1 08       	sbc	r14, r1
    2416:	80 e8       	ldi	r24, 0x80	; 128
    2418:	f8 0a       	sbc	r15, r24
    241a:	c8 82       	st	Y, r12
    241c:	d9 82       	std	Y+1, r13	; 0x01
    241e:	ea 82       	std	Y+2, r14	; 0x02
    2420:	fb 82       	std	Y+3, r15	; 0x03
    2422:	c6 01       	movw	r24, r12
    2424:	9f 77       	andi	r25, 0x7F	; 127
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	ff 90       	pop	r15
    242c:	ef 90       	pop	r14
    242e:	df 90       	pop	r13
    2430:	cf 90       	pop	r12
    2432:	bf 90       	pop	r11
    2434:	af 90       	pop	r10
    2436:	9f 90       	pop	r9
    2438:	8f 90       	pop	r8
    243a:	08 95       	ret

0000243c <rand_r>:
    243c:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <do_rand>
    2440:	08 95       	ret

00002442 <rand>:
    2442:	86 e0       	ldi	r24, 0x06	; 6
    2444:	91 e0       	ldi	r25, 0x01	; 1
    2446:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <do_rand>
    244a:	08 95       	ret

0000244c <srand>:
    244c:	a0 e0       	ldi	r26, 0x00	; 0
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	80 93 06 01 	sts	0x0106, r24
    2454:	90 93 07 01 	sts	0x0107, r25
    2458:	a0 93 08 01 	sts	0x0108, r26
    245c:	b0 93 09 01 	sts	0x0109, r27
    2460:	08 95       	ret

00002462 <fdevopen>:
    2462:	0f 93       	push	r16
    2464:	1f 93       	push	r17
    2466:	cf 93       	push	r28
    2468:	df 93       	push	r29
    246a:	ec 01       	movw	r28, r24
    246c:	8b 01       	movw	r16, r22
    246e:	00 97       	sbiw	r24, 0x00	; 0
    2470:	31 f4       	brne	.+12     	; 0x247e <fdevopen+0x1c>
    2472:	61 15       	cp	r22, r1
    2474:	71 05       	cpc	r23, r1
    2476:	19 f4       	brne	.+6      	; 0x247e <fdevopen+0x1c>
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	38 c0       	rjmp	.+112    	; 0x24ee <fdevopen+0x8c>
    247e:	6e e0       	ldi	r22, 0x0E	; 14
    2480:	70 e0       	ldi	r23, 0x00	; 0
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	0e 94 8f 14 	call	0x291e	; 0x291e <calloc>
    248a:	fc 01       	movw	r30, r24
    248c:	00 97       	sbiw	r24, 0x00	; 0
    248e:	a1 f3       	breq	.-24     	; 0x2478 <fdevopen+0x16>
    2490:	80 e8       	ldi	r24, 0x80	; 128
    2492:	83 83       	std	Z+3, r24	; 0x03
    2494:	01 15       	cp	r16, r1
    2496:	11 05       	cpc	r17, r1
    2498:	71 f0       	breq	.+28     	; 0x24b6 <fdevopen+0x54>
    249a:	13 87       	std	Z+11, r17	; 0x0b
    249c:	02 87       	std	Z+10, r16	; 0x0a
    249e:	81 e8       	ldi	r24, 0x81	; 129
    24a0:	83 83       	std	Z+3, r24	; 0x03
    24a2:	80 91 90 03 	lds	r24, 0x0390
    24a6:	90 91 91 03 	lds	r25, 0x0391
    24aa:	89 2b       	or	r24, r25
    24ac:	21 f4       	brne	.+8      	; 0x24b6 <fdevopen+0x54>
    24ae:	f0 93 91 03 	sts	0x0391, r31
    24b2:	e0 93 90 03 	sts	0x0390, r30
    24b6:	20 97       	sbiw	r28, 0x00	; 0
    24b8:	c9 f0       	breq	.+50     	; 0x24ec <fdevopen+0x8a>
    24ba:	d1 87       	std	Z+9, r29	; 0x09
    24bc:	c0 87       	std	Z+8, r28	; 0x08
    24be:	83 81       	ldd	r24, Z+3	; 0x03
    24c0:	82 60       	ori	r24, 0x02	; 2
    24c2:	83 83       	std	Z+3, r24	; 0x03
    24c4:	80 91 92 03 	lds	r24, 0x0392
    24c8:	90 91 93 03 	lds	r25, 0x0393
    24cc:	89 2b       	or	r24, r25
    24ce:	71 f4       	brne	.+28     	; 0x24ec <fdevopen+0x8a>
    24d0:	f0 93 93 03 	sts	0x0393, r31
    24d4:	e0 93 92 03 	sts	0x0392, r30
    24d8:	80 91 94 03 	lds	r24, 0x0394
    24dc:	90 91 95 03 	lds	r25, 0x0395
    24e0:	89 2b       	or	r24, r25
    24e2:	21 f4       	brne	.+8      	; 0x24ec <fdevopen+0x8a>
    24e4:	f0 93 95 03 	sts	0x0395, r31
    24e8:	e0 93 94 03 	sts	0x0394, r30
    24ec:	cf 01       	movw	r24, r30
    24ee:	df 91       	pop	r29
    24f0:	cf 91       	pop	r28
    24f2:	1f 91       	pop	r17
    24f4:	0f 91       	pop	r16
    24f6:	08 95       	ret

000024f8 <printf>:
    24f8:	a0 e0       	ldi	r26, 0x00	; 0
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	e2 e8       	ldi	r30, 0x82	; 130
    24fe:	f2 e1       	ldi	r31, 0x12	; 18
    2500:	0c 94 9a 15 	jmp	0x2b34	; 0x2b34 <__prologue_saves__+0x20>
    2504:	fe 01       	movw	r30, r28
    2506:	35 96       	adiw	r30, 0x05	; 5
    2508:	61 91       	ld	r22, Z+
    250a:	71 91       	ld	r23, Z+
    250c:	af 01       	movw	r20, r30
    250e:	80 91 92 03 	lds	r24, 0x0392
    2512:	90 91 93 03 	lds	r25, 0x0393
    2516:	0e 94 bd 12 	call	0x257a	; 0x257a <vfprintf>
    251a:	e2 e0       	ldi	r30, 0x02	; 2
    251c:	0c 94 b6 15 	jmp	0x2b6c	; 0x2b6c <__epilogue_restores__+0x20>

00002520 <puts>:
    2520:	0f 93       	push	r16
    2522:	1f 93       	push	r17
    2524:	cf 93       	push	r28
    2526:	df 93       	push	r29
    2528:	e0 91 92 03 	lds	r30, 0x0392
    252c:	f0 91 93 03 	lds	r31, 0x0393
    2530:	23 81       	ldd	r18, Z+3	; 0x03
    2532:	21 ff       	sbrs	r18, 1
    2534:	1b c0       	rjmp	.+54     	; 0x256c <puts+0x4c>
    2536:	ec 01       	movw	r28, r24
    2538:	00 e0       	ldi	r16, 0x00	; 0
    253a:	10 e0       	ldi	r17, 0x00	; 0
    253c:	89 91       	ld	r24, Y+
    253e:	60 91 92 03 	lds	r22, 0x0392
    2542:	70 91 93 03 	lds	r23, 0x0393
    2546:	db 01       	movw	r26, r22
    2548:	18 96       	adiw	r26, 0x08	; 8
    254a:	ed 91       	ld	r30, X+
    254c:	fc 91       	ld	r31, X
    254e:	19 97       	sbiw	r26, 0x09	; 9
    2550:	88 23       	and	r24, r24
    2552:	31 f0       	breq	.+12     	; 0x2560 <puts+0x40>
    2554:	09 95       	icall
    2556:	89 2b       	or	r24, r25
    2558:	89 f3       	breq	.-30     	; 0x253c <puts+0x1c>
    255a:	0f ef       	ldi	r16, 0xFF	; 255
    255c:	1f ef       	ldi	r17, 0xFF	; 255
    255e:	ee cf       	rjmp	.-36     	; 0x253c <puts+0x1c>
    2560:	8a e0       	ldi	r24, 0x0A	; 10
    2562:	09 95       	icall
    2564:	89 2b       	or	r24, r25
    2566:	11 f4       	brne	.+4      	; 0x256c <puts+0x4c>
    2568:	c8 01       	movw	r24, r16
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <puts+0x50>
    256c:	8f ef       	ldi	r24, 0xFF	; 255
    256e:	9f ef       	ldi	r25, 0xFF	; 255
    2570:	df 91       	pop	r29
    2572:	cf 91       	pop	r28
    2574:	1f 91       	pop	r17
    2576:	0f 91       	pop	r16
    2578:	08 95       	ret

0000257a <vfprintf>:
    257a:	ac e0       	ldi	r26, 0x0C	; 12
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	e3 ec       	ldi	r30, 0xC3	; 195
    2580:	f2 e1       	ldi	r31, 0x12	; 18
    2582:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <__prologue_saves__>
    2586:	7c 01       	movw	r14, r24
    2588:	6b 01       	movw	r12, r22
    258a:	8a 01       	movw	r16, r20
    258c:	fc 01       	movw	r30, r24
    258e:	17 82       	std	Z+7, r1	; 0x07
    2590:	16 82       	std	Z+6, r1	; 0x06
    2592:	83 81       	ldd	r24, Z+3	; 0x03
    2594:	81 ff       	sbrs	r24, 1
    2596:	bd c1       	rjmp	.+890    	; 0x2912 <vfprintf+0x398>
    2598:	ce 01       	movw	r24, r28
    259a:	01 96       	adiw	r24, 0x01	; 1
    259c:	4c 01       	movw	r8, r24
    259e:	f7 01       	movw	r30, r14
    25a0:	93 81       	ldd	r25, Z+3	; 0x03
    25a2:	f6 01       	movw	r30, r12
    25a4:	93 fd       	sbrc	r25, 3
    25a6:	85 91       	lpm	r24, Z+
    25a8:	93 ff       	sbrs	r25, 3
    25aa:	81 91       	ld	r24, Z+
    25ac:	6f 01       	movw	r12, r30
    25ae:	88 23       	and	r24, r24
    25b0:	09 f4       	brne	.+2      	; 0x25b4 <vfprintf+0x3a>
    25b2:	ab c1       	rjmp	.+854    	; 0x290a <vfprintf+0x390>
    25b4:	85 32       	cpi	r24, 0x25	; 37
    25b6:	39 f4       	brne	.+14     	; 0x25c6 <vfprintf+0x4c>
    25b8:	93 fd       	sbrc	r25, 3
    25ba:	85 91       	lpm	r24, Z+
    25bc:	93 ff       	sbrs	r25, 3
    25be:	81 91       	ld	r24, Z+
    25c0:	6f 01       	movw	r12, r30
    25c2:	85 32       	cpi	r24, 0x25	; 37
    25c4:	29 f4       	brne	.+10     	; 0x25d0 <vfprintf+0x56>
    25c6:	b7 01       	movw	r22, r14
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	0e 94 c8 14 	call	0x2990	; 0x2990 <fputc>
    25ce:	e7 cf       	rjmp	.-50     	; 0x259e <vfprintf+0x24>
    25d0:	51 2c       	mov	r5, r1
    25d2:	31 2c       	mov	r3, r1
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	20 32       	cpi	r18, 0x20	; 32
    25d8:	a0 f4       	brcc	.+40     	; 0x2602 <vfprintf+0x88>
    25da:	8b 32       	cpi	r24, 0x2B	; 43
    25dc:	69 f0       	breq	.+26     	; 0x25f8 <vfprintf+0x7e>
    25de:	30 f4       	brcc	.+12     	; 0x25ec <vfprintf+0x72>
    25e0:	80 32       	cpi	r24, 0x20	; 32
    25e2:	59 f0       	breq	.+22     	; 0x25fa <vfprintf+0x80>
    25e4:	83 32       	cpi	r24, 0x23	; 35
    25e6:	69 f4       	brne	.+26     	; 0x2602 <vfprintf+0x88>
    25e8:	20 61       	ori	r18, 0x10	; 16
    25ea:	2c c0       	rjmp	.+88     	; 0x2644 <vfprintf+0xca>
    25ec:	8d 32       	cpi	r24, 0x2D	; 45
    25ee:	39 f0       	breq	.+14     	; 0x25fe <vfprintf+0x84>
    25f0:	80 33       	cpi	r24, 0x30	; 48
    25f2:	39 f4       	brne	.+14     	; 0x2602 <vfprintf+0x88>
    25f4:	21 60       	ori	r18, 0x01	; 1
    25f6:	26 c0       	rjmp	.+76     	; 0x2644 <vfprintf+0xca>
    25f8:	22 60       	ori	r18, 0x02	; 2
    25fa:	24 60       	ori	r18, 0x04	; 4
    25fc:	23 c0       	rjmp	.+70     	; 0x2644 <vfprintf+0xca>
    25fe:	28 60       	ori	r18, 0x08	; 8
    2600:	21 c0       	rjmp	.+66     	; 0x2644 <vfprintf+0xca>
    2602:	27 fd       	sbrc	r18, 7
    2604:	27 c0       	rjmp	.+78     	; 0x2654 <vfprintf+0xda>
    2606:	30 ed       	ldi	r19, 0xD0	; 208
    2608:	38 0f       	add	r19, r24
    260a:	3a 30       	cpi	r19, 0x0A	; 10
    260c:	78 f4       	brcc	.+30     	; 0x262c <vfprintf+0xb2>
    260e:	26 ff       	sbrs	r18, 6
    2610:	06 c0       	rjmp	.+12     	; 0x261e <vfprintf+0xa4>
    2612:	fa e0       	ldi	r31, 0x0A	; 10
    2614:	5f 9e       	mul	r5, r31
    2616:	30 0d       	add	r19, r0
    2618:	11 24       	eor	r1, r1
    261a:	53 2e       	mov	r5, r19
    261c:	13 c0       	rjmp	.+38     	; 0x2644 <vfprintf+0xca>
    261e:	8a e0       	ldi	r24, 0x0A	; 10
    2620:	38 9e       	mul	r3, r24
    2622:	30 0d       	add	r19, r0
    2624:	11 24       	eor	r1, r1
    2626:	33 2e       	mov	r3, r19
    2628:	20 62       	ori	r18, 0x20	; 32
    262a:	0c c0       	rjmp	.+24     	; 0x2644 <vfprintf+0xca>
    262c:	8e 32       	cpi	r24, 0x2E	; 46
    262e:	21 f4       	brne	.+8      	; 0x2638 <vfprintf+0xbe>
    2630:	26 fd       	sbrc	r18, 6
    2632:	6b c1       	rjmp	.+726    	; 0x290a <vfprintf+0x390>
    2634:	20 64       	ori	r18, 0x40	; 64
    2636:	06 c0       	rjmp	.+12     	; 0x2644 <vfprintf+0xca>
    2638:	8c 36       	cpi	r24, 0x6C	; 108
    263a:	11 f4       	brne	.+4      	; 0x2640 <vfprintf+0xc6>
    263c:	20 68       	ori	r18, 0x80	; 128
    263e:	02 c0       	rjmp	.+4      	; 0x2644 <vfprintf+0xca>
    2640:	88 36       	cpi	r24, 0x68	; 104
    2642:	41 f4       	brne	.+16     	; 0x2654 <vfprintf+0xda>
    2644:	f6 01       	movw	r30, r12
    2646:	93 fd       	sbrc	r25, 3
    2648:	85 91       	lpm	r24, Z+
    264a:	93 ff       	sbrs	r25, 3
    264c:	81 91       	ld	r24, Z+
    264e:	6f 01       	movw	r12, r30
    2650:	81 11       	cpse	r24, r1
    2652:	c1 cf       	rjmp	.-126    	; 0x25d6 <vfprintf+0x5c>
    2654:	98 2f       	mov	r25, r24
    2656:	9f 7d       	andi	r25, 0xDF	; 223
    2658:	95 54       	subi	r25, 0x45	; 69
    265a:	93 30       	cpi	r25, 0x03	; 3
    265c:	28 f4       	brcc	.+10     	; 0x2668 <vfprintf+0xee>
    265e:	0c 5f       	subi	r16, 0xFC	; 252
    2660:	1f 4f       	sbci	r17, 0xFF	; 255
    2662:	ff e3       	ldi	r31, 0x3F	; 63
    2664:	f9 83       	std	Y+1, r31	; 0x01
    2666:	0d c0       	rjmp	.+26     	; 0x2682 <vfprintf+0x108>
    2668:	83 36       	cpi	r24, 0x63	; 99
    266a:	31 f0       	breq	.+12     	; 0x2678 <vfprintf+0xfe>
    266c:	83 37       	cpi	r24, 0x73	; 115
    266e:	71 f0       	breq	.+28     	; 0x268c <vfprintf+0x112>
    2670:	83 35       	cpi	r24, 0x53	; 83
    2672:	09 f0       	breq	.+2      	; 0x2676 <vfprintf+0xfc>
    2674:	5b c0       	rjmp	.+182    	; 0x272c <vfprintf+0x1b2>
    2676:	22 c0       	rjmp	.+68     	; 0x26bc <vfprintf+0x142>
    2678:	f8 01       	movw	r30, r16
    267a:	80 81       	ld	r24, Z
    267c:	89 83       	std	Y+1, r24	; 0x01
    267e:	0e 5f       	subi	r16, 0xFE	; 254
    2680:	1f 4f       	sbci	r17, 0xFF	; 255
    2682:	44 24       	eor	r4, r4
    2684:	43 94       	inc	r4
    2686:	51 2c       	mov	r5, r1
    2688:	54 01       	movw	r10, r8
    268a:	15 c0       	rjmp	.+42     	; 0x26b6 <vfprintf+0x13c>
    268c:	38 01       	movw	r6, r16
    268e:	f2 e0       	ldi	r31, 0x02	; 2
    2690:	6f 0e       	add	r6, r31
    2692:	71 1c       	adc	r7, r1
    2694:	f8 01       	movw	r30, r16
    2696:	a0 80       	ld	r10, Z
    2698:	b1 80       	ldd	r11, Z+1	; 0x01
    269a:	26 ff       	sbrs	r18, 6
    269c:	03 c0       	rjmp	.+6      	; 0x26a4 <vfprintf+0x12a>
    269e:	65 2d       	mov	r22, r5
    26a0:	70 e0       	ldi	r23, 0x00	; 0
    26a2:	02 c0       	rjmp	.+4      	; 0x26a8 <vfprintf+0x12e>
    26a4:	6f ef       	ldi	r22, 0xFF	; 255
    26a6:	7f ef       	ldi	r23, 0xFF	; 255
    26a8:	c5 01       	movw	r24, r10
    26aa:	2c 87       	std	Y+12, r18	; 0x0c
    26ac:	0e 94 bd 14 	call	0x297a	; 0x297a <strnlen>
    26b0:	2c 01       	movw	r4, r24
    26b2:	83 01       	movw	r16, r6
    26b4:	2c 85       	ldd	r18, Y+12	; 0x0c
    26b6:	2f 77       	andi	r18, 0x7F	; 127
    26b8:	22 2e       	mov	r2, r18
    26ba:	17 c0       	rjmp	.+46     	; 0x26ea <vfprintf+0x170>
    26bc:	38 01       	movw	r6, r16
    26be:	f2 e0       	ldi	r31, 0x02	; 2
    26c0:	6f 0e       	add	r6, r31
    26c2:	71 1c       	adc	r7, r1
    26c4:	f8 01       	movw	r30, r16
    26c6:	a0 80       	ld	r10, Z
    26c8:	b1 80       	ldd	r11, Z+1	; 0x01
    26ca:	26 ff       	sbrs	r18, 6
    26cc:	03 c0       	rjmp	.+6      	; 0x26d4 <vfprintf+0x15a>
    26ce:	65 2d       	mov	r22, r5
    26d0:	70 e0       	ldi	r23, 0x00	; 0
    26d2:	02 c0       	rjmp	.+4      	; 0x26d8 <vfprintf+0x15e>
    26d4:	6f ef       	ldi	r22, 0xFF	; 255
    26d6:	7f ef       	ldi	r23, 0xFF	; 255
    26d8:	c5 01       	movw	r24, r10
    26da:	2c 87       	std	Y+12, r18	; 0x0c
    26dc:	0e 94 ab 14 	call	0x2956	; 0x2956 <strnlen_P>
    26e0:	2c 01       	movw	r4, r24
    26e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    26e4:	20 68       	ori	r18, 0x80	; 128
    26e6:	22 2e       	mov	r2, r18
    26e8:	83 01       	movw	r16, r6
    26ea:	23 fc       	sbrc	r2, 3
    26ec:	1b c0       	rjmp	.+54     	; 0x2724 <vfprintf+0x1aa>
    26ee:	83 2d       	mov	r24, r3
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	48 16       	cp	r4, r24
    26f4:	59 06       	cpc	r5, r25
    26f6:	b0 f4       	brcc	.+44     	; 0x2724 <vfprintf+0x1aa>
    26f8:	b7 01       	movw	r22, r14
    26fa:	80 e2       	ldi	r24, 0x20	; 32
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	0e 94 c8 14 	call	0x2990	; 0x2990 <fputc>
    2702:	3a 94       	dec	r3
    2704:	f4 cf       	rjmp	.-24     	; 0x26ee <vfprintf+0x174>
    2706:	f5 01       	movw	r30, r10
    2708:	27 fc       	sbrc	r2, 7
    270a:	85 91       	lpm	r24, Z+
    270c:	27 fe       	sbrs	r2, 7
    270e:	81 91       	ld	r24, Z+
    2710:	5f 01       	movw	r10, r30
    2712:	b7 01       	movw	r22, r14
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	0e 94 c8 14 	call	0x2990	; 0x2990 <fputc>
    271a:	31 10       	cpse	r3, r1
    271c:	3a 94       	dec	r3
    271e:	f1 e0       	ldi	r31, 0x01	; 1
    2720:	4f 1a       	sub	r4, r31
    2722:	51 08       	sbc	r5, r1
    2724:	41 14       	cp	r4, r1
    2726:	51 04       	cpc	r5, r1
    2728:	71 f7       	brne	.-36     	; 0x2706 <vfprintf+0x18c>
    272a:	e5 c0       	rjmp	.+458    	; 0x28f6 <vfprintf+0x37c>
    272c:	84 36       	cpi	r24, 0x64	; 100
    272e:	11 f0       	breq	.+4      	; 0x2734 <vfprintf+0x1ba>
    2730:	89 36       	cpi	r24, 0x69	; 105
    2732:	39 f5       	brne	.+78     	; 0x2782 <vfprintf+0x208>
    2734:	f8 01       	movw	r30, r16
    2736:	27 ff       	sbrs	r18, 7
    2738:	07 c0       	rjmp	.+14     	; 0x2748 <vfprintf+0x1ce>
    273a:	60 81       	ld	r22, Z
    273c:	71 81       	ldd	r23, Z+1	; 0x01
    273e:	82 81       	ldd	r24, Z+2	; 0x02
    2740:	93 81       	ldd	r25, Z+3	; 0x03
    2742:	0c 5f       	subi	r16, 0xFC	; 252
    2744:	1f 4f       	sbci	r17, 0xFF	; 255
    2746:	08 c0       	rjmp	.+16     	; 0x2758 <vfprintf+0x1de>
    2748:	60 81       	ld	r22, Z
    274a:	71 81       	ldd	r23, Z+1	; 0x01
    274c:	88 27       	eor	r24, r24
    274e:	77 fd       	sbrc	r23, 7
    2750:	80 95       	com	r24
    2752:	98 2f       	mov	r25, r24
    2754:	0e 5f       	subi	r16, 0xFE	; 254
    2756:	1f 4f       	sbci	r17, 0xFF	; 255
    2758:	2f 76       	andi	r18, 0x6F	; 111
    275a:	b2 2e       	mov	r11, r18
    275c:	97 ff       	sbrs	r25, 7
    275e:	09 c0       	rjmp	.+18     	; 0x2772 <vfprintf+0x1f8>
    2760:	90 95       	com	r25
    2762:	80 95       	com	r24
    2764:	70 95       	com	r23
    2766:	61 95       	neg	r22
    2768:	7f 4f       	sbci	r23, 0xFF	; 255
    276a:	8f 4f       	sbci	r24, 0xFF	; 255
    276c:	9f 4f       	sbci	r25, 0xFF	; 255
    276e:	20 68       	ori	r18, 0x80	; 128
    2770:	b2 2e       	mov	r11, r18
    2772:	2a e0       	ldi	r18, 0x0A	; 10
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	a4 01       	movw	r20, r8
    2778:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__ultoa_invert>
    277c:	a8 2e       	mov	r10, r24
    277e:	a8 18       	sub	r10, r8
    2780:	44 c0       	rjmp	.+136    	; 0x280a <vfprintf+0x290>
    2782:	85 37       	cpi	r24, 0x75	; 117
    2784:	29 f4       	brne	.+10     	; 0x2790 <vfprintf+0x216>
    2786:	2f 7e       	andi	r18, 0xEF	; 239
    2788:	b2 2e       	mov	r11, r18
    278a:	2a e0       	ldi	r18, 0x0A	; 10
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	25 c0       	rjmp	.+74     	; 0x27da <vfprintf+0x260>
    2790:	f2 2f       	mov	r31, r18
    2792:	f9 7f       	andi	r31, 0xF9	; 249
    2794:	bf 2e       	mov	r11, r31
    2796:	8f 36       	cpi	r24, 0x6F	; 111
    2798:	c1 f0       	breq	.+48     	; 0x27ca <vfprintf+0x250>
    279a:	18 f4       	brcc	.+6      	; 0x27a2 <vfprintf+0x228>
    279c:	88 35       	cpi	r24, 0x58	; 88
    279e:	79 f0       	breq	.+30     	; 0x27be <vfprintf+0x244>
    27a0:	b4 c0       	rjmp	.+360    	; 0x290a <vfprintf+0x390>
    27a2:	80 37       	cpi	r24, 0x70	; 112
    27a4:	19 f0       	breq	.+6      	; 0x27ac <vfprintf+0x232>
    27a6:	88 37       	cpi	r24, 0x78	; 120
    27a8:	21 f0       	breq	.+8      	; 0x27b2 <vfprintf+0x238>
    27aa:	af c0       	rjmp	.+350    	; 0x290a <vfprintf+0x390>
    27ac:	2f 2f       	mov	r18, r31
    27ae:	20 61       	ori	r18, 0x10	; 16
    27b0:	b2 2e       	mov	r11, r18
    27b2:	b4 fe       	sbrs	r11, 4
    27b4:	0d c0       	rjmp	.+26     	; 0x27d0 <vfprintf+0x256>
    27b6:	8b 2d       	mov	r24, r11
    27b8:	84 60       	ori	r24, 0x04	; 4
    27ba:	b8 2e       	mov	r11, r24
    27bc:	09 c0       	rjmp	.+18     	; 0x27d0 <vfprintf+0x256>
    27be:	24 ff       	sbrs	r18, 4
    27c0:	0a c0       	rjmp	.+20     	; 0x27d6 <vfprintf+0x25c>
    27c2:	9f 2f       	mov	r25, r31
    27c4:	96 60       	ori	r25, 0x06	; 6
    27c6:	b9 2e       	mov	r11, r25
    27c8:	06 c0       	rjmp	.+12     	; 0x27d6 <vfprintf+0x25c>
    27ca:	28 e0       	ldi	r18, 0x08	; 8
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	05 c0       	rjmp	.+10     	; 0x27da <vfprintf+0x260>
    27d0:	20 e1       	ldi	r18, 0x10	; 16
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	02 c0       	rjmp	.+4      	; 0x27da <vfprintf+0x260>
    27d6:	20 e1       	ldi	r18, 0x10	; 16
    27d8:	32 e0       	ldi	r19, 0x02	; 2
    27da:	f8 01       	movw	r30, r16
    27dc:	b7 fe       	sbrs	r11, 7
    27de:	07 c0       	rjmp	.+14     	; 0x27ee <vfprintf+0x274>
    27e0:	60 81       	ld	r22, Z
    27e2:	71 81       	ldd	r23, Z+1	; 0x01
    27e4:	82 81       	ldd	r24, Z+2	; 0x02
    27e6:	93 81       	ldd	r25, Z+3	; 0x03
    27e8:	0c 5f       	subi	r16, 0xFC	; 252
    27ea:	1f 4f       	sbci	r17, 0xFF	; 255
    27ec:	06 c0       	rjmp	.+12     	; 0x27fa <vfprintf+0x280>
    27ee:	60 81       	ld	r22, Z
    27f0:	71 81       	ldd	r23, Z+1	; 0x01
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	0e 5f       	subi	r16, 0xFE	; 254
    27f8:	1f 4f       	sbci	r17, 0xFF	; 255
    27fa:	a4 01       	movw	r20, r8
    27fc:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__ultoa_invert>
    2800:	a8 2e       	mov	r10, r24
    2802:	a8 18       	sub	r10, r8
    2804:	fb 2d       	mov	r31, r11
    2806:	ff 77       	andi	r31, 0x7F	; 127
    2808:	bf 2e       	mov	r11, r31
    280a:	b6 fe       	sbrs	r11, 6
    280c:	0b c0       	rjmp	.+22     	; 0x2824 <vfprintf+0x2aa>
    280e:	2b 2d       	mov	r18, r11
    2810:	2e 7f       	andi	r18, 0xFE	; 254
    2812:	a5 14       	cp	r10, r5
    2814:	50 f4       	brcc	.+20     	; 0x282a <vfprintf+0x2b0>
    2816:	b4 fe       	sbrs	r11, 4
    2818:	0a c0       	rjmp	.+20     	; 0x282e <vfprintf+0x2b4>
    281a:	b2 fc       	sbrc	r11, 2
    281c:	08 c0       	rjmp	.+16     	; 0x282e <vfprintf+0x2b4>
    281e:	2b 2d       	mov	r18, r11
    2820:	2e 7e       	andi	r18, 0xEE	; 238
    2822:	05 c0       	rjmp	.+10     	; 0x282e <vfprintf+0x2b4>
    2824:	7a 2c       	mov	r7, r10
    2826:	2b 2d       	mov	r18, r11
    2828:	03 c0       	rjmp	.+6      	; 0x2830 <vfprintf+0x2b6>
    282a:	7a 2c       	mov	r7, r10
    282c:	01 c0       	rjmp	.+2      	; 0x2830 <vfprintf+0x2b6>
    282e:	75 2c       	mov	r7, r5
    2830:	24 ff       	sbrs	r18, 4
    2832:	0d c0       	rjmp	.+26     	; 0x284e <vfprintf+0x2d4>
    2834:	fe 01       	movw	r30, r28
    2836:	ea 0d       	add	r30, r10
    2838:	f1 1d       	adc	r31, r1
    283a:	80 81       	ld	r24, Z
    283c:	80 33       	cpi	r24, 0x30	; 48
    283e:	11 f4       	brne	.+4      	; 0x2844 <vfprintf+0x2ca>
    2840:	29 7e       	andi	r18, 0xE9	; 233
    2842:	09 c0       	rjmp	.+18     	; 0x2856 <vfprintf+0x2dc>
    2844:	22 ff       	sbrs	r18, 2
    2846:	06 c0       	rjmp	.+12     	; 0x2854 <vfprintf+0x2da>
    2848:	73 94       	inc	r7
    284a:	73 94       	inc	r7
    284c:	04 c0       	rjmp	.+8      	; 0x2856 <vfprintf+0x2dc>
    284e:	82 2f       	mov	r24, r18
    2850:	86 78       	andi	r24, 0x86	; 134
    2852:	09 f0       	breq	.+2      	; 0x2856 <vfprintf+0x2dc>
    2854:	73 94       	inc	r7
    2856:	23 fd       	sbrc	r18, 3
    2858:	13 c0       	rjmp	.+38     	; 0x2880 <vfprintf+0x306>
    285a:	20 ff       	sbrs	r18, 0
    285c:	06 c0       	rjmp	.+12     	; 0x286a <vfprintf+0x2f0>
    285e:	5a 2c       	mov	r5, r10
    2860:	73 14       	cp	r7, r3
    2862:	18 f4       	brcc	.+6      	; 0x286a <vfprintf+0x2f0>
    2864:	53 0c       	add	r5, r3
    2866:	57 18       	sub	r5, r7
    2868:	73 2c       	mov	r7, r3
    286a:	73 14       	cp	r7, r3
    286c:	68 f4       	brcc	.+26     	; 0x2888 <vfprintf+0x30e>
    286e:	b7 01       	movw	r22, r14
    2870:	80 e2       	ldi	r24, 0x20	; 32
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	2c 87       	std	Y+12, r18	; 0x0c
    2876:	0e 94 c8 14 	call	0x2990	; 0x2990 <fputc>
    287a:	73 94       	inc	r7
    287c:	2c 85       	ldd	r18, Y+12	; 0x0c
    287e:	f5 cf       	rjmp	.-22     	; 0x286a <vfprintf+0x2f0>
    2880:	73 14       	cp	r7, r3
    2882:	10 f4       	brcc	.+4      	; 0x2888 <vfprintf+0x30e>
    2884:	37 18       	sub	r3, r7
    2886:	01 c0       	rjmp	.+2      	; 0x288a <vfprintf+0x310>
    2888:	31 2c       	mov	r3, r1
    288a:	24 ff       	sbrs	r18, 4
    288c:	12 c0       	rjmp	.+36     	; 0x28b2 <vfprintf+0x338>
    288e:	b7 01       	movw	r22, r14
    2890:	80 e3       	ldi	r24, 0x30	; 48
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	2c 87       	std	Y+12, r18	; 0x0c
    2896:	0e 94 c8 14 	call	0x2990	; 0x2990 <fputc>
    289a:	2c 85       	ldd	r18, Y+12	; 0x0c
    289c:	22 ff       	sbrs	r18, 2
    289e:	17 c0       	rjmp	.+46     	; 0x28ce <vfprintf+0x354>
    28a0:	21 ff       	sbrs	r18, 1
    28a2:	03 c0       	rjmp	.+6      	; 0x28aa <vfprintf+0x330>
    28a4:	88 e5       	ldi	r24, 0x58	; 88
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	02 c0       	rjmp	.+4      	; 0x28ae <vfprintf+0x334>
    28aa:	88 e7       	ldi	r24, 0x78	; 120
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	b7 01       	movw	r22, r14
    28b0:	0c c0       	rjmp	.+24     	; 0x28ca <vfprintf+0x350>
    28b2:	82 2f       	mov	r24, r18
    28b4:	86 78       	andi	r24, 0x86	; 134
    28b6:	59 f0       	breq	.+22     	; 0x28ce <vfprintf+0x354>
    28b8:	21 fd       	sbrc	r18, 1
    28ba:	02 c0       	rjmp	.+4      	; 0x28c0 <vfprintf+0x346>
    28bc:	80 e2       	ldi	r24, 0x20	; 32
    28be:	01 c0       	rjmp	.+2      	; 0x28c2 <vfprintf+0x348>
    28c0:	8b e2       	ldi	r24, 0x2B	; 43
    28c2:	27 fd       	sbrc	r18, 7
    28c4:	8d e2       	ldi	r24, 0x2D	; 45
    28c6:	b7 01       	movw	r22, r14
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	0e 94 c8 14 	call	0x2990	; 0x2990 <fputc>
    28ce:	a5 14       	cp	r10, r5
    28d0:	38 f4       	brcc	.+14     	; 0x28e0 <vfprintf+0x366>
    28d2:	b7 01       	movw	r22, r14
    28d4:	80 e3       	ldi	r24, 0x30	; 48
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	0e 94 c8 14 	call	0x2990	; 0x2990 <fputc>
    28dc:	5a 94       	dec	r5
    28de:	f7 cf       	rjmp	.-18     	; 0x28ce <vfprintf+0x354>
    28e0:	aa 94       	dec	r10
    28e2:	f4 01       	movw	r30, r8
    28e4:	ea 0d       	add	r30, r10
    28e6:	f1 1d       	adc	r31, r1
    28e8:	80 81       	ld	r24, Z
    28ea:	b7 01       	movw	r22, r14
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	0e 94 c8 14 	call	0x2990	; 0x2990 <fputc>
    28f2:	a1 10       	cpse	r10, r1
    28f4:	f5 cf       	rjmp	.-22     	; 0x28e0 <vfprintf+0x366>
    28f6:	33 20       	and	r3, r3
    28f8:	09 f4       	brne	.+2      	; 0x28fc <vfprintf+0x382>
    28fa:	51 ce       	rjmp	.-862    	; 0x259e <vfprintf+0x24>
    28fc:	b7 01       	movw	r22, r14
    28fe:	80 e2       	ldi	r24, 0x20	; 32
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	0e 94 c8 14 	call	0x2990	; 0x2990 <fputc>
    2906:	3a 94       	dec	r3
    2908:	f6 cf       	rjmp	.-20     	; 0x28f6 <vfprintf+0x37c>
    290a:	f7 01       	movw	r30, r14
    290c:	86 81       	ldd	r24, Z+6	; 0x06
    290e:	97 81       	ldd	r25, Z+7	; 0x07
    2910:	02 c0       	rjmp	.+4      	; 0x2916 <vfprintf+0x39c>
    2912:	8f ef       	ldi	r24, 0xFF	; 255
    2914:	9f ef       	ldi	r25, 0xFF	; 255
    2916:	2c 96       	adiw	r28, 0x0c	; 12
    2918:	e2 e1       	ldi	r30, 0x12	; 18
    291a:	0c 94 a6 15 	jmp	0x2b4c	; 0x2b4c <__epilogue_restores__>

0000291e <calloc>:
    291e:	0f 93       	push	r16
    2920:	1f 93       	push	r17
    2922:	cf 93       	push	r28
    2924:	df 93       	push	r29
    2926:	86 9f       	mul	r24, r22
    2928:	80 01       	movw	r16, r0
    292a:	87 9f       	mul	r24, r23
    292c:	10 0d       	add	r17, r0
    292e:	96 9f       	mul	r25, r22
    2930:	10 0d       	add	r17, r0
    2932:	11 24       	eor	r1, r1
    2934:	c8 01       	movw	r24, r16
    2936:	0e 94 ac 10 	call	0x2158	; 0x2158 <malloc>
    293a:	ec 01       	movw	r28, r24
    293c:	00 97       	sbiw	r24, 0x00	; 0
    293e:	29 f0       	breq	.+10     	; 0x294a <calloc+0x2c>
    2940:	a8 01       	movw	r20, r16
    2942:	60 e0       	ldi	r22, 0x00	; 0
    2944:	70 e0       	ldi	r23, 0x00	; 0
    2946:	0e 94 b6 14 	call	0x296c	; 0x296c <memset>
    294a:	ce 01       	movw	r24, r28
    294c:	df 91       	pop	r29
    294e:	cf 91       	pop	r28
    2950:	1f 91       	pop	r17
    2952:	0f 91       	pop	r16
    2954:	08 95       	ret

00002956 <strnlen_P>:
    2956:	fc 01       	movw	r30, r24
    2958:	05 90       	lpm	r0, Z+
    295a:	61 50       	subi	r22, 0x01	; 1
    295c:	70 40       	sbci	r23, 0x00	; 0
    295e:	01 10       	cpse	r0, r1
    2960:	d8 f7       	brcc	.-10     	; 0x2958 <strnlen_P+0x2>
    2962:	80 95       	com	r24
    2964:	90 95       	com	r25
    2966:	8e 0f       	add	r24, r30
    2968:	9f 1f       	adc	r25, r31
    296a:	08 95       	ret

0000296c <memset>:
    296c:	dc 01       	movw	r26, r24
    296e:	01 c0       	rjmp	.+2      	; 0x2972 <memset+0x6>
    2970:	6d 93       	st	X+, r22
    2972:	41 50       	subi	r20, 0x01	; 1
    2974:	50 40       	sbci	r21, 0x00	; 0
    2976:	e0 f7       	brcc	.-8      	; 0x2970 <memset+0x4>
    2978:	08 95       	ret

0000297a <strnlen>:
    297a:	fc 01       	movw	r30, r24
    297c:	61 50       	subi	r22, 0x01	; 1
    297e:	70 40       	sbci	r23, 0x00	; 0
    2980:	01 90       	ld	r0, Z+
    2982:	01 10       	cpse	r0, r1
    2984:	d8 f7       	brcc	.-10     	; 0x297c <strnlen+0x2>
    2986:	80 95       	com	r24
    2988:	90 95       	com	r25
    298a:	8e 0f       	add	r24, r30
    298c:	9f 1f       	adc	r25, r31
    298e:	08 95       	ret

00002990 <fputc>:
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	18 2f       	mov	r17, r24
    299a:	09 2f       	mov	r16, r25
    299c:	eb 01       	movw	r28, r22
    299e:	8b 81       	ldd	r24, Y+3	; 0x03
    29a0:	81 fd       	sbrc	r24, 1
    29a2:	03 c0       	rjmp	.+6      	; 0x29aa <fputc+0x1a>
    29a4:	8f ef       	ldi	r24, 0xFF	; 255
    29a6:	9f ef       	ldi	r25, 0xFF	; 255
    29a8:	20 c0       	rjmp	.+64     	; 0x29ea <fputc+0x5a>
    29aa:	82 ff       	sbrs	r24, 2
    29ac:	10 c0       	rjmp	.+32     	; 0x29ce <fputc+0x3e>
    29ae:	4e 81       	ldd	r20, Y+6	; 0x06
    29b0:	5f 81       	ldd	r21, Y+7	; 0x07
    29b2:	2c 81       	ldd	r18, Y+4	; 0x04
    29b4:	3d 81       	ldd	r19, Y+5	; 0x05
    29b6:	42 17       	cp	r20, r18
    29b8:	53 07       	cpc	r21, r19
    29ba:	7c f4       	brge	.+30     	; 0x29da <fputc+0x4a>
    29bc:	e8 81       	ld	r30, Y
    29be:	f9 81       	ldd	r31, Y+1	; 0x01
    29c0:	9f 01       	movw	r18, r30
    29c2:	2f 5f       	subi	r18, 0xFF	; 255
    29c4:	3f 4f       	sbci	r19, 0xFF	; 255
    29c6:	39 83       	std	Y+1, r19	; 0x01
    29c8:	28 83       	st	Y, r18
    29ca:	10 83       	st	Z, r17
    29cc:	06 c0       	rjmp	.+12     	; 0x29da <fputc+0x4a>
    29ce:	e8 85       	ldd	r30, Y+8	; 0x08
    29d0:	f9 85       	ldd	r31, Y+9	; 0x09
    29d2:	81 2f       	mov	r24, r17
    29d4:	09 95       	icall
    29d6:	89 2b       	or	r24, r25
    29d8:	29 f7       	brne	.-54     	; 0x29a4 <fputc+0x14>
    29da:	2e 81       	ldd	r18, Y+6	; 0x06
    29dc:	3f 81       	ldd	r19, Y+7	; 0x07
    29de:	2f 5f       	subi	r18, 0xFF	; 255
    29e0:	3f 4f       	sbci	r19, 0xFF	; 255
    29e2:	3f 83       	std	Y+7, r19	; 0x07
    29e4:	2e 83       	std	Y+6, r18	; 0x06
    29e6:	81 2f       	mov	r24, r17
    29e8:	90 2f       	mov	r25, r16
    29ea:	df 91       	pop	r29
    29ec:	cf 91       	pop	r28
    29ee:	1f 91       	pop	r17
    29f0:	0f 91       	pop	r16
    29f2:	08 95       	ret

000029f4 <__ultoa_invert>:
    29f4:	fa 01       	movw	r30, r20
    29f6:	aa 27       	eor	r26, r26
    29f8:	28 30       	cpi	r18, 0x08	; 8
    29fa:	51 f1       	breq	.+84     	; 0x2a50 <__ultoa_invert+0x5c>
    29fc:	20 31       	cpi	r18, 0x10	; 16
    29fe:	81 f1       	breq	.+96     	; 0x2a60 <__ultoa_invert+0x6c>
    2a00:	e8 94       	clt
    2a02:	6f 93       	push	r22
    2a04:	6e 7f       	andi	r22, 0xFE	; 254
    2a06:	6e 5f       	subi	r22, 0xFE	; 254
    2a08:	7f 4f       	sbci	r23, 0xFF	; 255
    2a0a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0e:	af 4f       	sbci	r26, 0xFF	; 255
    2a10:	b1 e0       	ldi	r27, 0x01	; 1
    2a12:	3e d0       	rcall	.+124    	; 0x2a90 <__ultoa_invert+0x9c>
    2a14:	b4 e0       	ldi	r27, 0x04	; 4
    2a16:	3c d0       	rcall	.+120    	; 0x2a90 <__ultoa_invert+0x9c>
    2a18:	67 0f       	add	r22, r23
    2a1a:	78 1f       	adc	r23, r24
    2a1c:	89 1f       	adc	r24, r25
    2a1e:	9a 1f       	adc	r25, r26
    2a20:	a1 1d       	adc	r26, r1
    2a22:	68 0f       	add	r22, r24
    2a24:	79 1f       	adc	r23, r25
    2a26:	8a 1f       	adc	r24, r26
    2a28:	91 1d       	adc	r25, r1
    2a2a:	a1 1d       	adc	r26, r1
    2a2c:	6a 0f       	add	r22, r26
    2a2e:	71 1d       	adc	r23, r1
    2a30:	81 1d       	adc	r24, r1
    2a32:	91 1d       	adc	r25, r1
    2a34:	a1 1d       	adc	r26, r1
    2a36:	20 d0       	rcall	.+64     	; 0x2a78 <__ultoa_invert+0x84>
    2a38:	09 f4       	brne	.+2      	; 0x2a3c <__ultoa_invert+0x48>
    2a3a:	68 94       	set
    2a3c:	3f 91       	pop	r19
    2a3e:	2a e0       	ldi	r18, 0x0A	; 10
    2a40:	26 9f       	mul	r18, r22
    2a42:	11 24       	eor	r1, r1
    2a44:	30 19       	sub	r19, r0
    2a46:	30 5d       	subi	r19, 0xD0	; 208
    2a48:	31 93       	st	Z+, r19
    2a4a:	de f6       	brtc	.-74     	; 0x2a02 <__ultoa_invert+0xe>
    2a4c:	cf 01       	movw	r24, r30
    2a4e:	08 95       	ret
    2a50:	46 2f       	mov	r20, r22
    2a52:	47 70       	andi	r20, 0x07	; 7
    2a54:	40 5d       	subi	r20, 0xD0	; 208
    2a56:	41 93       	st	Z+, r20
    2a58:	b3 e0       	ldi	r27, 0x03	; 3
    2a5a:	0f d0       	rcall	.+30     	; 0x2a7a <__ultoa_invert+0x86>
    2a5c:	c9 f7       	brne	.-14     	; 0x2a50 <__ultoa_invert+0x5c>
    2a5e:	f6 cf       	rjmp	.-20     	; 0x2a4c <__ultoa_invert+0x58>
    2a60:	46 2f       	mov	r20, r22
    2a62:	4f 70       	andi	r20, 0x0F	; 15
    2a64:	40 5d       	subi	r20, 0xD0	; 208
    2a66:	4a 33       	cpi	r20, 0x3A	; 58
    2a68:	18 f0       	brcs	.+6      	; 0x2a70 <__ultoa_invert+0x7c>
    2a6a:	49 5d       	subi	r20, 0xD9	; 217
    2a6c:	31 fd       	sbrc	r19, 1
    2a6e:	40 52       	subi	r20, 0x20	; 32
    2a70:	41 93       	st	Z+, r20
    2a72:	02 d0       	rcall	.+4      	; 0x2a78 <__ultoa_invert+0x84>
    2a74:	a9 f7       	brne	.-22     	; 0x2a60 <__ultoa_invert+0x6c>
    2a76:	ea cf       	rjmp	.-44     	; 0x2a4c <__ultoa_invert+0x58>
    2a78:	b4 e0       	ldi	r27, 0x04	; 4
    2a7a:	a6 95       	lsr	r26
    2a7c:	97 95       	ror	r25
    2a7e:	87 95       	ror	r24
    2a80:	77 95       	ror	r23
    2a82:	67 95       	ror	r22
    2a84:	ba 95       	dec	r27
    2a86:	c9 f7       	brne	.-14     	; 0x2a7a <__ultoa_invert+0x86>
    2a88:	00 97       	sbiw	r24, 0x00	; 0
    2a8a:	61 05       	cpc	r22, r1
    2a8c:	71 05       	cpc	r23, r1
    2a8e:	08 95       	ret
    2a90:	9b 01       	movw	r18, r22
    2a92:	ac 01       	movw	r20, r24
    2a94:	0a 2e       	mov	r0, r26
    2a96:	06 94       	lsr	r0
    2a98:	57 95       	ror	r21
    2a9a:	47 95       	ror	r20
    2a9c:	37 95       	ror	r19
    2a9e:	27 95       	ror	r18
    2aa0:	ba 95       	dec	r27
    2aa2:	c9 f7       	brne	.-14     	; 0x2a96 <__ultoa_invert+0xa2>
    2aa4:	62 0f       	add	r22, r18
    2aa6:	73 1f       	adc	r23, r19
    2aa8:	84 1f       	adc	r24, r20
    2aaa:	95 1f       	adc	r25, r21
    2aac:	a0 1d       	adc	r26, r0
    2aae:	08 95       	ret

00002ab0 <__divmodsi4>:
    2ab0:	05 2e       	mov	r0, r21
    2ab2:	97 fb       	bst	r25, 7
    2ab4:	1e f4       	brtc	.+6      	; 0x2abc <__divmodsi4+0xc>
    2ab6:	00 94       	com	r0
    2ab8:	0e 94 6f 15 	call	0x2ade	; 0x2ade <__negsi2>
    2abc:	57 fd       	sbrc	r21, 7
    2abe:	07 d0       	rcall	.+14     	; 0x2ace <__divmodsi4_neg2>
    2ac0:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__udivmodsi4>
    2ac4:	07 fc       	sbrc	r0, 7
    2ac6:	03 d0       	rcall	.+6      	; 0x2ace <__divmodsi4_neg2>
    2ac8:	4e f4       	brtc	.+18     	; 0x2adc <__divmodsi4_exit>
    2aca:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__negsi2>

00002ace <__divmodsi4_neg2>:
    2ace:	50 95       	com	r21
    2ad0:	40 95       	com	r20
    2ad2:	30 95       	com	r19
    2ad4:	21 95       	neg	r18
    2ad6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad8:	4f 4f       	sbci	r20, 0xFF	; 255
    2ada:	5f 4f       	sbci	r21, 0xFF	; 255

00002adc <__divmodsi4_exit>:
    2adc:	08 95       	ret

00002ade <__negsi2>:
    2ade:	90 95       	com	r25
    2ae0:	80 95       	com	r24
    2ae2:	70 95       	com	r23
    2ae4:	61 95       	neg	r22
    2ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae8:	8f 4f       	sbci	r24, 0xFF	; 255
    2aea:	9f 4f       	sbci	r25, 0xFF	; 255
    2aec:	08 95       	ret

00002aee <__muluhisi3>:
    2aee:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <__umulhisi3>
    2af2:	a5 9f       	mul	r26, r21
    2af4:	90 0d       	add	r25, r0
    2af6:	b4 9f       	mul	r27, r20
    2af8:	90 0d       	add	r25, r0
    2afa:	a4 9f       	mul	r26, r20
    2afc:	80 0d       	add	r24, r0
    2afe:	91 1d       	adc	r25, r1
    2b00:	11 24       	eor	r1, r1
    2b02:	08 95       	ret

00002b04 <__mulshisi3>:
    2b04:	b7 ff       	sbrs	r27, 7
    2b06:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__muluhisi3>

00002b0a <__mulohisi3>:
    2b0a:	0e 94 77 15 	call	0x2aee	; 0x2aee <__muluhisi3>
    2b0e:	82 1b       	sub	r24, r18
    2b10:	93 0b       	sbc	r25, r19
    2b12:	08 95       	ret

00002b14 <__prologue_saves__>:
    2b14:	2f 92       	push	r2
    2b16:	3f 92       	push	r3
    2b18:	4f 92       	push	r4
    2b1a:	5f 92       	push	r5
    2b1c:	6f 92       	push	r6
    2b1e:	7f 92       	push	r7
    2b20:	8f 92       	push	r8
    2b22:	9f 92       	push	r9
    2b24:	af 92       	push	r10
    2b26:	bf 92       	push	r11
    2b28:	cf 92       	push	r12
    2b2a:	df 92       	push	r13
    2b2c:	ef 92       	push	r14
    2b2e:	ff 92       	push	r15
    2b30:	0f 93       	push	r16
    2b32:	1f 93       	push	r17
    2b34:	cf 93       	push	r28
    2b36:	df 93       	push	r29
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	ca 1b       	sub	r28, r26
    2b3e:	db 0b       	sbc	r29, r27
    2b40:	0f b6       	in	r0, 0x3f	; 63
    2b42:	f8 94       	cli
    2b44:	de bf       	out	0x3e, r29	; 62
    2b46:	0f be       	out	0x3f, r0	; 63
    2b48:	cd bf       	out	0x3d, r28	; 61
    2b4a:	09 94       	ijmp

00002b4c <__epilogue_restores__>:
    2b4c:	2a 88       	ldd	r2, Y+18	; 0x12
    2b4e:	39 88       	ldd	r3, Y+17	; 0x11
    2b50:	48 88       	ldd	r4, Y+16	; 0x10
    2b52:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b54:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b56:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b58:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b5a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b5c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b5e:	b9 84       	ldd	r11, Y+9	; 0x09
    2b60:	c8 84       	ldd	r12, Y+8	; 0x08
    2b62:	df 80       	ldd	r13, Y+7	; 0x07
    2b64:	ee 80       	ldd	r14, Y+6	; 0x06
    2b66:	fd 80       	ldd	r15, Y+5	; 0x05
    2b68:	0c 81       	ldd	r16, Y+4	; 0x04
    2b6a:	1b 81       	ldd	r17, Y+3	; 0x03
    2b6c:	aa 81       	ldd	r26, Y+2	; 0x02
    2b6e:	b9 81       	ldd	r27, Y+1	; 0x01
    2b70:	ce 0f       	add	r28, r30
    2b72:	d1 1d       	adc	r29, r1
    2b74:	0f b6       	in	r0, 0x3f	; 63
    2b76:	f8 94       	cli
    2b78:	de bf       	out	0x3e, r29	; 62
    2b7a:	0f be       	out	0x3f, r0	; 63
    2b7c:	cd bf       	out	0x3d, r28	; 61
    2b7e:	ed 01       	movw	r28, r26
    2b80:	08 95       	ret

00002b82 <__udivmodsi4>:
    2b82:	a1 e2       	ldi	r26, 0x21	; 33
    2b84:	1a 2e       	mov	r1, r26
    2b86:	aa 1b       	sub	r26, r26
    2b88:	bb 1b       	sub	r27, r27
    2b8a:	fd 01       	movw	r30, r26
    2b8c:	0d c0       	rjmp	.+26     	; 0x2ba8 <__udivmodsi4_ep>

00002b8e <__udivmodsi4_loop>:
    2b8e:	aa 1f       	adc	r26, r26
    2b90:	bb 1f       	adc	r27, r27
    2b92:	ee 1f       	adc	r30, r30
    2b94:	ff 1f       	adc	r31, r31
    2b96:	a2 17       	cp	r26, r18
    2b98:	b3 07       	cpc	r27, r19
    2b9a:	e4 07       	cpc	r30, r20
    2b9c:	f5 07       	cpc	r31, r21
    2b9e:	20 f0       	brcs	.+8      	; 0x2ba8 <__udivmodsi4_ep>
    2ba0:	a2 1b       	sub	r26, r18
    2ba2:	b3 0b       	sbc	r27, r19
    2ba4:	e4 0b       	sbc	r30, r20
    2ba6:	f5 0b       	sbc	r31, r21

00002ba8 <__udivmodsi4_ep>:
    2ba8:	66 1f       	adc	r22, r22
    2baa:	77 1f       	adc	r23, r23
    2bac:	88 1f       	adc	r24, r24
    2bae:	99 1f       	adc	r25, r25
    2bb0:	1a 94       	dec	r1
    2bb2:	69 f7       	brne	.-38     	; 0x2b8e <__udivmodsi4_loop>
    2bb4:	60 95       	com	r22
    2bb6:	70 95       	com	r23
    2bb8:	80 95       	com	r24
    2bba:	90 95       	com	r25
    2bbc:	9b 01       	movw	r18, r22
    2bbe:	ac 01       	movw	r20, r24
    2bc0:	bd 01       	movw	r22, r26
    2bc2:	cf 01       	movw	r24, r30
    2bc4:	08 95       	ret

00002bc6 <__umulhisi3>:
    2bc6:	a2 9f       	mul	r26, r18
    2bc8:	b0 01       	movw	r22, r0
    2bca:	b3 9f       	mul	r27, r19
    2bcc:	c0 01       	movw	r24, r0
    2bce:	a3 9f       	mul	r26, r19
    2bd0:	70 0d       	add	r23, r0
    2bd2:	81 1d       	adc	r24, r1
    2bd4:	11 24       	eor	r1, r1
    2bd6:	91 1d       	adc	r25, r1
    2bd8:	b2 9f       	mul	r27, r18
    2bda:	70 0d       	add	r23, r0
    2bdc:	81 1d       	adc	r24, r1
    2bde:	11 24       	eor	r1, r1
    2be0:	91 1d       	adc	r25, r1
    2be2:	08 95       	ret

00002be4 <_exit>:
    2be4:	f8 94       	cli

00002be6 <__stop_program>:
    2be6:	ff cf       	rjmp	.-2      	; 0x2be6 <__stop_program>
