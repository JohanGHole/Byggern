
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800200  000014c4  00001558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  008002da  008002da  00001632  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001632  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000318  00000000  00000000  00001662  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002581  00000000  00000000  0000197a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001263  00000000  00000000  00003efb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018c1  00000000  00000000  0000515e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006d0  00000000  00000000  00006a20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000833  00000000  00000000  000070f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000fff  00000000  00000000  00007923  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000238  00000000  00000000  00008922  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c2 c3       	rjmp	.+1924   	; 0x7c2 <__vector_15>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	95 c5       	rjmp	.+2858   	; 0xbc8 <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8e c0       	rjmp	.+284    	; 0x1c6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ff 05       	cpc	r31, r15
      e6:	51 06       	cpc	r5, r17
      e8:	51 06       	cpc	r5, r17
      ea:	51 06       	cpc	r5, r17
      ec:	51 06       	cpc	r5, r17
      ee:	51 06       	cpc	r5, r17
      f0:	51 06       	cpc	r5, r17
      f2:	51 06       	cpc	r5, r17
      f4:	ff 05       	cpc	r31, r15
      f6:	51 06       	cpc	r5, r17
      f8:	51 06       	cpc	r5, r17
      fa:	51 06       	cpc	r5, r17
      fc:	51 06       	cpc	r5, r17
      fe:	51 06       	cpc	r5, r17
     100:	51 06       	cpc	r5, r17
     102:	51 06       	cpc	r5, r17
     104:	01 06       	cpc	r0, r17
     106:	51 06       	cpc	r5, r17
     108:	51 06       	cpc	r5, r17
     10a:	51 06       	cpc	r5, r17
     10c:	51 06       	cpc	r5, r17
     10e:	51 06       	cpc	r5, r17
     110:	51 06       	cpc	r5, r17
     112:	51 06       	cpc	r5, r17
     114:	51 06       	cpc	r5, r17
     116:	51 06       	cpc	r5, r17
     118:	51 06       	cpc	r5, r17
     11a:	51 06       	cpc	r5, r17
     11c:	51 06       	cpc	r5, r17
     11e:	51 06       	cpc	r5, r17
     120:	51 06       	cpc	r5, r17
     122:	51 06       	cpc	r5, r17
     124:	01 06       	cpc	r0, r17
     126:	51 06       	cpc	r5, r17
     128:	51 06       	cpc	r5, r17
     12a:	51 06       	cpc	r5, r17
     12c:	51 06       	cpc	r5, r17
     12e:	51 06       	cpc	r5, r17
     130:	51 06       	cpc	r5, r17
     132:	51 06       	cpc	r5, r17
     134:	51 06       	cpc	r5, r17
     136:	51 06       	cpc	r5, r17
     138:	51 06       	cpc	r5, r17
     13a:	51 06       	cpc	r5, r17
     13c:	51 06       	cpc	r5, r17
     13e:	51 06       	cpc	r5, r17
     140:	51 06       	cpc	r5, r17
     142:	51 06       	cpc	r5, r17
     144:	4d 06       	cpc	r4, r29
     146:	51 06       	cpc	r5, r17
     148:	51 06       	cpc	r5, r17
     14a:	51 06       	cpc	r5, r17
     14c:	51 06       	cpc	r5, r17
     14e:	51 06       	cpc	r5, r17
     150:	51 06       	cpc	r5, r17
     152:	51 06       	cpc	r5, r17
     154:	2a 06       	cpc	r2, r26
     156:	51 06       	cpc	r5, r17
     158:	51 06       	cpc	r5, r17
     15a:	51 06       	cpc	r5, r17
     15c:	51 06       	cpc	r5, r17
     15e:	51 06       	cpc	r5, r17
     160:	51 06       	cpc	r5, r17
     162:	51 06       	cpc	r5, r17
     164:	51 06       	cpc	r5, r17
     166:	51 06       	cpc	r5, r17
     168:	51 06       	cpc	r5, r17
     16a:	51 06       	cpc	r5, r17
     16c:	51 06       	cpc	r5, r17
     16e:	51 06       	cpc	r5, r17
     170:	51 06       	cpc	r5, r17
     172:	51 06       	cpc	r5, r17
     174:	1e 06       	cpc	r1, r30
     176:	51 06       	cpc	r5, r17
     178:	51 06       	cpc	r5, r17
     17a:	51 06       	cpc	r5, r17
     17c:	51 06       	cpc	r5, r17
     17e:	51 06       	cpc	r5, r17
     180:	51 06       	cpc	r5, r17
     182:	51 06       	cpc	r5, r17
     184:	3c 06       	cpc	r3, r28

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	e4 ec       	ldi	r30, 0xC4	; 196
     19e:	f4 e1       	ldi	r31, 0x14	; 20
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	aa 3d       	cpi	r26, 0xDA	; 218
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	22 e0       	ldi	r18, 0x02	; 2
     1b2:	aa ed       	ldi	r26, 0xDA	; 218
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	ab 3f       	cpi	r26, 0xFB	; 251
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	4e d1       	rcall	.+668    	; 0x45e <main>
     1c2:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <ADC_init>:
#include <stdint.h>
#include "bit_manipulation.h"

void ADC_init(){
	//Enable ADC
	set_bit(ADCSRA,ADEN);
     1c8:	ea e7       	ldi	r30, 0x7A	; 122
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	80 68       	ori	r24, 0x80	; 128
     1d0:	80 83       	st	Z, r24
	//Left adjust to only read from ADCH
	set_bit(ADMUX,ADLAR);
     1d2:	ac e7       	ldi	r26, 0x7C	; 124
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	8c 91       	ld	r24, X
     1d8:	80 62       	ori	r24, 0x20	; 32
     1da:	8c 93       	st	X, r24
	//set clock to between 50 KHz and 200 KHz.
	set_bit(ADCSRA,ADPS0);
     1dc:	80 81       	ld	r24, Z
     1de:	81 60       	ori	r24, 0x01	; 1
     1e0:	80 83       	st	Z, r24
	set_bit(ADCSRA,ADPS1);
     1e2:	80 81       	ld	r24, Z
     1e4:	82 60       	ori	r24, 0x02	; 2
     1e6:	80 83       	st	Z, r24
	set_bit(ADCSRA,ADPS2);
     1e8:	80 81       	ld	r24, Z
     1ea:	84 60       	ori	r24, 0x04	; 4
     1ec:	80 83       	st	Z, r24
	//set PF0 as input. This is pin A0 on shield.
	clear_bit(DDRF,PF0);
     1ee:	80 98       	cbi	0x10, 0	; 16
	//set AREF voltage at 1.1 V, ensuring high resolution around IR working area (~0V)
	clear_bit(ADMUX,REFS0);
     1f0:	8c 91       	ld	r24, X
     1f2:	8f 7b       	andi	r24, 0xBF	; 191
     1f4:	8c 93       	st	X, r24
	set_bit(ADMUX,REFS1);
     1f6:	8c 91       	ld	r24, X
     1f8:	80 68       	ori	r24, 0x80	; 128
     1fa:	8c 93       	st	X, r24
     1fc:	08 95       	ret

000001fe <ADC_read>:
	
}

uint8_t ADC_read(){
	//Start conversion
	set_bit(ADCSRA,ADSC);
     1fe:	ea e7       	ldi	r30, 0x7A	; 122
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	80 81       	ld	r24, Z
     204:	80 64       	ori	r24, 0x40	; 64
     206:	80 83       	st	Z, r24
	//loops until data is ready in the registers
	loop_until_bit_is_set(ADCSRA,ADIF);
     208:	80 81       	ld	r24, Z
     20a:	84 ff       	sbrs	r24, 4
     20c:	fd cf       	rjmp	.-6      	; 0x208 <ADC_read+0xa>
	uint8_t data = ADCH;
     20e:	80 91 79 00 	lds	r24, 0x0079
	return data;
}
     212:	08 95       	ret

00000214 <can_init>:
	printf("Data:\n{");
	for (int i = 0;i < msg.length; i++){
		printf("%d ",msg.data[i]);
	}
	printf("}\n");
}
     214:	72 d4       	rcall	.+2276   	; 0xafa <SPI_MasterInit>
     216:	72 d1       	rcall	.+740    	; 0x4fc <mcp2515_reset>
     218:	40 e0       	ldi	r20, 0x00	; 0
     21a:	60 ee       	ldi	r22, 0xE0	; 224
     21c:	8f e0       	ldi	r24, 0x0F	; 15
     21e:	87 c1       	rjmp	.+782    	; 0x52e <mcp2515_bit_modify>
     220:	08 95       	ret

00000222 <can_send>:
     222:	cf 92       	push	r12
     224:	df 92       	push	r13
     226:	ef 92       	push	r14
     228:	ff 92       	push	r15
     22a:	0f 93       	push	r16
     22c:	1f 93       	push	r17
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
     236:	2a 97       	sbiw	r28, 0x0a	; 10
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	f8 94       	cli
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	0f be       	out	0x3f, r0	; 63
     240:	cd bf       	out	0x3d, r28	; 61
     242:	09 83       	std	Y+1, r16	; 0x01
     244:	c1 2e       	mov	r12, r17
     246:	1a 83       	std	Y+2, r17	; 0x02
     248:	2b 83       	std	Y+3, r18	; 0x03
     24a:	3c 83       	std	Y+4, r19	; 0x04
     24c:	4d 83       	std	Y+5, r20	; 0x05
     24e:	5e 83       	std	Y+6, r21	; 0x06
     250:	6f 83       	std	Y+7, r22	; 0x07
     252:	78 87       	std	Y+8, r23	; 0x08
     254:	89 87       	std	Y+9, r24	; 0x09
     256:	9a 87       	std	Y+10, r25	; 0x0a
     258:	80 e3       	ldi	r24, 0x30	; 48
     25a:	34 d1       	rcall	.+616    	; 0x4c4 <mcp2515_read>
     25c:	83 fd       	sbrc	r24, 3
     25e:	fc cf       	rjmp	.-8      	; 0x258 <can_send+0x36>
     260:	60 2f       	mov	r22, r16
     262:	62 95       	swap	r22
     264:	66 0f       	add	r22, r22
     266:	60 7e       	andi	r22, 0xE0	; 224
     268:	81 e3       	ldi	r24, 0x31	; 49
     26a:	39 d1       	rcall	.+626    	; 0x4de <mcp2515_write>
     26c:	60 2f       	mov	r22, r16
     26e:	66 95       	lsr	r22
     270:	66 95       	lsr	r22
     272:	66 95       	lsr	r22
     274:	82 e3       	ldi	r24, 0x32	; 50
     276:	33 d1       	rcall	.+614    	; 0x4de <mcp2515_write>
     278:	6c 2d       	mov	r22, r12
     27a:	85 e3       	ldi	r24, 0x35	; 53
     27c:	30 d1       	rcall	.+608    	; 0x4de <mcp2515_write>
     27e:	d1 2c       	mov	r13, r1
     280:	1c 14       	cp	r1, r12
     282:	1d 04       	cpc	r1, r13
     284:	8c f4       	brge	.+34     	; 0x2a8 <can_send+0x86>
     286:	7e 01       	movw	r14, r28
     288:	83 e0       	ldi	r24, 0x03	; 3
     28a:	e8 0e       	add	r14, r24
     28c:	f1 1c       	adc	r15, r1
     28e:	00 e0       	ldi	r16, 0x00	; 0
     290:	10 e0       	ldi	r17, 0x00	; 0
     292:	f7 01       	movw	r30, r14
     294:	61 91       	ld	r22, Z+
     296:	7f 01       	movw	r14, r30
     298:	86 e3       	ldi	r24, 0x36	; 54
     29a:	80 0f       	add	r24, r16
     29c:	20 d1       	rcall	.+576    	; 0x4de <mcp2515_write>
     29e:	0f 5f       	subi	r16, 0xFF	; 255
     2a0:	1f 4f       	sbci	r17, 0xFF	; 255
     2a2:	0c 15       	cp	r16, r12
     2a4:	1d 05       	cpc	r17, r13
     2a6:	ac f3       	brlt	.-22     	; 0x292 <can_send+0x70>
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	37 d1       	rcall	.+622    	; 0x51a <mcp2515_request_to_send>
     2ac:	2a 96       	adiw	r28, 0x0a	; 10
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	f8 94       	cli
     2b2:	de bf       	out	0x3e, r29	; 62
     2b4:	0f be       	out	0x3f, r0	; 63
     2b6:	cd bf       	out	0x3d, r28	; 61
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	1f 91       	pop	r17
     2be:	0f 91       	pop	r16
     2c0:	ff 90       	pop	r15
     2c2:	ef 90       	pop	r14
     2c4:	df 90       	pop	r13
     2c6:	cf 90       	pop	r12
     2c8:	08 95       	ret

000002ca <can_recieve>:
     2ca:	9f 92       	push	r9
     2cc:	af 92       	push	r10
     2ce:	bf 92       	push	r11
     2d0:	cf 92       	push	r12
     2d2:	df 92       	push	r13
     2d4:	ef 92       	push	r14
     2d6:	ff 92       	push	r15
     2d8:	0f 93       	push	r16
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	2a 97       	sbiw	r28, 0x0a	; 10
     2e6:	0f b6       	in	r0, 0x3f	; 63
     2e8:	f8 94       	cli
     2ea:	de bf       	out	0x3e, r29	; 62
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	cd bf       	out	0x3d, r28	; 61
     2f0:	6c 01       	movw	r12, r24
     2f2:	9e 01       	movw	r18, r28
     2f4:	25 5f       	subi	r18, 0xF5	; 245
     2f6:	3f 4f       	sbci	r19, 0xFF	; 255
     2f8:	fe 01       	movw	r30, r28
     2fa:	33 96       	adiw	r30, 0x03	; 3
     2fc:	11 92       	st	Z+, r1
     2fe:	e2 17       	cp	r30, r18
     300:	f3 07       	cpc	r31, r19
     302:	e1 f7       	brne	.-8      	; 0x2fc <can_recieve+0x32>
     304:	8c e2       	ldi	r24, 0x2C	; 44
     306:	de d0       	rcall	.+444    	; 0x4c4 <mcp2515_read>
     308:	80 ff       	sbrs	r24, 0
     30a:	fc cf       	rjmp	.-8      	; 0x304 <can_recieve+0x3a>
     30c:	81 e6       	ldi	r24, 0x61	; 97
     30e:	da d0       	rcall	.+436    	; 0x4c4 <mcp2515_read>
     310:	98 2e       	mov	r9, r24
     312:	82 e6       	ldi	r24, 0x62	; 98
     314:	d7 d0       	rcall	.+430    	; 0x4c4 <mcp2515_read>
     316:	28 e0       	ldi	r18, 0x08	; 8
     318:	82 9f       	mul	r24, r18
     31a:	c0 01       	movw	r24, r0
     31c:	11 24       	eor	r1, r1
     31e:	96 94       	lsr	r9
     320:	96 94       	lsr	r9
     322:	96 94       	lsr	r9
     324:	96 94       	lsr	r9
     326:	96 94       	lsr	r9
     328:	98 2a       	or	r9, r24
     32a:	85 e6       	ldi	r24, 0x65	; 101
     32c:	cb d0       	rcall	.+406    	; 0x4c4 <mcp2515_read>
     32e:	8f 70       	andi	r24, 0x0F	; 15
     330:	a8 2e       	mov	r10, r24
     332:	d1 f0       	breq	.+52     	; 0x368 <can_recieve+0x9e>
     334:	ee 24       	eor	r14, r14
     336:	e3 94       	inc	r14
     338:	f1 2c       	mov	r15, r1
     33a:	ec 0e       	add	r14, r28
     33c:	fd 1e       	adc	r15, r29
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	e8 0e       	add	r14, r24
     342:	f1 1c       	adc	r15, r1
     344:	ea 0c       	add	r14, r10
     346:	f1 1c       	adc	r15, r1
     348:	8e 01       	movw	r16, r28
     34a:	0d 5f       	subi	r16, 0xFD	; 253
     34c:	1f 4f       	sbci	r17, 0xFF	; 255
     34e:	0f 2e       	mov	r0, r31
     350:	f6 e6       	ldi	r31, 0x66	; 102
     352:	bf 2e       	mov	r11, r31
     354:	f0 2d       	mov	r31, r0
     356:	8b 2d       	mov	r24, r11
     358:	b5 d0       	rcall	.+362    	; 0x4c4 <mcp2515_read>
     35a:	f8 01       	movw	r30, r16
     35c:	81 93       	st	Z+, r24
     35e:	8f 01       	movw	r16, r30
     360:	b3 94       	inc	r11
     362:	ee 15       	cp	r30, r14
     364:	ff 05       	cpc	r31, r15
     366:	b9 f7       	brne	.-18     	; 0x356 <can_recieve+0x8c>
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	61 e0       	ldi	r22, 0x01	; 1
     36c:	8c e2       	ldi	r24, 0x2C	; 44
     36e:	df d0       	rcall	.+446    	; 0x52e <mcp2515_bit_modify>
     370:	99 82       	std	Y+1, r9	; 0x01
     372:	aa 82       	std	Y+2, r10	; 0x02
     374:	8a e0       	ldi	r24, 0x0A	; 10
     376:	fe 01       	movw	r30, r28
     378:	31 96       	adiw	r30, 0x01	; 1
     37a:	d6 01       	movw	r26, r12
     37c:	01 90       	ld	r0, Z+
     37e:	0d 92       	st	X+, r0
     380:	8a 95       	dec	r24
     382:	e1 f7       	brne	.-8      	; 0x37c <can_recieve+0xb2>
     384:	c6 01       	movw	r24, r12
     386:	2a 96       	adiw	r28, 0x0a	; 10
     388:	0f b6       	in	r0, 0x3f	; 63
     38a:	f8 94       	cli
     38c:	de bf       	out	0x3e, r29	; 62
     38e:	0f be       	out	0x3f, r0	; 63
     390:	cd bf       	out	0x3d, r28	; 61
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	ff 90       	pop	r15
     39c:	ef 90       	pop	r14
     39e:	df 90       	pop	r13
     3a0:	cf 90       	pop	r12
     3a2:	bf 90       	pop	r11
     3a4:	af 90       	pop	r10
     3a6:	9f 90       	pop	r9
     3a8:	08 95       	ret

000003aa <CAN_package>:
can_msg CAN_package(uint8_t end_game){
	can_msg msg;
	msg.id = 2;
	msg.length = 1;
	msg.data[0] = end_game;
	return msg;
     3aa:	22 e0       	ldi	r18, 0x02	; 2
     3ac:	fc 01       	movw	r30, r24
     3ae:	20 83       	st	Z, r18
     3b0:	21 e0       	ldi	r18, 0x01	; 1
     3b2:	21 83       	std	Z+1, r18	; 0x01
     3b4:	62 83       	std	Z+2, r22	; 0x02
}
     3b6:	08 95       	ret

000003b8 <DAC_init>:
 */ 
#include <stdint.h>
#include <avr/interrupt.h>
#include "TWI_Master.h"

void DAC_init(){
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	1f 92       	push	r1
     3be:	1f 92       	push	r1
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
	sei();
     3c4:	78 94       	sei
	TWI_Master_Initialise();
     3c6:	d4 d3       	rcall	.+1960   	; 0xb70 <TWI_Master_Initialise>
	//reset DAC-outputs everytime we initialize
	unsigned char address_write = 0b01010000;
	unsigned char TWI_package_length = 2;
	unsigned char TWI_reset_package[2];
	unsigned char command = 0b00010000;
	TWI_reset_package[0] = address_write;
     3c8:	80 e5       	ldi	r24, 0x50	; 80
     3ca:	89 83       	std	Y+1, r24	; 0x01
	TWI_reset_package[1] = command;
     3cc:	80 e1       	ldi	r24, 0x10	; 16
     3ce:	8a 83       	std	Y+2, r24	; 0x02
	TWI_Start_Transceiver_With_Data(TWI_reset_package, TWI_package_length);
     3d0:	62 e0       	ldi	r22, 0x02	; 2
     3d2:	ce 01       	movw	r24, r28
     3d4:	01 96       	adiw	r24, 0x01	; 1
     3d6:	d6 d3       	rcall	.+1964   	; 0xb84 <TWI_Start_Transceiver_With_Data>
}
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	08 95       	ret

000003e2 <DAC_send>:

void DAC_send(unsigned char data){
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	00 d0       	rcall	.+0      	; 0x3e8 <DAC_send+0x6>
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
	unsigned char address_write = 0b01010000;
	unsigned char TWI_package_length = 3;
	unsigned char TWI_package[3];
	unsigned char command = 0b00000000;
	TWI_package[0] = address_write;
     3ec:	90 e5       	ldi	r25, 0x50	; 80
     3ee:	99 83       	std	Y+1, r25	; 0x01
	TWI_package[1] = command;
     3f0:	1a 82       	std	Y+2, r1	; 0x02
	TWI_package[2] = data;
     3f2:	8b 83       	std	Y+3, r24	; 0x03
	TWI_Start_Transceiver_With_Data(TWI_package, TWI_package_length);
     3f4:	63 e0       	ldi	r22, 0x03	; 3
     3f6:	ce 01       	movw	r24, r28
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	c4 d3       	rcall	.+1928   	; 0xb84 <TWI_Start_Transceiver_With_Data>
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	08 95       	ret

00000408 <game_over>:
#include "PD.h"
#include <stdint.h>

uint8_t game_over(){
	// if the IR-signal is obstructed, the game is over
	if (ADC_read() <= 20){
     408:	fa de       	rcall	.-524    	; 0x1fe <ADC_read>
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	85 31       	cpi	r24, 0x15	; 21
     40e:	08 f0       	brcs	.+2      	; 0x412 <game_over+0xa>
     410:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
     412:	89 2f       	mov	r24, r25
     414:	08 95       	ret

00000416 <game_run>:
void game_run(){
     416:	1f 93       	push	r17
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
     420:	2a 97       	sbiw	r28, 0x0a	; 10
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	f8 94       	cli
     426:	de bf       	out	0x3e, r29	; 62
     428:	0f be       	out	0x3f, r0	; 63
     42a:	cd bf       	out	0x3d, r28	; 61
	can_msg msg_usb_board = can_recieve();
     42c:	ce 01       	movw	r24, r28
     42e:	01 96       	adiw	r24, 0x01	; 1
     430:	4c df       	rcall	.-360    	; 0x2ca <can_recieve>
     432:	1c 81       	ldd	r17, Y+4	; 0x04
	PD_set_game_mode(msg_usb_board.data[DIFFICULTY]);
     434:	81 2f       	mov	r24, r17
     436:	74 d2       	rcall	.+1256   	; 0x920 <PD_set_game_mode>
	PWM_set_pulse(PWM_joystick_to_PWM(msg_usb_board.data[JOYSTICK_X]));
     438:	8b 81       	ldd	r24, Y+3	; 0x03
     43a:	34 d3       	rcall	.+1640   	; 0xaa4 <PWM_joystick_to_PWM>
     43c:	f4 d2       	rcall	.+1512   	; 0xa26 <PWM_set_pulse>
	solenoid_hit(msg_usb_board.data[SLIDER_BUTTON_RIGHT],msg_usb_board.data[DIFFICULTY]);
     43e:	61 2f       	mov	r22, r17
     440:	89 85       	ldd	r24, Y+9	; 0x09
     442:	43 d3       	rcall	.+1670   	; 0xaca <solenoid_hit>
	PD_set_position_reference(msg_usb_board.data[SLIDER_RIGHT]);
     444:	8f 81       	ldd	r24, Y+7	; 0x07
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	b9 d1       	rcall	.+882    	; 0x7bc <PD_set_position_reference>
}
     44a:	2a 96       	adiw	r28, 0x0a	; 10
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	f8 94       	cli
     450:	de bf       	out	0x3e, r29	; 62
     452:	0f be       	out	0x3f, r0	; 63
     454:	cd bf       	out	0x3d, r28	; 61
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	1f 91       	pop	r17
     45c:	08 95       	ret

0000045e <main>:
#include "timer.h"
#include "DAC.h"
#include "motor.h"
#include "PD.h"

int main(){
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	2a 97       	sbiw	r28, 0x0a	; 10
     468:	0f b6       	in	r0, 0x3f	; 63
     46a:	f8 94       	cli
     46c:	de bf       	out	0x3e, r29	; 62
     46e:	0f be       	out	0x3f, r0	; 63
     470:	cd bf       	out	0x3d, r28	; 61
	/* ---------------------- DRIVER INIT ---------------------- */
	uart_init();
     472:	35 d4       	rcall	.+2154   	; 0xcde <uart_init>
	mcp2515_init();
     474:	48 d0       	rcall	.+144    	; 0x506 <mcp2515_init>
	can_init();
     476:	ce de       	rcall	.-612    	; 0x214 <can_init>
	timer_init();
     478:	64 d3       	rcall	.+1736   	; 0xb42 <timer_init>
	PWM_init();
     47a:	bc d2       	rcall	.+1400   	; 0x9f4 <PWM_init>
	ADC_init();
     47c:	a5 de       	rcall	.-694    	; 0x1c8 <ADC_init>
	solenoid_init();
     47e:	22 d3       	rcall	.+1604   	; 0xac4 <solenoid_init>
	DAC_init();
     480:	9b df       	rcall	.-202    	; 0x3b8 <DAC_init>
	motor_init();
     482:	69 d0       	rcall	.+210    	; 0x556 <motor_init>
	motor_calibration();
     484:	f6 d0       	rcall	.+492    	; 0x672 <motor_calibration>
	PD_init();
     486:	69 d1       	rcall	.+722    	; 0x75a <PD_init>
     488:	01 c0       	rjmp	.+2      	; 0x48c <main+0x2e>
	while(1){
		/* ---------------------- RUN GAME ---------------------- */
		while (!(game_over())){
			game_run();
     48a:	c5 df       	rcall	.-118    	; 0x416 <game_run>
	motor_init();
	motor_calibration();
	PD_init();
	while(1){
		/* ---------------------- RUN GAME ---------------------- */
		while (!(game_over())){
     48c:	bd df       	rcall	.-134    	; 0x408 <game_over>
     48e:	88 23       	and	r24, r24
     490:	e1 f3       	breq	.-8      	; 0x48a <main+0x2c>
			game_run();
		}
		can_send(CAN_package(1)); // the game is over -> sends package to node 1
     492:	61 e0       	ldi	r22, 0x01	; 1
     494:	ce 01       	movw	r24, r28
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	88 df       	rcall	.-240    	; 0x3aa <CAN_package>
     49a:	09 81       	ldd	r16, Y+1	; 0x01
     49c:	1a 81       	ldd	r17, Y+2	; 0x02
     49e:	2b 81       	ldd	r18, Y+3	; 0x03
     4a0:	3c 81       	ldd	r19, Y+4	; 0x04
     4a2:	4d 81       	ldd	r20, Y+5	; 0x05
     4a4:	5e 81       	ldd	r21, Y+6	; 0x06
     4a6:	6f 81       	ldd	r22, Y+7	; 0x07
     4a8:	78 85       	ldd	r23, Y+8	; 0x08
     4aa:	89 85       	ldd	r24, Y+9	; 0x09
     4ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ae:	b9 de       	rcall	.-654    	; 0x222 <can_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4b0:	2f ef       	ldi	r18, 0xFF	; 255
     4b2:	89 e6       	ldi	r24, 0x69	; 105
     4b4:	98 e1       	ldi	r25, 0x18	; 24
     4b6:	21 50       	subi	r18, 0x01	; 1
     4b8:	80 40       	sbci	r24, 0x00	; 0
     4ba:	90 40       	sbci	r25, 0x00	; 0
     4bc:	e1 f7       	brne	.-8      	; 0x4b6 <main+0x58>
     4be:	00 c0       	rjmp	.+0      	; 0x4c0 <main+0x62>
     4c0:	00 00       	nop
     4c2:	e4 cf       	rjmp	.-56     	; 0x48c <main+0x2e>

000004c4 <mcp2515_read>:
	if (mcp2515_read(MCP_CANSTAT) != MODE_CONFIG){
		printf("Error with the controller. Registers not properly reset. \n");
		return;
	}
}
uint8_t mcp2515_read(uint8_t address){
     4c4:	cf 93       	push	r28
     4c6:	c8 2f       	mov	r28, r24
	SPI_slave_on();
     4c8:	38 d3       	rcall	.+1648   	; 0xb3a <SPI_slave_on>
	SPI_MasterTransmit(MCP_READ);
     4ca:	83 e0       	ldi	r24, 0x03	; 3
     4cc:	1f d3       	rcall	.+1598   	; 0xb0c <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     4ce:	8c 2f       	mov	r24, r28
     4d0:	1d d3       	rcall	.+1594   	; 0xb0c <SPI_MasterTransmit>
	uint8_t mcp2515_data = SPI_MasterRecieve();
     4d2:	27 d3       	rcall	.+1614   	; 0xb22 <SPI_MasterRecieve>
     4d4:	c8 2f       	mov	r28, r24
	SPI_slave_off();
     4d6:	33 d3       	rcall	.+1638   	; 0xb3e <SPI_slave_off>
	return mcp2515_data;
	
}
     4d8:	8c 2f       	mov	r24, r28
     4da:	cf 91       	pop	r28
     4dc:	08 95       	ret

000004de <mcp2515_write>:
void mcp2515_write(uint8_t address, uint8_t data){
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	d8 2f       	mov	r29, r24
     4e4:	c6 2f       	mov	r28, r22
	SPI_slave_on();
     4e6:	29 d3       	rcall	.+1618   	; 0xb3a <SPI_slave_on>
	SPI_MasterTransmit(MCP_WRITE);
     4e8:	82 e0       	ldi	r24, 0x02	; 2
     4ea:	10 d3       	rcall	.+1568   	; 0xb0c <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     4ec:	8d 2f       	mov	r24, r29
     4ee:	0e d3       	rcall	.+1564   	; 0xb0c <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
     4f0:	8c 2f       	mov	r24, r28
     4f2:	0c d3       	rcall	.+1560   	; 0xb0c <SPI_MasterTransmit>
	SPI_slave_off();
     4f4:	24 d3       	rcall	.+1608   	; 0xb3e <SPI_slave_off>
}
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <mcp2515_reset>:
void mcp2515_reset(void){
	SPI_slave_on();
     4fc:	1e d3       	rcall	.+1596   	; 0xb3a <SPI_slave_on>
	SPI_MasterTransmit(MCP_RESET);
     4fe:	80 ec       	ldi	r24, 0xC0	; 192
     500:	05 d3       	rcall	.+1546   	; 0xb0c <SPI_MasterTransmit>
	SPI_slave_off();
     502:	1d c3       	rjmp	.+1594   	; 0xb3e <SPI_slave_off>
     504:	08 95       	ret

00000506 <mcp2515_init>:
#include "MCP2515.h"
#include "SPI.h"
#include <util/delay.h>

void mcp2515_init(void){
	SPI_MasterInit();
     506:	f9 d2       	rcall	.+1522   	; 0xafa <SPI_MasterInit>
	mcp2515_reset();
     508:	f9 df       	rcall	.-14     	; 0x4fc <mcp2515_reset>
	if (mcp2515_read(MCP_CANSTAT) != MODE_CONFIG){
     50a:	8e e0       	ldi	r24, 0x0E	; 14
     50c:	db df       	rcall	.-74     	; 0x4c4 <mcp2515_read>
     50e:	80 38       	cpi	r24, 0x80	; 128
     510:	19 f0       	breq	.+6      	; 0x518 <mcp2515_init+0x12>
		printf("Error with the controller. Registers not properly reset. \n");
     512:	84 e1       	ldi	r24, 0x14	; 20
     514:	92 e0       	ldi	r25, 0x02	; 2
     516:	5f c6       	rjmp	.+3262   	; 0x11d6 <puts>
     518:	08 95       	ret

0000051a <mcp2515_request_to_send>:
void mcp2515_reset(void){
	SPI_slave_on();
	SPI_MasterTransmit(MCP_RESET);
	SPI_slave_off();
}
void mcp2515_request_to_send(uint8_t cmd){
     51a:	cf 93       	push	r28
     51c:	c8 2f       	mov	r28, r24
	SPI_slave_on();
     51e:	0d d3       	rcall	.+1562   	; 0xb3a <SPI_slave_on>
	SPI_MasterTransmit(MODE_CONFIG | (cmd & 7));
     520:	8c 2f       	mov	r24, r28
     522:	87 70       	andi	r24, 0x07	; 7
     524:	80 68       	ori	r24, 0x80	; 128
     526:	f2 d2       	rcall	.+1508   	; 0xb0c <SPI_MasterTransmit>
	SPI_slave_off();
     528:	0a d3       	rcall	.+1556   	; 0xb3e <SPI_slave_off>
}
     52a:	cf 91       	pop	r28
     52c:	08 95       	ret

0000052e <mcp2515_bit_modify>:
void mcp2515_bit_modify(uint8_t address, uint8_t mask_byte, uint8_t data){
     52e:	1f 93       	push	r17
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	18 2f       	mov	r17, r24
     536:	d6 2f       	mov	r29, r22
     538:	c4 2f       	mov	r28, r20
	SPI_slave_on();
     53a:	ff d2       	rcall	.+1534   	; 0xb3a <SPI_slave_on>
	SPI_MasterTransmit(MCP_BITMOD);
     53c:	85 e0       	ldi	r24, 0x05	; 5
     53e:	e6 d2       	rcall	.+1484   	; 0xb0c <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     540:	81 2f       	mov	r24, r17
     542:	e4 d2       	rcall	.+1480   	; 0xb0c <SPI_MasterTransmit>
	SPI_MasterTransmit(mask_byte); // NB: if the register is not bit-modifiable, this will force the mask to FFh. This will allow byte_writes to the registers, not bit modify
     544:	8d 2f       	mov	r24, r29
     546:	e2 d2       	rcall	.+1476   	; 0xb0c <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
     548:	8c 2f       	mov	r24, r28
     54a:	e0 d2       	rcall	.+1472   	; 0xb0c <SPI_MasterTransmit>
	SPI_slave_off();
     54c:	f8 d2       	rcall	.+1520   	; 0xb3e <SPI_slave_off>
}
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	08 95       	ret

00000556 <motor_init>:
	set_bit(PORTH,PINH5);
	return data;
}

void motor_speed(uint8_t speed){
	DAC_send(speed);
     556:	e1 e0       	ldi	r30, 0x01	; 1
     558:	f1 e0       	ldi	r31, 0x01	; 1
     55a:	80 81       	ld	r24, Z
     55c:	80 61       	ori	r24, 0x10	; 16
     55e:	80 83       	st	Z, r24
     560:	a2 e0       	ldi	r26, 0x02	; 2
     562:	b1 e0       	ldi	r27, 0x01	; 1
     564:	8c 91       	ld	r24, X
     566:	80 61       	ori	r24, 0x10	; 16
     568:	8c 93       	st	X, r24
     56a:	80 81       	ld	r24, Z
     56c:	80 62       	ori	r24, 0x20	; 32
     56e:	80 83       	st	Z, r24
     570:	80 81       	ld	r24, Z
     572:	82 60       	ori	r24, 0x02	; 2
     574:	80 83       	st	Z, r24
     576:	80 81       	ld	r24, Z
     578:	88 60       	ori	r24, 0x08	; 8
     57a:	80 83       	st	Z, r24
     57c:	8c 91       	ld	r24, X
     57e:	87 7f       	andi	r24, 0xF7	; 247
     580:	8c 93       	st	X, r24
     582:	80 81       	ld	r24, Z
     584:	80 64       	ori	r24, 0x40	; 64
     586:	80 83       	st	Z, r24
     588:	8c 91       	ld	r24, X
     58a:	8f 7b       	andi	r24, 0xBF	; 191
     58c:	8c 93       	st	X, r24
     58e:	2f ef       	ldi	r18, 0xFF	; 255
     590:	81 ee       	ldi	r24, 0xE1	; 225
     592:	94 e0       	ldi	r25, 0x04	; 4
     594:	21 50       	subi	r18, 0x01	; 1
     596:	80 40       	sbci	r24, 0x00	; 0
     598:	90 40       	sbci	r25, 0x00	; 0
     59a:	e1 f7       	brne	.-8      	; 0x594 <motor_init+0x3e>
     59c:	00 c0       	rjmp	.+0      	; 0x59e <motor_init+0x48>
     59e:	00 00       	nop
     5a0:	e2 e0       	ldi	r30, 0x02	; 2
     5a2:	f1 e0       	ldi	r31, 0x01	; 1
     5a4:	80 81       	ld	r24, Z
     5a6:	80 64       	ori	r24, 0x40	; 64
     5a8:	80 83       	st	Z, r24
     5aa:	e7 e0       	ldi	r30, 0x07	; 7
     5ac:	f1 e0       	ldi	r31, 0x01	; 1
     5ae:	80 81       	ld	r24, Z
     5b0:	8e 7f       	andi	r24, 0xFE	; 254
     5b2:	80 83       	st	Z, r24
     5b4:	80 81       	ld	r24, Z
     5b6:	8d 7f       	andi	r24, 0xFD	; 253
     5b8:	80 83       	st	Z, r24
     5ba:	80 81       	ld	r24, Z
     5bc:	8b 7f       	andi	r24, 0xFB	; 251
     5be:	80 83       	st	Z, r24
     5c0:	80 81       	ld	r24, Z
     5c2:	87 7f       	andi	r24, 0xF7	; 247
     5c4:	80 83       	st	Z, r24
     5c6:	80 81       	ld	r24, Z
     5c8:	8f 7e       	andi	r24, 0xEF	; 239
     5ca:	80 83       	st	Z, r24
     5cc:	80 81       	ld	r24, Z
     5ce:	8f 7d       	andi	r24, 0xDF	; 223
     5d0:	80 83       	st	Z, r24
     5d2:	80 81       	ld	r24, Z
     5d4:	8f 7b       	andi	r24, 0xBF	; 191
     5d6:	80 83       	st	Z, r24
     5d8:	80 81       	ld	r24, Z
     5da:	8f 77       	andi	r24, 0x7F	; 127
     5dc:	80 83       	st	Z, r24
     5de:	08 95       	ret

000005e0 <motor_read_encoder>:
     5e0:	e2 e0       	ldi	r30, 0x02	; 2
     5e2:	f1 e0       	ldi	r31, 0x01	; 1
     5e4:	80 81       	ld	r24, Z
     5e6:	8f 7d       	andi	r24, 0xDF	; 223
     5e8:	80 83       	st	Z, r24
     5ea:	80 81       	ld	r24, Z
     5ec:	87 7f       	andi	r24, 0xF7	; 247
     5ee:	80 83       	st	Z, r24
     5f0:	8f e9       	ldi	r24, 0x9F	; 159
     5f2:	9f e0       	ldi	r25, 0x0F	; 15
     5f4:	01 97       	sbiw	r24, 0x01	; 1
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <motor_read_encoder+0x14>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <motor_read_encoder+0x1a>
     5fa:	00 00       	nop
     5fc:	80 91 06 01 	lds	r24, 0x0106
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	98 2f       	mov	r25, r24
     604:	88 27       	eor	r24, r24
     606:	20 81       	ld	r18, Z
     608:	28 60       	ori	r18, 0x08	; 8
     60a:	20 83       	st	Z, r18
     60c:	ef e9       	ldi	r30, 0x9F	; 159
     60e:	ff e0       	ldi	r31, 0x0F	; 15
     610:	31 97       	sbiw	r30, 0x01	; 1
     612:	f1 f7       	brne	.-4      	; 0x610 <motor_read_encoder+0x30>
     614:	00 c0       	rjmp	.+0      	; 0x616 <motor_read_encoder+0x36>
     616:	00 00       	nop
     618:	20 91 06 01 	lds	r18, 0x0106
     61c:	e2 e0       	ldi	r30, 0x02	; 2
     61e:	f1 e0       	ldi	r31, 0x01	; 1
     620:	30 81       	ld	r19, Z
     622:	30 62       	ori	r19, 0x20	; 32
     624:	30 83       	st	Z, r19
     626:	82 2b       	or	r24, r18
     628:	08 95       	ret

0000062a <motor_speed>:
     62a:	db ce       	rjmp	.-586    	; 0x3e2 <DAC_send>
     62c:	08 95       	ret

0000062e <reset_encoder>:
     62e:	e2 e0       	ldi	r30, 0x02	; 2
     630:	f1 e0       	ldi	r31, 0x01	; 1
     632:	80 81       	ld	r24, Z
     634:	8f 7b       	andi	r24, 0xBF	; 191
     636:	80 83       	st	Z, r24
     638:	2f ef       	ldi	r18, 0xFF	; 255
     63a:	81 ee       	ldi	r24, 0xE1	; 225
     63c:	94 e0       	ldi	r25, 0x04	; 4
     63e:	21 50       	subi	r18, 0x01	; 1
     640:	80 40       	sbci	r24, 0x00	; 0
     642:	90 40       	sbci	r25, 0x00	; 0
     644:	e1 f7       	brne	.-8      	; 0x63e <reset_encoder+0x10>
     646:	00 c0       	rjmp	.+0      	; 0x648 <reset_encoder+0x1a>
     648:	00 00       	nop
     64a:	80 81       	ld	r24, Z
     64c:	80 64       	ori	r24, 0x40	; 64
     64e:	80 83       	st	Z, r24
     650:	08 95       	ret

00000652 <motor_direction>:
     652:	81 11       	cpse	r24, r1
     654:	06 c0       	rjmp	.+12     	; 0x662 <motor_direction+0x10>
     656:	e2 e0       	ldi	r30, 0x02	; 2
     658:	f1 e0       	ldi	r31, 0x01	; 1
     65a:	80 81       	ld	r24, Z
     65c:	8d 7f       	andi	r24, 0xFD	; 253
     65e:	80 83       	st	Z, r24
     660:	08 95       	ret
     662:	81 30       	cpi	r24, 0x01	; 1
     664:	29 f4       	brne	.+10     	; 0x670 <motor_direction+0x1e>
     666:	e2 e0       	ldi	r30, 0x02	; 2
     668:	f1 e0       	ldi	r31, 0x01	; 1
     66a:	80 81       	ld	r24, Z
     66c:	82 60       	ori	r24, 0x02	; 2
     66e:	80 83       	st	Z, r24
     670:	08 95       	ret

00000672 <motor_calibration>:
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	b2 df       	rcall	.-156    	; 0x5e0 <motor_read_encoder>
     67c:	ec 01       	movw	r28, r24
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	e8 df       	rcall	.-48     	; 0x652 <motor_direction>
     682:	8f e5       	ldi	r24, 0x5F	; 95
     684:	ae de       	rcall	.-676    	; 0x3e2 <DAC_send>
     686:	2f ef       	ldi	r18, 0xFF	; 255
     688:	89 ef       	ldi	r24, 0xF9	; 249
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	21 50       	subi	r18, 0x01	; 1
     68e:	80 40       	sbci	r24, 0x00	; 0
     690:	90 40       	sbci	r25, 0x00	; 0
     692:	e1 f7       	brne	.-8      	; 0x68c <motor_calibration+0x1a>
     694:	00 c0       	rjmp	.+0      	; 0x696 <motor_calibration+0x24>
     696:	00 00       	nop
     698:	a3 df       	rcall	.-186    	; 0x5e0 <motor_read_encoder>
     69a:	8c 01       	movw	r16, r24
     69c:	c8 17       	cp	r28, r24
     69e:	d9 07       	cpc	r29, r25
     6a0:	81 f0       	breq	.+32     	; 0x6c2 <motor_calibration+0x50>
     6a2:	2f ef       	ldi	r18, 0xFF	; 255
     6a4:	89 ef       	ldi	r24, 0xF9	; 249
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	21 50       	subi	r18, 0x01	; 1
     6aa:	80 40       	sbci	r24, 0x00	; 0
     6ac:	90 40       	sbci	r25, 0x00	; 0
     6ae:	e1 f7       	brne	.-8      	; 0x6a8 <motor_calibration+0x36>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <motor_calibration+0x40>
     6b2:	00 00       	nop
     6b4:	95 df       	rcall	.-214    	; 0x5e0 <motor_read_encoder>
     6b6:	ec 01       	movw	r28, r24
     6b8:	80 17       	cp	r24, r16
     6ba:	91 07       	cpc	r25, r17
     6bc:	19 f0       	breq	.+6      	; 0x6c4 <motor_calibration+0x52>
     6be:	8c 01       	movw	r16, r24
     6c0:	f0 cf       	rjmp	.-32     	; 0x6a2 <motor_calibration+0x30>
     6c2:	ec 01       	movw	r28, r24
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	8d de       	rcall	.-742    	; 0x3e2 <DAC_send>
     6c8:	b2 df       	rcall	.-156    	; 0x62e <reset_encoder>
     6ca:	8a df       	rcall	.-236    	; 0x5e0 <motor_read_encoder>
     6cc:	90 93 e6 02 	sts	0x02E6, r25
     6d0:	80 93 e5 02 	sts	0x02E5, r24
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	bd df       	rcall	.-134    	; 0x652 <motor_direction>
     6d8:	8f e5       	ldi	r24, 0x5F	; 95
     6da:	83 de       	rcall	.-762    	; 0x3e2 <DAC_send>
     6dc:	2f ef       	ldi	r18, 0xFF	; 255
     6de:	89 ef       	ldi	r24, 0xF9	; 249
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	21 50       	subi	r18, 0x01	; 1
     6e4:	80 40       	sbci	r24, 0x00	; 0
     6e6:	90 40       	sbci	r25, 0x00	; 0
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <motor_calibration+0x70>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <motor_calibration+0x7a>
     6ec:	00 00       	nop
     6ee:	78 df       	rcall	.-272    	; 0x5e0 <motor_read_encoder>
     6f0:	8c 01       	movw	r16, r24
     6f2:	8c 17       	cp	r24, r28
     6f4:	9d 07       	cpc	r25, r29
     6f6:	79 f0       	breq	.+30     	; 0x716 <motor_calibration+0xa4>
     6f8:	2f ef       	ldi	r18, 0xFF	; 255
     6fa:	89 ef       	ldi	r24, 0xF9	; 249
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	21 50       	subi	r18, 0x01	; 1
     700:	80 40       	sbci	r24, 0x00	; 0
     702:	90 40       	sbci	r25, 0x00	; 0
     704:	e1 f7       	brne	.-8      	; 0x6fe <motor_calibration+0x8c>
     706:	00 c0       	rjmp	.+0      	; 0x708 <motor_calibration+0x96>
     708:	00 00       	nop
     70a:	6a df       	rcall	.-300    	; 0x5e0 <motor_read_encoder>
     70c:	80 17       	cp	r24, r16
     70e:	91 07       	cpc	r25, r17
     710:	11 f0       	breq	.+4      	; 0x716 <motor_calibration+0xa4>
     712:	8c 01       	movw	r16, r24
     714:	f1 cf       	rjmp	.-30     	; 0x6f8 <motor_calibration+0x86>
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	64 de       	rcall	.-824    	; 0x3e2 <DAC_send>
     71a:	2f ef       	ldi	r18, 0xFF	; 255
     71c:	83 ec       	ldi	r24, 0xC3	; 195
     71e:	99 e0       	ldi	r25, 0x09	; 9
     720:	21 50       	subi	r18, 0x01	; 1
     722:	80 40       	sbci	r24, 0x00	; 0
     724:	90 40       	sbci	r25, 0x00	; 0
     726:	e1 f7       	brne	.-8      	; 0x720 <motor_calibration+0xae>
     728:	00 c0       	rjmp	.+0      	; 0x72a <motor_calibration+0xb8>
     72a:	00 00       	nop
     72c:	59 df       	rcall	.-334    	; 0x5e0 <motor_read_encoder>
     72e:	90 93 e8 02 	sts	0x02E8, r25
     732:	80 93 e7 02 	sts	0x02E7, r24
     736:	84 ec       	ldi	r24, 0xC4	; 196
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	4d d5       	rcall	.+2714   	; 0x11d6 <puts>
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	08 95       	ret

00000746 <motor_get_max_encoder>:
		motor_speed(80);
	}
}
int16_t motor_get_max_encoder(){
	return MAX_ENCODER;
}
     746:	80 91 e7 02 	lds	r24, 0x02E7
     74a:	90 91 e8 02 	lds	r25, 0x02E8
     74e:	08 95       	ret

00000750 <motor_get_min_encoder>:
int16_t motor_get_min_encoder(){
	return MIN_ENCODER;
}
     750:	80 91 e5 02 	lds	r24, 0x02E5
     754:	90 91 e6 02 	lds	r25, 0x02E6
     758:	08 95       	ret

0000075a <PD_init>:
int16_t lower_limit;
int16_t upper_limit;
double range;

void PD_init(){
	cli();
     75a:	f8 94       	cli
	//Set interrupt enable with overflow on timer 2. This ensures that we get a PD-update every 16 ms => (1/16 000 000 / 1024 (prescaler) / 256 (8 bits))
	set_bit(TIMSK2,TOIE2);
     75c:	e0 e7       	ldi	r30, 0x70	; 112
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	80 81       	ld	r24, Z
     762:	81 60       	ori	r24, 0x01	; 1
     764:	80 83       	st	Z, r24
	// set prescaler
	set_bit(TCCR2B,CS20);
     766:	e1 eb       	ldi	r30, 0xB1	; 177
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	80 81       	ld	r24, Z
     76c:	81 60       	ori	r24, 0x01	; 1
     76e:	80 83       	st	Z, r24
	set_bit(TCCR2B,CS21);
     770:	80 81       	ld	r24, Z
     772:	82 60       	ori	r24, 0x02	; 2
     774:	80 83       	st	Z, r24
	set_bit(TCCR2B,CS22);
     776:	80 81       	ld	r24, Z
     778:	84 60       	ori	r24, 0x04	; 4
     77a:	80 83       	st	Z, r24
	lower_limit = motor_get_min_encoder();
     77c:	e9 df       	rcall	.-46     	; 0x750 <motor_get_min_encoder>
     77e:	90 93 ec 02 	sts	0x02EC, r25
     782:	80 93 eb 02 	sts	0x02EB, r24
	upper_limit = motor_get_max_encoder();
     786:	df df       	rcall	.-66     	; 0x746 <motor_get_max_encoder>
     788:	bc 01       	movw	r22, r24
     78a:	90 93 ea 02 	sts	0x02EA, r25
     78e:	80 93 e9 02 	sts	0x02E9, r24
	range = upper_limit-lower_limit;
     792:	80 91 eb 02 	lds	r24, 0x02EB
     796:	90 91 ec 02 	lds	r25, 0x02EC
     79a:	68 1b       	sub	r22, r24
     79c:	79 0b       	sbc	r23, r25
     79e:	88 27       	eor	r24, r24
     7a0:	77 fd       	sbrc	r23, 7
     7a2:	80 95       	com	r24
     7a4:	98 2f       	mov	r25, r24
     7a6:	b0 d3       	rcall	.+1888   	; 0xf08 <__floatsisf>
     7a8:	60 93 ed 02 	sts	0x02ED, r22
     7ac:	70 93 ee 02 	sts	0x02EE, r23
     7b0:	80 93 ef 02 	sts	0x02EF, r24
     7b4:	90 93 f0 02 	sts	0x02F0, r25
	sei();
     7b8:	78 94       	sei
     7ba:	08 95       	ret

000007bc <PD_set_position_reference>:
}

int16_t PD_set_position_reference(int16_t ref){
	reference = ref;
     7bc:	80 93 12 02 	sts	0x0212, r24
}
     7c0:	08 95       	ret

000007c2 <__vector_15>:

ISR(TIMER2_OVF_vect){
     7c2:	1f 92       	push	r1
     7c4:	0f 92       	push	r0
     7c6:	0f b6       	in	r0, 0x3f	; 63
     7c8:	0f 92       	push	r0
     7ca:	11 24       	eor	r1, r1
     7cc:	0b b6       	in	r0, 0x3b	; 59
     7ce:	0f 92       	push	r0
     7d0:	cf 92       	push	r12
     7d2:	df 92       	push	r13
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	2f 93       	push	r18
     7de:	3f 93       	push	r19
     7e0:	4f 93       	push	r20
     7e2:	5f 93       	push	r21
     7e4:	6f 93       	push	r22
     7e6:	7f 93       	push	r23
     7e8:	8f 93       	push	r24
     7ea:	9f 93       	push	r25
     7ec:	af 93       	push	r26
     7ee:	bf 93       	push	r27
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	ef 93       	push	r30
     7f6:	ff 93       	push	r31
	//PD-regulator
	// This code is motor-depended. If the friction is too high, retune max_speed and Kp
	position = motor_read_encoder();
     7f8:	f3 de       	rcall	.-538    	; 0x5e0 <motor_read_encoder>
     7fa:	90 93 dd 02 	sts	0x02DD, r25
     7fe:	80 93 dc 02 	sts	0x02DC, r24
	int16_t scaled_pos = (position/range)*(255);
	int16_t error = reference - scaled_pos;
     802:	c0 91 12 02 	lds	r28, 0x0212
     806:	d0 e0       	ldi	r29, 0x00	; 0

ISR(TIMER2_OVF_vect){
	//PD-regulator
	// This code is motor-depended. If the friction is too high, retune max_speed and Kp
	position = motor_read_encoder();
	int16_t scaled_pos = (position/range)*(255);
     808:	bc 01       	movw	r22, r24
     80a:	88 27       	eor	r24, r24
     80c:	77 fd       	sbrc	r23, 7
     80e:	80 95       	com	r24
     810:	98 2f       	mov	r25, r24
     812:	7a d3       	rcall	.+1780   	; 0xf08 <__floatsisf>
     814:	20 91 ed 02 	lds	r18, 0x02ED
     818:	30 91 ee 02 	lds	r19, 0x02EE
     81c:	40 91 ef 02 	lds	r20, 0x02EF
     820:	50 91 f0 02 	lds	r21, 0x02F0
     824:	d6 d2       	rcall	.+1452   	; 0xdd2 <__divsf3>
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	4f e7       	ldi	r20, 0x7F	; 127
     82c:	53 e4       	ldi	r21, 0x43	; 67
     82e:	20 d4       	rcall	.+2112   	; 0x1070 <__mulsf3>
     830:	38 d3       	rcall	.+1648   	; 0xea2 <__fixsfsi>
	int16_t error = reference - scaled_pos;
     832:	c6 1b       	sub	r28, r22
     834:	d7 0b       	sbc	r29, r23
	int16_t actuation = Kp * error + (Kd * (error - previous_error))/dt;
     836:	be 01       	movw	r22, r28
     838:	88 27       	eor	r24, r24
     83a:	77 fd       	sbrc	r23, 7
     83c:	80 95       	com	r24
     83e:	98 2f       	mov	r25, r24
     840:	63 d3       	rcall	.+1734   	; 0xf08 <__floatsisf>
     842:	20 91 0a 02 	lds	r18, 0x020A
     846:	30 91 0b 02 	lds	r19, 0x020B
     84a:	40 91 0c 02 	lds	r20, 0x020C
     84e:	50 91 0d 02 	lds	r21, 0x020D
     852:	0e d4       	rcall	.+2076   	; 0x1070 <__mulsf3>
     854:	6b 01       	movw	r12, r22
     856:	7c 01       	movw	r14, r24
     858:	80 91 da 02 	lds	r24, 0x02DA
     85c:	90 91 db 02 	lds	r25, 0x02DB
     860:	be 01       	movw	r22, r28
     862:	68 1b       	sub	r22, r24
     864:	79 0b       	sbc	r23, r25
     866:	88 27       	eor	r24, r24
     868:	77 fd       	sbrc	r23, 7
     86a:	80 95       	com	r24
     86c:	98 2f       	mov	r25, r24
     86e:	4c d3       	rcall	.+1688   	; 0xf08 <__floatsisf>
     870:	20 91 06 02 	lds	r18, 0x0206
     874:	30 91 07 02 	lds	r19, 0x0207
     878:	40 91 08 02 	lds	r20, 0x0208
     87c:	50 91 09 02 	lds	r21, 0x0209
     880:	f7 d3       	rcall	.+2030   	; 0x1070 <__mulsf3>
     882:	20 91 0e 02 	lds	r18, 0x020E
     886:	30 91 0f 02 	lds	r19, 0x020F
     88a:	40 91 10 02 	lds	r20, 0x0210
     88e:	50 91 11 02 	lds	r21, 0x0211
     892:	9f d2       	rcall	.+1342   	; 0xdd2 <__divsf3>
     894:	9b 01       	movw	r18, r22
     896:	ac 01       	movw	r20, r24
     898:	c7 01       	movw	r24, r14
     89a:	b6 01       	movw	r22, r12
     89c:	32 d2       	rcall	.+1124   	; 0xd02 <__addsf3>
     89e:	01 d3       	rcall	.+1538   	; 0xea2 <__fixsfsi>
     8a0:	6b 01       	movw	r12, r22
     8a2:	7c 01       	movw	r14, r24
     8a4:	8b 01       	movw	r16, r22
	
	if (error > 0){
     8a6:	1c 16       	cp	r1, r28
     8a8:	1d 06       	cpc	r1, r29
     8aa:	5c f4       	brge	.+22     	; 0x8c2 <__vector_15+0x100>
		motor_direction(RIGHT);
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	d1 de       	rcall	.-606    	; 0x652 <motor_direction>
		if (actuation < MAX_SPEED){
     8b0:	06 39       	cpi	r16, 0x96	; 150
     8b2:	11 05       	cpc	r17, r1
     8b4:	1c f4       	brge	.+6      	; 0x8bc <__vector_15+0xfa>
			motor_speed((uint8_t)(actuation));
     8b6:	8c 2d       	mov	r24, r12
     8b8:	b8 de       	rcall	.-656    	; 0x62a <motor_speed>
     8ba:	12 c0       	rjmp	.+36     	; 0x8e0 <__vector_15+0x11e>
		}
		else{
			motor_speed((uint8_t)MAX_SPEED);
     8bc:	86 e9       	ldi	r24, 0x96	; 150
     8be:	b5 de       	rcall	.-662    	; 0x62a <motor_speed>
     8c0:	0f c0       	rjmp	.+30     	; 0x8e0 <__vector_15+0x11e>
		}
	}
	else if(error <= 0){
		motor_direction(LEFT);
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	c6 de       	rcall	.-628    	; 0x652 <motor_direction>
		if (-actuation < MAX_SPEED){
     8c6:	88 27       	eor	r24, r24
     8c8:	99 27       	eor	r25, r25
     8ca:	8c 19       	sub	r24, r12
     8cc:	9d 09       	sbc	r25, r13
     8ce:	86 39       	cpi	r24, 0x96	; 150
     8d0:	91 05       	cpc	r25, r1
     8d2:	24 f4       	brge	.+8      	; 0x8dc <__vector_15+0x11a>
			motor_speed((uint8_t)(-actuation));
     8d4:	8c 2d       	mov	r24, r12
     8d6:	81 95       	neg	r24
     8d8:	a8 de       	rcall	.-688    	; 0x62a <motor_speed>
     8da:	02 c0       	rjmp	.+4      	; 0x8e0 <__vector_15+0x11e>
		}
		else {
			motor_speed((uint8_t)(MAX_SPEED));
     8dc:	86 e9       	ldi	r24, 0x96	; 150
     8de:	a5 de       	rcall	.-694    	; 0x62a <motor_speed>
		}
	}
	previous_error = error;
     8e0:	d0 93 db 02 	sts	0x02DB, r29
     8e4:	c0 93 da 02 	sts	0x02DA, r28
	// reset overflow flag
	set_bit(TIFR2,TOV2);
     8e8:	b8 9a       	sbi	0x17, 0	; 23
}
     8ea:	ff 91       	pop	r31
     8ec:	ef 91       	pop	r30
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	bf 91       	pop	r27
     8f4:	af 91       	pop	r26
     8f6:	9f 91       	pop	r25
     8f8:	8f 91       	pop	r24
     8fa:	7f 91       	pop	r23
     8fc:	6f 91       	pop	r22
     8fe:	5f 91       	pop	r21
     900:	4f 91       	pop	r20
     902:	3f 91       	pop	r19
     904:	2f 91       	pop	r18
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	ff 90       	pop	r15
     90c:	ef 90       	pop	r14
     90e:	df 90       	pop	r13
     910:	cf 90       	pop	r12
     912:	0f 90       	pop	r0
     914:	0b be       	out	0x3b, r0	; 59
     916:	0f 90       	pop	r0
     918:	0f be       	out	0x3f, r0	; 63
     91a:	0f 90       	pop	r0
     91c:	1f 90       	pop	r1
     91e:	18 95       	reti

00000920 <PD_set_game_mode>:

void PD_set_game_mode(uint8_t difficulty){
	switch(difficulty) {
     920:	81 30       	cpi	r24, 0x01	; 1
     922:	e9 f0       	breq	.+58     	; 0x95e <PD_set_game_mode+0x3e>
     924:	18 f0       	brcs	.+6      	; 0x92c <PD_set_game_mode+0xc>
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	99 f1       	breq	.+102    	; 0x990 <PD_set_game_mode+0x70>
     92a:	4b c0       	rjmp	.+150    	; 0x9c2 <PD_set_game_mode+0xa2>
		
		case EASY:
			Kp = 4;
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	a0 e8       	ldi	r26, 0x80	; 128
     932:	b0 e4       	ldi	r27, 0x40	; 64
     934:	80 93 0a 02 	sts	0x020A, r24
     938:	90 93 0b 02 	sts	0x020B, r25
     93c:	a0 93 0c 02 	sts	0x020C, r26
     940:	b0 93 0d 02 	sts	0x020D, r27
			Kd = 0.0002;
     944:	87 e1       	ldi	r24, 0x17	; 23
     946:	97 eb       	ldi	r25, 0xB7	; 183
     948:	a1 e5       	ldi	r26, 0x51	; 81
     94a:	b9 e3       	ldi	r27, 0x39	; 57
     94c:	80 93 06 02 	sts	0x0206, r24
     950:	90 93 07 02 	sts	0x0207, r25
     954:	a0 93 08 02 	sts	0x0208, r26
     958:	b0 93 09 02 	sts	0x0209, r27
			break;
     95c:	08 95       	ret
		
		case MEDIUM:
			Kp = 6;
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 ec       	ldi	r26, 0xC0	; 192
     964:	b0 e4       	ldi	r27, 0x40	; 64
     966:	80 93 0a 02 	sts	0x020A, r24
     96a:	90 93 0b 02 	sts	0x020B, r25
     96e:	a0 93 0c 02 	sts	0x020C, r26
     972:	b0 93 0d 02 	sts	0x020D, r27
			Kd = 0.02;
     976:	8a e0       	ldi	r24, 0x0A	; 10
     978:	97 ed       	ldi	r25, 0xD7	; 215
     97a:	a3 ea       	ldi	r26, 0xA3	; 163
     97c:	bc e3       	ldi	r27, 0x3C	; 60
     97e:	80 93 06 02 	sts	0x0206, r24
     982:	90 93 07 02 	sts	0x0207, r25
     986:	a0 93 08 02 	sts	0x0208, r26
     98a:	b0 93 09 02 	sts	0x0209, r27
			break; 
     98e:	08 95       	ret
			
		case INSANE:
			Kp = 8;
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	a0 e0       	ldi	r26, 0x00	; 0
     996:	b1 e4       	ldi	r27, 0x41	; 65
     998:	80 93 0a 02 	sts	0x020A, r24
     99c:	90 93 0b 02 	sts	0x020B, r25
     9a0:	a0 93 0c 02 	sts	0x020C, r26
     9a4:	b0 93 0d 02 	sts	0x020D, r27
			Kd = 0.2;
     9a8:	8d ec       	ldi	r24, 0xCD	; 205
     9aa:	9c ec       	ldi	r25, 0xCC	; 204
     9ac:	ac e4       	ldi	r26, 0x4C	; 76
     9ae:	be e3       	ldi	r27, 0x3E	; 62
     9b0:	80 93 06 02 	sts	0x0206, r24
     9b4:	90 93 07 02 	sts	0x0207, r25
     9b8:	a0 93 08 02 	sts	0x0208, r26
     9bc:	b0 93 09 02 	sts	0x0209, r27
			break;
     9c0:	08 95       	ret
			
		default: 
			Kp = 4;
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	a0 e8       	ldi	r26, 0x80	; 128
     9c8:	b0 e4       	ldi	r27, 0x40	; 64
     9ca:	80 93 0a 02 	sts	0x020A, r24
     9ce:	90 93 0b 02 	sts	0x020B, r25
     9d2:	a0 93 0c 02 	sts	0x020C, r26
     9d6:	b0 93 0d 02 	sts	0x020D, r27
			Kd = 0.0002;
     9da:	87 e1       	ldi	r24, 0x17	; 23
     9dc:	97 eb       	ldi	r25, 0xB7	; 183
     9de:	a1 e5       	ldi	r26, 0x51	; 81
     9e0:	b9 e3       	ldi	r27, 0x39	; 57
     9e2:	80 93 06 02 	sts	0x0206, r24
     9e6:	90 93 07 02 	sts	0x0207, r25
     9ea:	a0 93 08 02 	sts	0x0208, r26
     9ee:	b0 93 09 02 	sts	0x0209, r27
     9f2:	08 95       	ret

000009f4 <PWM_init>:
#include <avr/io.h>


void PWM_init(){
	//setting prescaler 64 to ensure that we can get a 20 ms period
	set_bit(TCCR1B,CS10);
     9f4:	e1 e8       	ldi	r30, 0x81	; 129
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	80 81       	ld	r24, Z
     9fa:	81 60       	ori	r24, 0x01	; 1
     9fc:	80 83       	st	Z, r24
	set_bit(TCCR1B,CS11);
     9fe:	80 81       	ld	r24, Z
     a00:	82 60       	ori	r24, 0x02	; 2
     a02:	80 83       	st	Z, r24
	clear_bit(TCCR1B,CS12);
     a04:	80 81       	ld	r24, Z
     a06:	8b 7f       	andi	r24, 0xFB	; 251
     a08:	80 83       	st	Z, r24
	//Setting the TOP value for TCNT equal to a period 
	ICR1 = (F_CPU/PRESCALER) * PERIOD;
     a0a:	88 e8       	ldi	r24, 0x88	; 136
     a0c:	93 e1       	ldi	r25, 0x13	; 19
     a0e:	90 93 87 00 	sts	0x0087, r25
     a12:	80 93 86 00 	sts	0x0086, r24
	set_bit(DDRB,PB5);
     a16:	25 9a       	sbi	0x04, 5	; 4
	}
	else if (ms > 2.1){
		ms = 2.1;
	}
	//setting duty-cycle
	OCR1A = (F_CPU/PRESCALER) * ms/1000; //
     a18:	87 e7       	ldi	r24, 0x77	; 119
     a1a:	91 e0       	ldi	r25, 0x01	; 1
     a1c:	90 93 89 00 	sts	0x0089, r25
     a20:	80 93 88 00 	sts	0x0088, r24
     a24:	08 95       	ret

00000a26 <PWM_set_pulse>:
	set_bit(DDRB,PB5);
	//setting initial pulse value to middle value
	PWM_set_pulse(1.5);
}

void PWM_set_pulse(float ms){
     a26:	cf 92       	push	r12
     a28:	df 92       	push	r13
     a2a:	ef 92       	push	r14
     a2c:	ff 92       	push	r15
     a2e:	6b 01       	movw	r12, r22
     a30:	7c 01       	movw	r14, r24
	if (ms < 0.9){
     a32:	26 e6       	ldi	r18, 0x66	; 102
     a34:	36 e6       	ldi	r19, 0x66	; 102
     a36:	46 e6       	ldi	r20, 0x66	; 102
     a38:	5f e3       	ldi	r21, 0x3F	; 63
     a3a:	c7 d1       	rcall	.+910    	; 0xdca <__cmpsf2>
     a3c:	88 23       	and	r24, r24
     a3e:	54 f0       	brlt	.+20     	; 0xa54 <PWM_set_pulse+0x2e>
		ms = 0.9;
	}
	else if (ms > 2.1){
     a40:	26 e6       	ldi	r18, 0x66	; 102
     a42:	36 e6       	ldi	r19, 0x66	; 102
     a44:	46 e0       	ldi	r20, 0x06	; 6
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	c7 01       	movw	r24, r14
     a4a:	b6 01       	movw	r22, r12
     a4c:	0d d3       	rcall	.+1562   	; 0x1068 <__gesf2>
     a4e:	18 16       	cp	r1, r24
     a50:	54 f0       	brlt	.+20     	; 0xa66 <PWM_set_pulse+0x40>
     a52:	12 c0       	rjmp	.+36     	; 0xa78 <PWM_set_pulse+0x52>
	PWM_set_pulse(1.5);
}

void PWM_set_pulse(float ms){
	if (ms < 0.9){
		ms = 0.9;
     a54:	0f 2e       	mov	r0, r31
     a56:	f6 e6       	ldi	r31, 0x66	; 102
     a58:	cf 2e       	mov	r12, r31
     a5a:	dc 2c       	mov	r13, r12
     a5c:	ec 2c       	mov	r14, r12
     a5e:	ff e3       	ldi	r31, 0x3F	; 63
     a60:	ff 2e       	mov	r15, r31
     a62:	f0 2d       	mov	r31, r0
     a64:	09 c0       	rjmp	.+18     	; 0xa78 <PWM_set_pulse+0x52>
	}
	else if (ms > 2.1){
		ms = 2.1;
     a66:	0f 2e       	mov	r0, r31
     a68:	f6 e6       	ldi	r31, 0x66	; 102
     a6a:	cf 2e       	mov	r12, r31
     a6c:	dc 2c       	mov	r13, r12
     a6e:	f6 e0       	ldi	r31, 0x06	; 6
     a70:	ef 2e       	mov	r14, r31
     a72:	f0 e4       	ldi	r31, 0x40	; 64
     a74:	ff 2e       	mov	r15, r31
     a76:	f0 2d       	mov	r31, r0
	}
	//setting duty-cycle
	OCR1A = (F_CPU/PRESCALER) * ms/1000; //
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	34 e2       	ldi	r19, 0x24	; 36
     a7c:	44 e7       	ldi	r20, 0x74	; 116
     a7e:	58 e4       	ldi	r21, 0x48	; 72
     a80:	c7 01       	movw	r24, r14
     a82:	b6 01       	movw	r22, r12
     a84:	f5 d2       	rcall	.+1514   	; 0x1070 <__mulsf3>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	4a e7       	ldi	r20, 0x7A	; 122
     a8c:	54 e4       	ldi	r21, 0x44	; 68
     a8e:	a1 d1       	rcall	.+834    	; 0xdd2 <__divsf3>
     a90:	0d d2       	rcall	.+1050   	; 0xeac <__fixunssfsi>
     a92:	70 93 89 00 	sts	0x0089, r23
     a96:	60 93 88 00 	sts	0x0088, r22
}
     a9a:	ff 90       	pop	r15
     a9c:	ef 90       	pop	r14
     a9e:	df 90       	pop	r13
     aa0:	cf 90       	pop	r12
     aa2:	08 95       	ret

00000aa4 <PWM_joystick_to_PWM>:

float PWM_joystick_to_PWM(uint8_t position){
	if (INVERTED){
		position = 255-position;
	}
	return (0.9 + (2.0/425)*position);
     aa4:	68 2f       	mov	r22, r24
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	2d d2       	rcall	.+1114   	; 0xf08 <__floatsisf>
     aae:	2d ec       	ldi	r18, 0xCD	; 205
     ab0:	33 e3       	ldi	r19, 0x33	; 51
     ab2:	4a e9       	ldi	r20, 0x9A	; 154
     ab4:	5b e3       	ldi	r21, 0x3B	; 59
     ab6:	dc d2       	rcall	.+1464   	; 0x1070 <__mulsf3>
     ab8:	26 e6       	ldi	r18, 0x66	; 102
     aba:	36 e6       	ldi	r19, 0x66	; 102
     abc:	46 e6       	ldi	r20, 0x66	; 102
     abe:	5f e3       	ldi	r21, 0x3F	; 63
     ac0:	20 c1       	rjmp	.+576    	; 0xd02 <__addsf3>
}
     ac2:	08 95       	ret

00000ac4 <solenoid_init>:
#include <util/delay.h>


void solenoid_init(){
	//enable PF1 as output for solenoid
	set_bit(DDRF,PF1);
     ac4:	81 9a       	sbi	0x10, 1	; 16
	clear_bit(PORTF,PF1);
     ac6:	89 98       	cbi	0x11, 1	; 17
     ac8:	08 95       	ret

00000aca <solenoid_hit>:
}

void solenoid_hit(uint8_t button_pressed, GAME_MODE game_difficulty){
	if (game_difficulty == EASY){
     aca:	61 11       	cpse	r22, r1
     acc:	10 c0       	rjmp	.+32     	; 0xaee <solenoid_hit+0x24>
		if (button_pressed){
     ace:	88 23       	and	r24, r24
     ad0:	61 f0       	breq	.+24     	; 0xaea <solenoid_hit+0x20>
			set_bit(PORTF,PF1);
     ad2:	89 9a       	sbi	0x11, 1	; 17
     ad4:	2f ef       	ldi	r18, 0xFF	; 255
     ad6:	86 e7       	ldi	r24, 0x76	; 118
     ad8:	91 e0       	ldi	r25, 0x01	; 1
     ada:	21 50       	subi	r18, 0x01	; 1
     adc:	80 40       	sbci	r24, 0x00	; 0
     ade:	90 40       	sbci	r25, 0x00	; 0
     ae0:	e1 f7       	brne	.-8      	; 0xada <solenoid_hit+0x10>
     ae2:	00 c0       	rjmp	.+0      	; 0xae4 <solenoid_hit+0x1a>
     ae4:	00 00       	nop
			_delay_ms(30);
			clear_bit(PORTF,PF1);
     ae6:	89 98       	cbi	0x11, 1	; 17
     ae8:	08 95       	ret
			
		}
		else if(!button_pressed){
			clear_bit(PORTF,PF1);
     aea:	89 98       	cbi	0x11, 1	; 17
     aec:	08 95       	ret
		}
	}
	else {
		if (button_pressed){
     aee:	88 23       	and	r24, r24
     af0:	11 f0       	breq	.+4      	; 0xaf6 <solenoid_hit+0x2c>
			set_bit(PORTF,PF1);
     af2:	89 9a       	sbi	0x11, 1	; 17
     af4:	08 95       	ret
		}
		else if (!button_pressed) {
			clear_bit(PORTF,PF1);
     af6:	89 98       	cbi	0x11, 1	; 17
     af8:	08 95       	ret

00000afa <SPI_MasterInit>:
#include "SPI.h"
void
SPI_MasterInit(void)
{
	/* Set MOSI, SCK, SS and I/O select as output */
	set_bit(DDRB,DDB2);
     afa:	22 9a       	sbi	0x04, 2	; 4
	set_bit(DDRB,DDB1);
     afc:	21 9a       	sbi	0x04, 1	; 4
	set_bit(DDRB,DDB0);
     afe:	20 9a       	sbi	0x04, 0	; 4
	set_bit(DDRB,DDB7);
     b00:	27 9a       	sbi	0x04, 7	; 4
	/* set MISO as input */
	clear_bit(DDRB,DDB3);
     b02:	23 98       	cbi	0x04, 3	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     b04:	81 e5       	ldi	r24, 0x51	; 81
     b06:	8c bd       	out	0x2c, r24	; 44
	// set I/O select (active high)
	set_bit(PORTB,PB7);
     b08:	2f 9a       	sbi	0x05, 7	; 5
     b0a:	08 95       	ret

00000b0c <SPI_MasterTransmit>:
	//set_bit(PORTB,PB0);
}
void SPI_MasterTransmit(uint8_t cData)
{
	/* Start transmission */
	SPDR = cData;
     b0c:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	loop_until_bit_is_set(SPSR,SPIF);
     b0e:	0d b4       	in	r0, 0x2d	; 45
     b10:	07 fe       	sbrs	r0, 7
     b12:	fd cf       	rjmp	.-6      	; 0xb0e <SPI_MasterTransmit+0x2>
     b14:	8f e9       	ldi	r24, 0x9F	; 159
     b16:	9f e0       	ldi	r25, 0x0F	; 15
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	f1 f7       	brne	.-4      	; 0xb18 <SPI_MasterTransmit+0xc>
     b1c:	00 c0       	rjmp	.+0      	; 0xb1e <SPI_MasterTransmit+0x12>
     b1e:	00 00       	nop
     b20:	08 95       	ret

00000b22 <SPI_MasterRecieve>:
	_delay_ms(1);
}
char SPI_MasterRecieve(void){
	SPDR = 0x00;
     b22:	1e bc       	out	0x2e, r1	; 46
	loop_until_bit_is_set(SPSR,SPIF);
     b24:	0d b4       	in	r0, 0x2d	; 45
     b26:	07 fe       	sbrs	r0, 7
     b28:	fd cf       	rjmp	.-6      	; 0xb24 <SPI_MasterRecieve+0x2>
     b2a:	8f e9       	ldi	r24, 0x9F	; 159
     b2c:	9f e0       	ldi	r25, 0x0F	; 15
     b2e:	01 97       	sbiw	r24, 0x01	; 1
     b30:	f1 f7       	brne	.-4      	; 0xb2e <SPI_MasterRecieve+0xc>
     b32:	00 c0       	rjmp	.+0      	; 0xb34 <SPI_MasterRecieve+0x12>
     b34:	00 00       	nop
	_delay_ms(1);
	return SPDR;
     b36:	8e b5       	in	r24, 0x2e	; 46
}
     b38:	08 95       	ret

00000b3a <SPI_slave_on>:
void SPI_slave_on(){
	clear_bit(PORTB,PB7);
     b3a:	2f 98       	cbi	0x05, 7	; 5
     b3c:	08 95       	ret

00000b3e <SPI_slave_off>:
}
void SPI_slave_off(){
	set_bit(PORTB,PB7);
     b3e:	2f 9a       	sbi	0x05, 7	; 5
     b40:	08 95       	ret

00000b42 <timer_init>:

#include <avr/io.h>

 void timer_init(){
	 //Setting fast-PWM
	 clear_bit(TCCR1A,WGM10);
     b42:	e0 e8       	ldi	r30, 0x80	; 128
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8e 7f       	andi	r24, 0xFE	; 254
     b4a:	80 83       	st	Z, r24
	 set_bit(TCCR1A,WGM11);
     b4c:	80 81       	ld	r24, Z
     b4e:	82 60       	ori	r24, 0x02	; 2
     b50:	80 83       	st	Z, r24
	 set_bit(TCCR1B,WGM12);
     b52:	a1 e8       	ldi	r26, 0x81	; 129
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	8c 91       	ld	r24, X
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24
	 set_bit(TCCR1B,WGM13); 
     b5c:	8c 91       	ld	r24, X
     b5e:	80 61       	ori	r24, 0x10	; 16
     b60:	8c 93       	st	X, r24
	 //Setting output compare. This is a flag that gets set high when TCNT and OCR is equal
	 clear_bit(TCCR1A,COM1A0);
     b62:	80 81       	ld	r24, Z
     b64:	8f 7b       	andi	r24, 0xBF	; 191
     b66:	80 83       	st	Z, r24
	 set_bit(TCCR1A,COM1A1); 
     b68:	80 81       	ld	r24, Z
     b6a:	80 68       	ori	r24, 0x80	; 128
     b6c:	80 83       	st	Z, r24
     b6e:	08 95       	ret

00000b70 <TWI_Master_Initialise>:
     b70:	8c e0       	ldi	r24, 0x0C	; 12
     b72:	80 93 b8 00 	sts	0x00B8, r24
     b76:	8f ef       	ldi	r24, 0xFF	; 255
     b78:	80 93 bb 00 	sts	0x00BB, r24
     b7c:	84 e0       	ldi	r24, 0x04	; 4
     b7e:	80 93 bc 00 	sts	0x00BC, r24
     b82:	08 95       	ret

00000b84 <TWI_Start_Transceiver_With_Data>:
     b84:	ec eb       	ldi	r30, 0xBC	; 188
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	20 81       	ld	r18, Z
     b8a:	20 fd       	sbrc	r18, 0
     b8c:	fd cf       	rjmp	.-6      	; 0xb88 <TWI_Start_Transceiver_With_Data+0x4>
     b8e:	60 93 e0 02 	sts	0x02E0, r22
     b92:	fc 01       	movw	r30, r24
     b94:	20 81       	ld	r18, Z
     b96:	20 93 e1 02 	sts	0x02E1, r18
     b9a:	20 fd       	sbrc	r18, 0
     b9c:	0c c0       	rjmp	.+24     	; 0xbb6 <TWI_Start_Transceiver_With_Data+0x32>
     b9e:	62 30       	cpi	r22, 0x02	; 2
     ba0:	50 f0       	brcs	.+20     	; 0xbb6 <TWI_Start_Transceiver_With_Data+0x32>
     ba2:	dc 01       	movw	r26, r24
     ba4:	11 96       	adiw	r26, 0x01	; 1
     ba6:	e2 ee       	ldi	r30, 0xE2	; 226
     ba8:	f2 e0       	ldi	r31, 0x02	; 2
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	9d 91       	ld	r25, X+
     bae:	91 93       	st	Z+, r25
     bb0:	8f 5f       	subi	r24, 0xFF	; 255
     bb2:	86 13       	cpse	r24, r22
     bb4:	fb cf       	rjmp	.-10     	; 0xbac <TWI_Start_Transceiver_With_Data+0x28>
     bb6:	10 92 df 02 	sts	0x02DF, r1
     bba:	88 ef       	ldi	r24, 0xF8	; 248
     bbc:	80 93 13 02 	sts	0x0213, r24
     bc0:	85 ea       	ldi	r24, 0xA5	; 165
     bc2:	80 93 bc 00 	sts	0x00BC, r24
     bc6:	08 95       	ret

00000bc8 <__vector_39>:
     bc8:	1f 92       	push	r1
     bca:	0f 92       	push	r0
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	0f 92       	push	r0
     bd0:	11 24       	eor	r1, r1
     bd2:	0b b6       	in	r0, 0x3b	; 59
     bd4:	0f 92       	push	r0
     bd6:	2f 93       	push	r18
     bd8:	3f 93       	push	r19
     bda:	8f 93       	push	r24
     bdc:	9f 93       	push	r25
     bde:	af 93       	push	r26
     be0:	bf 93       	push	r27
     be2:	ef 93       	push	r30
     be4:	ff 93       	push	r31
     be6:	80 91 b9 00 	lds	r24, 0x00B9
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	fc 01       	movw	r30, r24
     bee:	38 97       	sbiw	r30, 0x08	; 8
     bf0:	e1 35       	cpi	r30, 0x51	; 81
     bf2:	f1 05       	cpc	r31, r1
     bf4:	08 f0       	brcs	.+2      	; 0xbf8 <__vector_39+0x30>
     bf6:	55 c0       	rjmp	.+170    	; 0xca2 <__vector_39+0xda>
     bf8:	ee 58       	subi	r30, 0x8E	; 142
     bfa:	ff 4f       	sbci	r31, 0xFF	; 255
     bfc:	9c c2       	rjmp	.+1336   	; 0x1136 <__tablejump2__>
     bfe:	10 92 de 02 	sts	0x02DE, r1
     c02:	e0 91 de 02 	lds	r30, 0x02DE
     c06:	80 91 e0 02 	lds	r24, 0x02E0
     c0a:	e8 17       	cp	r30, r24
     c0c:	70 f4       	brcc	.+28     	; 0xc2a <__vector_39+0x62>
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	8e 0f       	add	r24, r30
     c12:	80 93 de 02 	sts	0x02DE, r24
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	ef 51       	subi	r30, 0x1F	; 31
     c1a:	fd 4f       	sbci	r31, 0xFD	; 253
     c1c:	80 81       	ld	r24, Z
     c1e:	80 93 bb 00 	sts	0x00BB, r24
     c22:	85 e8       	ldi	r24, 0x85	; 133
     c24:	80 93 bc 00 	sts	0x00BC, r24
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <__vector_39+0xe8>
     c2a:	80 91 df 02 	lds	r24, 0x02DF
     c2e:	81 60       	ori	r24, 0x01	; 1
     c30:	80 93 df 02 	sts	0x02DF, r24
     c34:	84 e9       	ldi	r24, 0x94	; 148
     c36:	80 93 bc 00 	sts	0x00BC, r24
     c3a:	3a c0       	rjmp	.+116    	; 0xcb0 <__vector_39+0xe8>
     c3c:	e0 91 de 02 	lds	r30, 0x02DE
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	8e 0f       	add	r24, r30
     c44:	80 93 de 02 	sts	0x02DE, r24
     c48:	80 91 bb 00 	lds	r24, 0x00BB
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	ef 51       	subi	r30, 0x1F	; 31
     c50:	fd 4f       	sbci	r31, 0xFD	; 253
     c52:	80 83       	st	Z, r24
     c54:	20 91 de 02 	lds	r18, 0x02DE
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	80 91 e0 02 	lds	r24, 0x02E0
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	28 17       	cp	r18, r24
     c64:	39 07       	cpc	r19, r25
     c66:	24 f4       	brge	.+8      	; 0xc70 <__vector_39+0xa8>
     c68:	85 ec       	ldi	r24, 0xC5	; 197
     c6a:	80 93 bc 00 	sts	0x00BC, r24
     c6e:	20 c0       	rjmp	.+64     	; 0xcb0 <__vector_39+0xe8>
     c70:	85 e8       	ldi	r24, 0x85	; 133
     c72:	80 93 bc 00 	sts	0x00BC, r24
     c76:	1c c0       	rjmp	.+56     	; 0xcb0 <__vector_39+0xe8>
     c78:	80 91 bb 00 	lds	r24, 0x00BB
     c7c:	e0 91 de 02 	lds	r30, 0x02DE
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	ef 51       	subi	r30, 0x1F	; 31
     c84:	fd 4f       	sbci	r31, 0xFD	; 253
     c86:	80 83       	st	Z, r24
     c88:	80 91 df 02 	lds	r24, 0x02DF
     c8c:	81 60       	ori	r24, 0x01	; 1
     c8e:	80 93 df 02 	sts	0x02DF, r24
     c92:	84 e9       	ldi	r24, 0x94	; 148
     c94:	80 93 bc 00 	sts	0x00BC, r24
     c98:	0b c0       	rjmp	.+22     	; 0xcb0 <__vector_39+0xe8>
     c9a:	85 ea       	ldi	r24, 0xA5	; 165
     c9c:	80 93 bc 00 	sts	0x00BC, r24
     ca0:	07 c0       	rjmp	.+14     	; 0xcb0 <__vector_39+0xe8>
     ca2:	80 91 b9 00 	lds	r24, 0x00B9
     ca6:	80 93 13 02 	sts	0x0213, r24
     caa:	84 e0       	ldi	r24, 0x04	; 4
     cac:	80 93 bc 00 	sts	0x00BC, r24
     cb0:	ff 91       	pop	r31
     cb2:	ef 91       	pop	r30
     cb4:	bf 91       	pop	r27
     cb6:	af 91       	pop	r26
     cb8:	9f 91       	pop	r25
     cba:	8f 91       	pop	r24
     cbc:	3f 91       	pop	r19
     cbe:	2f 91       	pop	r18
     cc0:	0f 90       	pop	r0
     cc2:	0b be       	out	0x3b, r0	; 59
     cc4:	0f 90       	pop	r0
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	0f 90       	pop	r0
     cca:	1f 90       	pop	r1
     ccc:	18 95       	reti

00000cce <uart_send>:
	while ( !(UCSR0A & (1 << RXC0))){
		; //checking the receive complete (RXC) flag in the control-register. 
	}
	//Get and return received data from buffer
	return UDR0;
}
     cce:	e0 ec       	ldi	r30, 0xC0	; 192
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	90 81       	ld	r25, Z
     cd4:	95 ff       	sbrs	r25, 5
     cd6:	fd cf       	rjmp	.-6      	; 0xcd2 <uart_send+0x4>
     cd8:	80 93 c6 00 	sts	0x00C6, r24
     cdc:	08 95       	ret

00000cde <uart_init>:

static FILE uart_io = FDEV_SETUP_STREAM(uart_send, uart_read, _FDEV_SETUP_RW);

void uart_init(void){
	
	UBRR0H = (unsigned char)((MYUBRR)>>8);
     cde:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char) MYUBRR; 
     ce2:	87 e6       	ldi	r24, 0x67	; 103
     ce4:	80 93 c4 00 	sts	0x00C4, r24
	/* enable receiver (RDX0) and transmitter (TXD0) */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0); 
     ce8:	88 e1       	ldi	r24, 0x18	; 24
     cea:	80 93 c1 00 	sts	0x00C1, r24
	/* frame format set to 8data, 2stop bit */
	UCSR0C =  (3 << UCSZ00) | (1 << USBS0);
     cee:	8e e0       	ldi	r24, 0x0E	; 14
     cf0:	80 93 c2 00 	sts	0x00C2, r24
	
	fdevopen(uart_send, NULL);
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	87 e6       	ldi	r24, 0x67	; 103
     cfa:	96 e0       	ldi	r25, 0x06	; 6
     cfc:	22 c2       	rjmp	.+1092   	; 0x1142 <fdevopen>
     cfe:	08 95       	ret

00000d00 <__subsf3>:
     d00:	50 58       	subi	r21, 0x80	; 128

00000d02 <__addsf3>:
     d02:	bb 27       	eor	r27, r27
     d04:	aa 27       	eor	r26, r26
     d06:	0e d0       	rcall	.+28     	; 0xd24 <__addsf3x>
     d08:	75 c1       	rjmp	.+746    	; 0xff4 <__fp_round>
     d0a:	66 d1       	rcall	.+716    	; 0xfd8 <__fp_pscA>
     d0c:	30 f0       	brcs	.+12     	; 0xd1a <__addsf3+0x18>
     d0e:	6b d1       	rcall	.+726    	; 0xfe6 <__fp_pscB>
     d10:	20 f0       	brcs	.+8      	; 0xd1a <__addsf3+0x18>
     d12:	31 f4       	brne	.+12     	; 0xd20 <__addsf3+0x1e>
     d14:	9f 3f       	cpi	r25, 0xFF	; 255
     d16:	11 f4       	brne	.+4      	; 0xd1c <__addsf3+0x1a>
     d18:	1e f4       	brtc	.+6      	; 0xd20 <__addsf3+0x1e>
     d1a:	5b c1       	rjmp	.+694    	; 0xfd2 <__fp_nan>
     d1c:	0e f4       	brtc	.+2      	; 0xd20 <__addsf3+0x1e>
     d1e:	e0 95       	com	r30
     d20:	e7 fb       	bst	r30, 7
     d22:	51 c1       	rjmp	.+674    	; 0xfc6 <__fp_inf>

00000d24 <__addsf3x>:
     d24:	e9 2f       	mov	r30, r25
     d26:	77 d1       	rcall	.+750    	; 0x1016 <__fp_split3>
     d28:	80 f3       	brcs	.-32     	; 0xd0a <__addsf3+0x8>
     d2a:	ba 17       	cp	r27, r26
     d2c:	62 07       	cpc	r22, r18
     d2e:	73 07       	cpc	r23, r19
     d30:	84 07       	cpc	r24, r20
     d32:	95 07       	cpc	r25, r21
     d34:	18 f0       	brcs	.+6      	; 0xd3c <__addsf3x+0x18>
     d36:	71 f4       	brne	.+28     	; 0xd54 <__addsf3x+0x30>
     d38:	9e f5       	brtc	.+102    	; 0xda0 <__addsf3x+0x7c>
     d3a:	8f c1       	rjmp	.+798    	; 0x105a <__fp_zero>
     d3c:	0e f4       	brtc	.+2      	; 0xd40 <__addsf3x+0x1c>
     d3e:	e0 95       	com	r30
     d40:	0b 2e       	mov	r0, r27
     d42:	ba 2f       	mov	r27, r26
     d44:	a0 2d       	mov	r26, r0
     d46:	0b 01       	movw	r0, r22
     d48:	b9 01       	movw	r22, r18
     d4a:	90 01       	movw	r18, r0
     d4c:	0c 01       	movw	r0, r24
     d4e:	ca 01       	movw	r24, r20
     d50:	a0 01       	movw	r20, r0
     d52:	11 24       	eor	r1, r1
     d54:	ff 27       	eor	r31, r31
     d56:	59 1b       	sub	r21, r25
     d58:	99 f0       	breq	.+38     	; 0xd80 <__addsf3x+0x5c>
     d5a:	59 3f       	cpi	r21, 0xF9	; 249
     d5c:	50 f4       	brcc	.+20     	; 0xd72 <__addsf3x+0x4e>
     d5e:	50 3e       	cpi	r21, 0xE0	; 224
     d60:	68 f1       	brcs	.+90     	; 0xdbc <__addsf3x+0x98>
     d62:	1a 16       	cp	r1, r26
     d64:	f0 40       	sbci	r31, 0x00	; 0
     d66:	a2 2f       	mov	r26, r18
     d68:	23 2f       	mov	r18, r19
     d6a:	34 2f       	mov	r19, r20
     d6c:	44 27       	eor	r20, r20
     d6e:	58 5f       	subi	r21, 0xF8	; 248
     d70:	f3 cf       	rjmp	.-26     	; 0xd58 <__addsf3x+0x34>
     d72:	46 95       	lsr	r20
     d74:	37 95       	ror	r19
     d76:	27 95       	ror	r18
     d78:	a7 95       	ror	r26
     d7a:	f0 40       	sbci	r31, 0x00	; 0
     d7c:	53 95       	inc	r21
     d7e:	c9 f7       	brne	.-14     	; 0xd72 <__addsf3x+0x4e>
     d80:	7e f4       	brtc	.+30     	; 0xda0 <__addsf3x+0x7c>
     d82:	1f 16       	cp	r1, r31
     d84:	ba 0b       	sbc	r27, r26
     d86:	62 0b       	sbc	r22, r18
     d88:	73 0b       	sbc	r23, r19
     d8a:	84 0b       	sbc	r24, r20
     d8c:	ba f0       	brmi	.+46     	; 0xdbc <__addsf3x+0x98>
     d8e:	91 50       	subi	r25, 0x01	; 1
     d90:	a1 f0       	breq	.+40     	; 0xdba <__addsf3x+0x96>
     d92:	ff 0f       	add	r31, r31
     d94:	bb 1f       	adc	r27, r27
     d96:	66 1f       	adc	r22, r22
     d98:	77 1f       	adc	r23, r23
     d9a:	88 1f       	adc	r24, r24
     d9c:	c2 f7       	brpl	.-16     	; 0xd8e <__addsf3x+0x6a>
     d9e:	0e c0       	rjmp	.+28     	; 0xdbc <__addsf3x+0x98>
     da0:	ba 0f       	add	r27, r26
     da2:	62 1f       	adc	r22, r18
     da4:	73 1f       	adc	r23, r19
     da6:	84 1f       	adc	r24, r20
     da8:	48 f4       	brcc	.+18     	; 0xdbc <__addsf3x+0x98>
     daa:	87 95       	ror	r24
     dac:	77 95       	ror	r23
     dae:	67 95       	ror	r22
     db0:	b7 95       	ror	r27
     db2:	f7 95       	ror	r31
     db4:	9e 3f       	cpi	r25, 0xFE	; 254
     db6:	08 f0       	brcs	.+2      	; 0xdba <__addsf3x+0x96>
     db8:	b3 cf       	rjmp	.-154    	; 0xd20 <__addsf3+0x1e>
     dba:	93 95       	inc	r25
     dbc:	88 0f       	add	r24, r24
     dbe:	08 f0       	brcs	.+2      	; 0xdc2 <__addsf3x+0x9e>
     dc0:	99 27       	eor	r25, r25
     dc2:	ee 0f       	add	r30, r30
     dc4:	97 95       	ror	r25
     dc6:	87 95       	ror	r24
     dc8:	08 95       	ret

00000dca <__cmpsf2>:
     dca:	d9 d0       	rcall	.+434    	; 0xf7e <__fp_cmp>
     dcc:	08 f4       	brcc	.+2      	; 0xdd0 <__cmpsf2+0x6>
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	08 95       	ret

00000dd2 <__divsf3>:
     dd2:	0c d0       	rcall	.+24     	; 0xdec <__divsf3x>
     dd4:	0f c1       	rjmp	.+542    	; 0xff4 <__fp_round>
     dd6:	07 d1       	rcall	.+526    	; 0xfe6 <__fp_pscB>
     dd8:	40 f0       	brcs	.+16     	; 0xdea <__divsf3+0x18>
     dda:	fe d0       	rcall	.+508    	; 0xfd8 <__fp_pscA>
     ddc:	30 f0       	brcs	.+12     	; 0xdea <__divsf3+0x18>
     dde:	21 f4       	brne	.+8      	; 0xde8 <__divsf3+0x16>
     de0:	5f 3f       	cpi	r21, 0xFF	; 255
     de2:	19 f0       	breq	.+6      	; 0xdea <__divsf3+0x18>
     de4:	f0 c0       	rjmp	.+480    	; 0xfc6 <__fp_inf>
     de6:	51 11       	cpse	r21, r1
     de8:	39 c1       	rjmp	.+626    	; 0x105c <__fp_szero>
     dea:	f3 c0       	rjmp	.+486    	; 0xfd2 <__fp_nan>

00000dec <__divsf3x>:
     dec:	14 d1       	rcall	.+552    	; 0x1016 <__fp_split3>
     dee:	98 f3       	brcs	.-26     	; 0xdd6 <__divsf3+0x4>

00000df0 <__divsf3_pse>:
     df0:	99 23       	and	r25, r25
     df2:	c9 f3       	breq	.-14     	; 0xde6 <__divsf3+0x14>
     df4:	55 23       	and	r21, r21
     df6:	b1 f3       	breq	.-20     	; 0xde4 <__divsf3+0x12>
     df8:	95 1b       	sub	r25, r21
     dfa:	55 0b       	sbc	r21, r21
     dfc:	bb 27       	eor	r27, r27
     dfe:	aa 27       	eor	r26, r26
     e00:	62 17       	cp	r22, r18
     e02:	73 07       	cpc	r23, r19
     e04:	84 07       	cpc	r24, r20
     e06:	38 f0       	brcs	.+14     	; 0xe16 <__divsf3_pse+0x26>
     e08:	9f 5f       	subi	r25, 0xFF	; 255
     e0a:	5f 4f       	sbci	r21, 0xFF	; 255
     e0c:	22 0f       	add	r18, r18
     e0e:	33 1f       	adc	r19, r19
     e10:	44 1f       	adc	r20, r20
     e12:	aa 1f       	adc	r26, r26
     e14:	a9 f3       	breq	.-22     	; 0xe00 <__divsf3_pse+0x10>
     e16:	33 d0       	rcall	.+102    	; 0xe7e <__divsf3_pse+0x8e>
     e18:	0e 2e       	mov	r0, r30
     e1a:	3a f0       	brmi	.+14     	; 0xe2a <__divsf3_pse+0x3a>
     e1c:	e0 e8       	ldi	r30, 0x80	; 128
     e1e:	30 d0       	rcall	.+96     	; 0xe80 <__divsf3_pse+0x90>
     e20:	91 50       	subi	r25, 0x01	; 1
     e22:	50 40       	sbci	r21, 0x00	; 0
     e24:	e6 95       	lsr	r30
     e26:	00 1c       	adc	r0, r0
     e28:	ca f7       	brpl	.-14     	; 0xe1c <__divsf3_pse+0x2c>
     e2a:	29 d0       	rcall	.+82     	; 0xe7e <__divsf3_pse+0x8e>
     e2c:	fe 2f       	mov	r31, r30
     e2e:	27 d0       	rcall	.+78     	; 0xe7e <__divsf3_pse+0x8e>
     e30:	66 0f       	add	r22, r22
     e32:	77 1f       	adc	r23, r23
     e34:	88 1f       	adc	r24, r24
     e36:	bb 1f       	adc	r27, r27
     e38:	26 17       	cp	r18, r22
     e3a:	37 07       	cpc	r19, r23
     e3c:	48 07       	cpc	r20, r24
     e3e:	ab 07       	cpc	r26, r27
     e40:	b0 e8       	ldi	r27, 0x80	; 128
     e42:	09 f0       	breq	.+2      	; 0xe46 <__divsf3_pse+0x56>
     e44:	bb 0b       	sbc	r27, r27
     e46:	80 2d       	mov	r24, r0
     e48:	bf 01       	movw	r22, r30
     e4a:	ff 27       	eor	r31, r31
     e4c:	93 58       	subi	r25, 0x83	; 131
     e4e:	5f 4f       	sbci	r21, 0xFF	; 255
     e50:	2a f0       	brmi	.+10     	; 0xe5c <__divsf3_pse+0x6c>
     e52:	9e 3f       	cpi	r25, 0xFE	; 254
     e54:	51 05       	cpc	r21, r1
     e56:	68 f0       	brcs	.+26     	; 0xe72 <__divsf3_pse+0x82>
     e58:	b6 c0       	rjmp	.+364    	; 0xfc6 <__fp_inf>
     e5a:	00 c1       	rjmp	.+512    	; 0x105c <__fp_szero>
     e5c:	5f 3f       	cpi	r21, 0xFF	; 255
     e5e:	ec f3       	brlt	.-6      	; 0xe5a <__divsf3_pse+0x6a>
     e60:	98 3e       	cpi	r25, 0xE8	; 232
     e62:	dc f3       	brlt	.-10     	; 0xe5a <__divsf3_pse+0x6a>
     e64:	86 95       	lsr	r24
     e66:	77 95       	ror	r23
     e68:	67 95       	ror	r22
     e6a:	b7 95       	ror	r27
     e6c:	f7 95       	ror	r31
     e6e:	9f 5f       	subi	r25, 0xFF	; 255
     e70:	c9 f7       	brne	.-14     	; 0xe64 <__divsf3_pse+0x74>
     e72:	88 0f       	add	r24, r24
     e74:	91 1d       	adc	r25, r1
     e76:	96 95       	lsr	r25
     e78:	87 95       	ror	r24
     e7a:	97 f9       	bld	r25, 7
     e7c:	08 95       	ret
     e7e:	e1 e0       	ldi	r30, 0x01	; 1
     e80:	66 0f       	add	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	88 1f       	adc	r24, r24
     e86:	bb 1f       	adc	r27, r27
     e88:	62 17       	cp	r22, r18
     e8a:	73 07       	cpc	r23, r19
     e8c:	84 07       	cpc	r24, r20
     e8e:	ba 07       	cpc	r27, r26
     e90:	20 f0       	brcs	.+8      	; 0xe9a <__divsf3_pse+0xaa>
     e92:	62 1b       	sub	r22, r18
     e94:	73 0b       	sbc	r23, r19
     e96:	84 0b       	sbc	r24, r20
     e98:	ba 0b       	sbc	r27, r26
     e9a:	ee 1f       	adc	r30, r30
     e9c:	88 f7       	brcc	.-30     	; 0xe80 <__divsf3_pse+0x90>
     e9e:	e0 95       	com	r30
     ea0:	08 95       	ret

00000ea2 <__fixsfsi>:
     ea2:	04 d0       	rcall	.+8      	; 0xeac <__fixunssfsi>
     ea4:	68 94       	set
     ea6:	b1 11       	cpse	r27, r1
     ea8:	d9 c0       	rjmp	.+434    	; 0x105c <__fp_szero>
     eaa:	08 95       	ret

00000eac <__fixunssfsi>:
     eac:	bc d0       	rcall	.+376    	; 0x1026 <__fp_splitA>
     eae:	88 f0       	brcs	.+34     	; 0xed2 <__fixunssfsi+0x26>
     eb0:	9f 57       	subi	r25, 0x7F	; 127
     eb2:	90 f0       	brcs	.+36     	; 0xed8 <__fixunssfsi+0x2c>
     eb4:	b9 2f       	mov	r27, r25
     eb6:	99 27       	eor	r25, r25
     eb8:	b7 51       	subi	r27, 0x17	; 23
     eba:	a0 f0       	brcs	.+40     	; 0xee4 <__fixunssfsi+0x38>
     ebc:	d1 f0       	breq	.+52     	; 0xef2 <__fixunssfsi+0x46>
     ebe:	66 0f       	add	r22, r22
     ec0:	77 1f       	adc	r23, r23
     ec2:	88 1f       	adc	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	1a f0       	brmi	.+6      	; 0xece <__fixunssfsi+0x22>
     ec8:	ba 95       	dec	r27
     eca:	c9 f7       	brne	.-14     	; 0xebe <__fixunssfsi+0x12>
     ecc:	12 c0       	rjmp	.+36     	; 0xef2 <__fixunssfsi+0x46>
     ece:	b1 30       	cpi	r27, 0x01	; 1
     ed0:	81 f0       	breq	.+32     	; 0xef2 <__fixunssfsi+0x46>
     ed2:	c3 d0       	rcall	.+390    	; 0x105a <__fp_zero>
     ed4:	b1 e0       	ldi	r27, 0x01	; 1
     ed6:	08 95       	ret
     ed8:	c0 c0       	rjmp	.+384    	; 0x105a <__fp_zero>
     eda:	67 2f       	mov	r22, r23
     edc:	78 2f       	mov	r23, r24
     ede:	88 27       	eor	r24, r24
     ee0:	b8 5f       	subi	r27, 0xF8	; 248
     ee2:	39 f0       	breq	.+14     	; 0xef2 <__fixunssfsi+0x46>
     ee4:	b9 3f       	cpi	r27, 0xF9	; 249
     ee6:	cc f3       	brlt	.-14     	; 0xeda <__fixunssfsi+0x2e>
     ee8:	86 95       	lsr	r24
     eea:	77 95       	ror	r23
     eec:	67 95       	ror	r22
     eee:	b3 95       	inc	r27
     ef0:	d9 f7       	brne	.-10     	; 0xee8 <__fixunssfsi+0x3c>
     ef2:	3e f4       	brtc	.+14     	; 0xf02 <__fixunssfsi+0x56>
     ef4:	90 95       	com	r25
     ef6:	80 95       	com	r24
     ef8:	70 95       	com	r23
     efa:	61 95       	neg	r22
     efc:	7f 4f       	sbci	r23, 0xFF	; 255
     efe:	8f 4f       	sbci	r24, 0xFF	; 255
     f00:	9f 4f       	sbci	r25, 0xFF	; 255
     f02:	08 95       	ret

00000f04 <__floatunsisf>:
     f04:	e8 94       	clt
     f06:	09 c0       	rjmp	.+18     	; 0xf1a <__floatsisf+0x12>

00000f08 <__floatsisf>:
     f08:	97 fb       	bst	r25, 7
     f0a:	3e f4       	brtc	.+14     	; 0xf1a <__floatsisf+0x12>
     f0c:	90 95       	com	r25
     f0e:	80 95       	com	r24
     f10:	70 95       	com	r23
     f12:	61 95       	neg	r22
     f14:	7f 4f       	sbci	r23, 0xFF	; 255
     f16:	8f 4f       	sbci	r24, 0xFF	; 255
     f18:	9f 4f       	sbci	r25, 0xFF	; 255
     f1a:	99 23       	and	r25, r25
     f1c:	a9 f0       	breq	.+42     	; 0xf48 <__floatsisf+0x40>
     f1e:	f9 2f       	mov	r31, r25
     f20:	96 e9       	ldi	r25, 0x96	; 150
     f22:	bb 27       	eor	r27, r27
     f24:	93 95       	inc	r25
     f26:	f6 95       	lsr	r31
     f28:	87 95       	ror	r24
     f2a:	77 95       	ror	r23
     f2c:	67 95       	ror	r22
     f2e:	b7 95       	ror	r27
     f30:	f1 11       	cpse	r31, r1
     f32:	f8 cf       	rjmp	.-16     	; 0xf24 <__floatsisf+0x1c>
     f34:	fa f4       	brpl	.+62     	; 0xf74 <__floatsisf+0x6c>
     f36:	bb 0f       	add	r27, r27
     f38:	11 f4       	brne	.+4      	; 0xf3e <__floatsisf+0x36>
     f3a:	60 ff       	sbrs	r22, 0
     f3c:	1b c0       	rjmp	.+54     	; 0xf74 <__floatsisf+0x6c>
     f3e:	6f 5f       	subi	r22, 0xFF	; 255
     f40:	7f 4f       	sbci	r23, 0xFF	; 255
     f42:	8f 4f       	sbci	r24, 0xFF	; 255
     f44:	9f 4f       	sbci	r25, 0xFF	; 255
     f46:	16 c0       	rjmp	.+44     	; 0xf74 <__floatsisf+0x6c>
     f48:	88 23       	and	r24, r24
     f4a:	11 f0       	breq	.+4      	; 0xf50 <__floatsisf+0x48>
     f4c:	96 e9       	ldi	r25, 0x96	; 150
     f4e:	11 c0       	rjmp	.+34     	; 0xf72 <__floatsisf+0x6a>
     f50:	77 23       	and	r23, r23
     f52:	21 f0       	breq	.+8      	; 0xf5c <__floatsisf+0x54>
     f54:	9e e8       	ldi	r25, 0x8E	; 142
     f56:	87 2f       	mov	r24, r23
     f58:	76 2f       	mov	r23, r22
     f5a:	05 c0       	rjmp	.+10     	; 0xf66 <__floatsisf+0x5e>
     f5c:	66 23       	and	r22, r22
     f5e:	71 f0       	breq	.+28     	; 0xf7c <__floatsisf+0x74>
     f60:	96 e8       	ldi	r25, 0x86	; 134
     f62:	86 2f       	mov	r24, r22
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	2a f0       	brmi	.+10     	; 0xf74 <__floatsisf+0x6c>
     f6a:	9a 95       	dec	r25
     f6c:	66 0f       	add	r22, r22
     f6e:	77 1f       	adc	r23, r23
     f70:	88 1f       	adc	r24, r24
     f72:	da f7       	brpl	.-10     	; 0xf6a <__floatsisf+0x62>
     f74:	88 0f       	add	r24, r24
     f76:	96 95       	lsr	r25
     f78:	87 95       	ror	r24
     f7a:	97 f9       	bld	r25, 7
     f7c:	08 95       	ret

00000f7e <__fp_cmp>:
     f7e:	99 0f       	add	r25, r25
     f80:	00 08       	sbc	r0, r0
     f82:	55 0f       	add	r21, r21
     f84:	aa 0b       	sbc	r26, r26
     f86:	e0 e8       	ldi	r30, 0x80	; 128
     f88:	fe ef       	ldi	r31, 0xFE	; 254
     f8a:	16 16       	cp	r1, r22
     f8c:	17 06       	cpc	r1, r23
     f8e:	e8 07       	cpc	r30, r24
     f90:	f9 07       	cpc	r31, r25
     f92:	c0 f0       	brcs	.+48     	; 0xfc4 <__fp_cmp+0x46>
     f94:	12 16       	cp	r1, r18
     f96:	13 06       	cpc	r1, r19
     f98:	e4 07       	cpc	r30, r20
     f9a:	f5 07       	cpc	r31, r21
     f9c:	98 f0       	brcs	.+38     	; 0xfc4 <__fp_cmp+0x46>
     f9e:	62 1b       	sub	r22, r18
     fa0:	73 0b       	sbc	r23, r19
     fa2:	84 0b       	sbc	r24, r20
     fa4:	95 0b       	sbc	r25, r21
     fa6:	39 f4       	brne	.+14     	; 0xfb6 <__fp_cmp+0x38>
     fa8:	0a 26       	eor	r0, r26
     faa:	61 f0       	breq	.+24     	; 0xfc4 <__fp_cmp+0x46>
     fac:	23 2b       	or	r18, r19
     fae:	24 2b       	or	r18, r20
     fb0:	25 2b       	or	r18, r21
     fb2:	21 f4       	brne	.+8      	; 0xfbc <__fp_cmp+0x3e>
     fb4:	08 95       	ret
     fb6:	0a 26       	eor	r0, r26
     fb8:	09 f4       	brne	.+2      	; 0xfbc <__fp_cmp+0x3e>
     fba:	a1 40       	sbci	r26, 0x01	; 1
     fbc:	a6 95       	lsr	r26
     fbe:	8f ef       	ldi	r24, 0xFF	; 255
     fc0:	81 1d       	adc	r24, r1
     fc2:	81 1d       	adc	r24, r1
     fc4:	08 95       	ret

00000fc6 <__fp_inf>:
     fc6:	97 f9       	bld	r25, 7
     fc8:	9f 67       	ori	r25, 0x7F	; 127
     fca:	80 e8       	ldi	r24, 0x80	; 128
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	08 95       	ret

00000fd2 <__fp_nan>:
     fd2:	9f ef       	ldi	r25, 0xFF	; 255
     fd4:	80 ec       	ldi	r24, 0xC0	; 192
     fd6:	08 95       	ret

00000fd8 <__fp_pscA>:
     fd8:	00 24       	eor	r0, r0
     fda:	0a 94       	dec	r0
     fdc:	16 16       	cp	r1, r22
     fde:	17 06       	cpc	r1, r23
     fe0:	18 06       	cpc	r1, r24
     fe2:	09 06       	cpc	r0, r25
     fe4:	08 95       	ret

00000fe6 <__fp_pscB>:
     fe6:	00 24       	eor	r0, r0
     fe8:	0a 94       	dec	r0
     fea:	12 16       	cp	r1, r18
     fec:	13 06       	cpc	r1, r19
     fee:	14 06       	cpc	r1, r20
     ff0:	05 06       	cpc	r0, r21
     ff2:	08 95       	ret

00000ff4 <__fp_round>:
     ff4:	09 2e       	mov	r0, r25
     ff6:	03 94       	inc	r0
     ff8:	00 0c       	add	r0, r0
     ffa:	11 f4       	brne	.+4      	; 0x1000 <__fp_round+0xc>
     ffc:	88 23       	and	r24, r24
     ffe:	52 f0       	brmi	.+20     	; 0x1014 <__fp_round+0x20>
    1000:	bb 0f       	add	r27, r27
    1002:	40 f4       	brcc	.+16     	; 0x1014 <__fp_round+0x20>
    1004:	bf 2b       	or	r27, r31
    1006:	11 f4       	brne	.+4      	; 0x100c <__fp_round+0x18>
    1008:	60 ff       	sbrs	r22, 0
    100a:	04 c0       	rjmp	.+8      	; 0x1014 <__fp_round+0x20>
    100c:	6f 5f       	subi	r22, 0xFF	; 255
    100e:	7f 4f       	sbci	r23, 0xFF	; 255
    1010:	8f 4f       	sbci	r24, 0xFF	; 255
    1012:	9f 4f       	sbci	r25, 0xFF	; 255
    1014:	08 95       	ret

00001016 <__fp_split3>:
    1016:	57 fd       	sbrc	r21, 7
    1018:	90 58       	subi	r25, 0x80	; 128
    101a:	44 0f       	add	r20, r20
    101c:	55 1f       	adc	r21, r21
    101e:	59 f0       	breq	.+22     	; 0x1036 <__fp_splitA+0x10>
    1020:	5f 3f       	cpi	r21, 0xFF	; 255
    1022:	71 f0       	breq	.+28     	; 0x1040 <__fp_splitA+0x1a>
    1024:	47 95       	ror	r20

00001026 <__fp_splitA>:
    1026:	88 0f       	add	r24, r24
    1028:	97 fb       	bst	r25, 7
    102a:	99 1f       	adc	r25, r25
    102c:	61 f0       	breq	.+24     	; 0x1046 <__fp_splitA+0x20>
    102e:	9f 3f       	cpi	r25, 0xFF	; 255
    1030:	79 f0       	breq	.+30     	; 0x1050 <__fp_splitA+0x2a>
    1032:	87 95       	ror	r24
    1034:	08 95       	ret
    1036:	12 16       	cp	r1, r18
    1038:	13 06       	cpc	r1, r19
    103a:	14 06       	cpc	r1, r20
    103c:	55 1f       	adc	r21, r21
    103e:	f2 cf       	rjmp	.-28     	; 0x1024 <__fp_split3+0xe>
    1040:	46 95       	lsr	r20
    1042:	f1 df       	rcall	.-30     	; 0x1026 <__fp_splitA>
    1044:	08 c0       	rjmp	.+16     	; 0x1056 <__fp_splitA+0x30>
    1046:	16 16       	cp	r1, r22
    1048:	17 06       	cpc	r1, r23
    104a:	18 06       	cpc	r1, r24
    104c:	99 1f       	adc	r25, r25
    104e:	f1 cf       	rjmp	.-30     	; 0x1032 <__fp_splitA+0xc>
    1050:	86 95       	lsr	r24
    1052:	71 05       	cpc	r23, r1
    1054:	61 05       	cpc	r22, r1
    1056:	08 94       	sec
    1058:	08 95       	ret

0000105a <__fp_zero>:
    105a:	e8 94       	clt

0000105c <__fp_szero>:
    105c:	bb 27       	eor	r27, r27
    105e:	66 27       	eor	r22, r22
    1060:	77 27       	eor	r23, r23
    1062:	cb 01       	movw	r24, r22
    1064:	97 f9       	bld	r25, 7
    1066:	08 95       	ret

00001068 <__gesf2>:
    1068:	8a df       	rcall	.-236    	; 0xf7e <__fp_cmp>
    106a:	08 f4       	brcc	.+2      	; 0x106e <__gesf2+0x6>
    106c:	8f ef       	ldi	r24, 0xFF	; 255
    106e:	08 95       	ret

00001070 <__mulsf3>:
    1070:	0b d0       	rcall	.+22     	; 0x1088 <__mulsf3x>
    1072:	c0 cf       	rjmp	.-128    	; 0xff4 <__fp_round>
    1074:	b1 df       	rcall	.-158    	; 0xfd8 <__fp_pscA>
    1076:	28 f0       	brcs	.+10     	; 0x1082 <__mulsf3+0x12>
    1078:	b6 df       	rcall	.-148    	; 0xfe6 <__fp_pscB>
    107a:	18 f0       	brcs	.+6      	; 0x1082 <__mulsf3+0x12>
    107c:	95 23       	and	r25, r21
    107e:	09 f0       	breq	.+2      	; 0x1082 <__mulsf3+0x12>
    1080:	a2 cf       	rjmp	.-188    	; 0xfc6 <__fp_inf>
    1082:	a7 cf       	rjmp	.-178    	; 0xfd2 <__fp_nan>
    1084:	11 24       	eor	r1, r1
    1086:	ea cf       	rjmp	.-44     	; 0x105c <__fp_szero>

00001088 <__mulsf3x>:
    1088:	c6 df       	rcall	.-116    	; 0x1016 <__fp_split3>
    108a:	a0 f3       	brcs	.-24     	; 0x1074 <__mulsf3+0x4>

0000108c <__mulsf3_pse>:
    108c:	95 9f       	mul	r25, r21
    108e:	d1 f3       	breq	.-12     	; 0x1084 <__mulsf3+0x14>
    1090:	95 0f       	add	r25, r21
    1092:	50 e0       	ldi	r21, 0x00	; 0
    1094:	55 1f       	adc	r21, r21
    1096:	62 9f       	mul	r22, r18
    1098:	f0 01       	movw	r30, r0
    109a:	72 9f       	mul	r23, r18
    109c:	bb 27       	eor	r27, r27
    109e:	f0 0d       	add	r31, r0
    10a0:	b1 1d       	adc	r27, r1
    10a2:	63 9f       	mul	r22, r19
    10a4:	aa 27       	eor	r26, r26
    10a6:	f0 0d       	add	r31, r0
    10a8:	b1 1d       	adc	r27, r1
    10aa:	aa 1f       	adc	r26, r26
    10ac:	64 9f       	mul	r22, r20
    10ae:	66 27       	eor	r22, r22
    10b0:	b0 0d       	add	r27, r0
    10b2:	a1 1d       	adc	r26, r1
    10b4:	66 1f       	adc	r22, r22
    10b6:	82 9f       	mul	r24, r18
    10b8:	22 27       	eor	r18, r18
    10ba:	b0 0d       	add	r27, r0
    10bc:	a1 1d       	adc	r26, r1
    10be:	62 1f       	adc	r22, r18
    10c0:	73 9f       	mul	r23, r19
    10c2:	b0 0d       	add	r27, r0
    10c4:	a1 1d       	adc	r26, r1
    10c6:	62 1f       	adc	r22, r18
    10c8:	83 9f       	mul	r24, r19
    10ca:	a0 0d       	add	r26, r0
    10cc:	61 1d       	adc	r22, r1
    10ce:	22 1f       	adc	r18, r18
    10d0:	74 9f       	mul	r23, r20
    10d2:	33 27       	eor	r19, r19
    10d4:	a0 0d       	add	r26, r0
    10d6:	61 1d       	adc	r22, r1
    10d8:	23 1f       	adc	r18, r19
    10da:	84 9f       	mul	r24, r20
    10dc:	60 0d       	add	r22, r0
    10de:	21 1d       	adc	r18, r1
    10e0:	82 2f       	mov	r24, r18
    10e2:	76 2f       	mov	r23, r22
    10e4:	6a 2f       	mov	r22, r26
    10e6:	11 24       	eor	r1, r1
    10e8:	9f 57       	subi	r25, 0x7F	; 127
    10ea:	50 40       	sbci	r21, 0x00	; 0
    10ec:	8a f0       	brmi	.+34     	; 0x1110 <__mulsf3_pse+0x84>
    10ee:	e1 f0       	breq	.+56     	; 0x1128 <__mulsf3_pse+0x9c>
    10f0:	88 23       	and	r24, r24
    10f2:	4a f0       	brmi	.+18     	; 0x1106 <__mulsf3_pse+0x7a>
    10f4:	ee 0f       	add	r30, r30
    10f6:	ff 1f       	adc	r31, r31
    10f8:	bb 1f       	adc	r27, r27
    10fa:	66 1f       	adc	r22, r22
    10fc:	77 1f       	adc	r23, r23
    10fe:	88 1f       	adc	r24, r24
    1100:	91 50       	subi	r25, 0x01	; 1
    1102:	50 40       	sbci	r21, 0x00	; 0
    1104:	a9 f7       	brne	.-22     	; 0x10f0 <__mulsf3_pse+0x64>
    1106:	9e 3f       	cpi	r25, 0xFE	; 254
    1108:	51 05       	cpc	r21, r1
    110a:	70 f0       	brcs	.+28     	; 0x1128 <__mulsf3_pse+0x9c>
    110c:	5c cf       	rjmp	.-328    	; 0xfc6 <__fp_inf>
    110e:	a6 cf       	rjmp	.-180    	; 0x105c <__fp_szero>
    1110:	5f 3f       	cpi	r21, 0xFF	; 255
    1112:	ec f3       	brlt	.-6      	; 0x110e <__mulsf3_pse+0x82>
    1114:	98 3e       	cpi	r25, 0xE8	; 232
    1116:	dc f3       	brlt	.-10     	; 0x110e <__mulsf3_pse+0x82>
    1118:	86 95       	lsr	r24
    111a:	77 95       	ror	r23
    111c:	67 95       	ror	r22
    111e:	b7 95       	ror	r27
    1120:	f7 95       	ror	r31
    1122:	e7 95       	ror	r30
    1124:	9f 5f       	subi	r25, 0xFF	; 255
    1126:	c1 f7       	brne	.-16     	; 0x1118 <__mulsf3_pse+0x8c>
    1128:	fe 2b       	or	r31, r30
    112a:	88 0f       	add	r24, r24
    112c:	91 1d       	adc	r25, r1
    112e:	96 95       	lsr	r25
    1130:	87 95       	ror	r24
    1132:	97 f9       	bld	r25, 7
    1134:	08 95       	ret

00001136 <__tablejump2__>:
    1136:	ee 0f       	add	r30, r30
    1138:	ff 1f       	adc	r31, r31

0000113a <__tablejump__>:
    113a:	05 90       	lpm	r0, Z+
    113c:	f4 91       	lpm	r31, Z
    113e:	e0 2d       	mov	r30, r0
    1140:	19 94       	eijmp

00001142 <fdevopen>:
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	ec 01       	movw	r28, r24
    114c:	8b 01       	movw	r16, r22
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	31 f4       	brne	.+12     	; 0x115e <fdevopen+0x1c>
    1152:	61 15       	cp	r22, r1
    1154:	71 05       	cpc	r23, r1
    1156:	19 f4       	brne	.+6      	; 0x115e <fdevopen+0x1c>
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	37 c0       	rjmp	.+110    	; 0x11cc <fdevopen+0x8a>
    115e:	6e e0       	ldi	r22, 0x0E	; 14
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	64 d0       	rcall	.+200    	; 0x1230 <calloc>
    1168:	fc 01       	movw	r30, r24
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	a9 f3       	breq	.-22     	; 0x1158 <fdevopen+0x16>
    116e:	80 e8       	ldi	r24, 0x80	; 128
    1170:	83 83       	std	Z+3, r24	; 0x03
    1172:	01 15       	cp	r16, r1
    1174:	11 05       	cpc	r17, r1
    1176:	71 f0       	breq	.+28     	; 0x1194 <fdevopen+0x52>
    1178:	13 87       	std	Z+11, r17	; 0x0b
    117a:	02 87       	std	Z+10, r16	; 0x0a
    117c:	81 e8       	ldi	r24, 0x81	; 129
    117e:	83 83       	std	Z+3, r24	; 0x03
    1180:	80 91 f1 02 	lds	r24, 0x02F1
    1184:	90 91 f2 02 	lds	r25, 0x02F2
    1188:	89 2b       	or	r24, r25
    118a:	21 f4       	brne	.+8      	; 0x1194 <fdevopen+0x52>
    118c:	f0 93 f2 02 	sts	0x02F2, r31
    1190:	e0 93 f1 02 	sts	0x02F1, r30
    1194:	20 97       	sbiw	r28, 0x00	; 0
    1196:	c9 f0       	breq	.+50     	; 0x11ca <fdevopen+0x88>
    1198:	d1 87       	std	Z+9, r29	; 0x09
    119a:	c0 87       	std	Z+8, r28	; 0x08
    119c:	83 81       	ldd	r24, Z+3	; 0x03
    119e:	82 60       	ori	r24, 0x02	; 2
    11a0:	83 83       	std	Z+3, r24	; 0x03
    11a2:	80 91 f3 02 	lds	r24, 0x02F3
    11a6:	90 91 f4 02 	lds	r25, 0x02F4
    11aa:	89 2b       	or	r24, r25
    11ac:	71 f4       	brne	.+28     	; 0x11ca <fdevopen+0x88>
    11ae:	f0 93 f4 02 	sts	0x02F4, r31
    11b2:	e0 93 f3 02 	sts	0x02F3, r30
    11b6:	80 91 f5 02 	lds	r24, 0x02F5
    11ba:	90 91 f6 02 	lds	r25, 0x02F6
    11be:	89 2b       	or	r24, r25
    11c0:	21 f4       	brne	.+8      	; 0x11ca <fdevopen+0x88>
    11c2:	f0 93 f6 02 	sts	0x02F6, r31
    11c6:	e0 93 f5 02 	sts	0x02F5, r30
    11ca:	cf 01       	movw	r24, r30
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	08 95       	ret

000011d6 <puts>:
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	e0 91 f3 02 	lds	r30, 0x02F3
    11e2:	f0 91 f4 02 	lds	r31, 0x02F4
    11e6:	23 81       	ldd	r18, Z+3	; 0x03
    11e8:	21 ff       	sbrs	r18, 1
    11ea:	1b c0       	rjmp	.+54     	; 0x1222 <puts+0x4c>
    11ec:	ec 01       	movw	r28, r24
    11ee:	00 e0       	ldi	r16, 0x00	; 0
    11f0:	10 e0       	ldi	r17, 0x00	; 0
    11f2:	89 91       	ld	r24, Y+
    11f4:	60 91 f3 02 	lds	r22, 0x02F3
    11f8:	70 91 f4 02 	lds	r23, 0x02F4
    11fc:	db 01       	movw	r26, r22
    11fe:	18 96       	adiw	r26, 0x08	; 8
    1200:	ed 91       	ld	r30, X+
    1202:	fc 91       	ld	r31, X
    1204:	19 97       	sbiw	r26, 0x09	; 9
    1206:	88 23       	and	r24, r24
    1208:	31 f0       	breq	.+12     	; 0x1216 <puts+0x40>
    120a:	19 95       	eicall
    120c:	89 2b       	or	r24, r25
    120e:	89 f3       	breq	.-30     	; 0x11f2 <puts+0x1c>
    1210:	0f ef       	ldi	r16, 0xFF	; 255
    1212:	1f ef       	ldi	r17, 0xFF	; 255
    1214:	ee cf       	rjmp	.-36     	; 0x11f2 <puts+0x1c>
    1216:	8a e0       	ldi	r24, 0x0A	; 10
    1218:	19 95       	eicall
    121a:	89 2b       	or	r24, r25
    121c:	11 f4       	brne	.+4      	; 0x1222 <puts+0x4c>
    121e:	c8 01       	movw	r24, r16
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <puts+0x50>
    1222:	8f ef       	ldi	r24, 0xFF	; 255
    1224:	9f ef       	ldi	r25, 0xFF	; 255
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	08 95       	ret

00001230 <calloc>:
    1230:	0f 93       	push	r16
    1232:	1f 93       	push	r17
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	86 9f       	mul	r24, r22
    123a:	80 01       	movw	r16, r0
    123c:	87 9f       	mul	r24, r23
    123e:	10 0d       	add	r17, r0
    1240:	96 9f       	mul	r25, r22
    1242:	10 0d       	add	r17, r0
    1244:	11 24       	eor	r1, r1
    1246:	c8 01       	movw	r24, r16
    1248:	0d d0       	rcall	.+26     	; 0x1264 <malloc>
    124a:	ec 01       	movw	r28, r24
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	21 f0       	breq	.+8      	; 0x1258 <calloc+0x28>
    1250:	a8 01       	movw	r20, r16
    1252:	60 e0       	ldi	r22, 0x00	; 0
    1254:	70 e0       	ldi	r23, 0x00	; 0
    1256:	2d d1       	rcall	.+602    	; 0x14b2 <memset>
    1258:	ce 01       	movw	r24, r28
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	1f 91       	pop	r17
    1260:	0f 91       	pop	r16
    1262:	08 95       	ret

00001264 <malloc>:
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	82 30       	cpi	r24, 0x02	; 2
    126a:	91 05       	cpc	r25, r1
    126c:	10 f4       	brcc	.+4      	; 0x1272 <malloc+0xe>
    126e:	82 e0       	ldi	r24, 0x02	; 2
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	e0 91 f9 02 	lds	r30, 0x02F9
    1276:	f0 91 fa 02 	lds	r31, 0x02FA
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	a0 e0       	ldi	r26, 0x00	; 0
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	30 97       	sbiw	r30, 0x00	; 0
    1284:	39 f1       	breq	.+78     	; 0x12d4 <malloc+0x70>
    1286:	40 81       	ld	r20, Z
    1288:	51 81       	ldd	r21, Z+1	; 0x01
    128a:	48 17       	cp	r20, r24
    128c:	59 07       	cpc	r21, r25
    128e:	b8 f0       	brcs	.+46     	; 0x12be <malloc+0x5a>
    1290:	48 17       	cp	r20, r24
    1292:	59 07       	cpc	r21, r25
    1294:	71 f4       	brne	.+28     	; 0x12b2 <malloc+0x4e>
    1296:	82 81       	ldd	r24, Z+2	; 0x02
    1298:	93 81       	ldd	r25, Z+3	; 0x03
    129a:	10 97       	sbiw	r26, 0x00	; 0
    129c:	29 f0       	breq	.+10     	; 0x12a8 <malloc+0x44>
    129e:	13 96       	adiw	r26, 0x03	; 3
    12a0:	9c 93       	st	X, r25
    12a2:	8e 93       	st	-X, r24
    12a4:	12 97       	sbiw	r26, 0x02	; 2
    12a6:	2c c0       	rjmp	.+88     	; 0x1300 <malloc+0x9c>
    12a8:	90 93 fa 02 	sts	0x02FA, r25
    12ac:	80 93 f9 02 	sts	0x02F9, r24
    12b0:	27 c0       	rjmp	.+78     	; 0x1300 <malloc+0x9c>
    12b2:	21 15       	cp	r18, r1
    12b4:	31 05       	cpc	r19, r1
    12b6:	31 f0       	breq	.+12     	; 0x12c4 <malloc+0x60>
    12b8:	42 17       	cp	r20, r18
    12ba:	53 07       	cpc	r21, r19
    12bc:	18 f0       	brcs	.+6      	; 0x12c4 <malloc+0x60>
    12be:	a9 01       	movw	r20, r18
    12c0:	db 01       	movw	r26, r22
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <malloc+0x62>
    12c4:	ef 01       	movw	r28, r30
    12c6:	9a 01       	movw	r18, r20
    12c8:	bd 01       	movw	r22, r26
    12ca:	df 01       	movw	r26, r30
    12cc:	02 80       	ldd	r0, Z+2	; 0x02
    12ce:	f3 81       	ldd	r31, Z+3	; 0x03
    12d0:	e0 2d       	mov	r30, r0
    12d2:	d7 cf       	rjmp	.-82     	; 0x1282 <malloc+0x1e>
    12d4:	21 15       	cp	r18, r1
    12d6:	31 05       	cpc	r19, r1
    12d8:	f9 f0       	breq	.+62     	; 0x1318 <malloc+0xb4>
    12da:	28 1b       	sub	r18, r24
    12dc:	39 0b       	sbc	r19, r25
    12de:	24 30       	cpi	r18, 0x04	; 4
    12e0:	31 05       	cpc	r19, r1
    12e2:	80 f4       	brcc	.+32     	; 0x1304 <malloc+0xa0>
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	9b 81       	ldd	r25, Y+3	; 0x03
    12e8:	61 15       	cp	r22, r1
    12ea:	71 05       	cpc	r23, r1
    12ec:	21 f0       	breq	.+8      	; 0x12f6 <malloc+0x92>
    12ee:	fb 01       	movw	r30, r22
    12f0:	93 83       	std	Z+3, r25	; 0x03
    12f2:	82 83       	std	Z+2, r24	; 0x02
    12f4:	04 c0       	rjmp	.+8      	; 0x12fe <malloc+0x9a>
    12f6:	90 93 fa 02 	sts	0x02FA, r25
    12fa:	80 93 f9 02 	sts	0x02F9, r24
    12fe:	fe 01       	movw	r30, r28
    1300:	32 96       	adiw	r30, 0x02	; 2
    1302:	44 c0       	rjmp	.+136    	; 0x138c <malloc+0x128>
    1304:	fe 01       	movw	r30, r28
    1306:	e2 0f       	add	r30, r18
    1308:	f3 1f       	adc	r31, r19
    130a:	81 93       	st	Z+, r24
    130c:	91 93       	st	Z+, r25
    130e:	22 50       	subi	r18, 0x02	; 2
    1310:	31 09       	sbc	r19, r1
    1312:	39 83       	std	Y+1, r19	; 0x01
    1314:	28 83       	st	Y, r18
    1316:	3a c0       	rjmp	.+116    	; 0x138c <malloc+0x128>
    1318:	20 91 f7 02 	lds	r18, 0x02F7
    131c:	30 91 f8 02 	lds	r19, 0x02F8
    1320:	23 2b       	or	r18, r19
    1322:	41 f4       	brne	.+16     	; 0x1334 <malloc+0xd0>
    1324:	20 91 02 02 	lds	r18, 0x0202
    1328:	30 91 03 02 	lds	r19, 0x0203
    132c:	30 93 f8 02 	sts	0x02F8, r19
    1330:	20 93 f7 02 	sts	0x02F7, r18
    1334:	20 91 00 02 	lds	r18, 0x0200
    1338:	30 91 01 02 	lds	r19, 0x0201
    133c:	21 15       	cp	r18, r1
    133e:	31 05       	cpc	r19, r1
    1340:	41 f4       	brne	.+16     	; 0x1352 <malloc+0xee>
    1342:	2d b7       	in	r18, 0x3d	; 61
    1344:	3e b7       	in	r19, 0x3e	; 62
    1346:	40 91 04 02 	lds	r20, 0x0204
    134a:	50 91 05 02 	lds	r21, 0x0205
    134e:	24 1b       	sub	r18, r20
    1350:	35 0b       	sbc	r19, r21
    1352:	e0 91 f7 02 	lds	r30, 0x02F7
    1356:	f0 91 f8 02 	lds	r31, 0x02F8
    135a:	e2 17       	cp	r30, r18
    135c:	f3 07       	cpc	r31, r19
    135e:	a0 f4       	brcc	.+40     	; 0x1388 <malloc+0x124>
    1360:	2e 1b       	sub	r18, r30
    1362:	3f 0b       	sbc	r19, r31
    1364:	28 17       	cp	r18, r24
    1366:	39 07       	cpc	r19, r25
    1368:	78 f0       	brcs	.+30     	; 0x1388 <malloc+0x124>
    136a:	ac 01       	movw	r20, r24
    136c:	4e 5f       	subi	r20, 0xFE	; 254
    136e:	5f 4f       	sbci	r21, 0xFF	; 255
    1370:	24 17       	cp	r18, r20
    1372:	35 07       	cpc	r19, r21
    1374:	48 f0       	brcs	.+18     	; 0x1388 <malloc+0x124>
    1376:	4e 0f       	add	r20, r30
    1378:	5f 1f       	adc	r21, r31
    137a:	50 93 f8 02 	sts	0x02F8, r21
    137e:	40 93 f7 02 	sts	0x02F7, r20
    1382:	81 93       	st	Z+, r24
    1384:	91 93       	st	Z+, r25
    1386:	02 c0       	rjmp	.+4      	; 0x138c <malloc+0x128>
    1388:	e0 e0       	ldi	r30, 0x00	; 0
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	cf 01       	movw	r24, r30
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	08 95       	ret

00001394 <free>:
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	09 f4       	brne	.+2      	; 0x139e <free+0xa>
    139c:	87 c0       	rjmp	.+270    	; 0x14ac <free+0x118>
    139e:	fc 01       	movw	r30, r24
    13a0:	32 97       	sbiw	r30, 0x02	; 2
    13a2:	13 82       	std	Z+3, r1	; 0x03
    13a4:	12 82       	std	Z+2, r1	; 0x02
    13a6:	c0 91 f9 02 	lds	r28, 0x02F9
    13aa:	d0 91 fa 02 	lds	r29, 0x02FA
    13ae:	20 97       	sbiw	r28, 0x00	; 0
    13b0:	81 f4       	brne	.+32     	; 0x13d2 <free+0x3e>
    13b2:	20 81       	ld	r18, Z
    13b4:	31 81       	ldd	r19, Z+1	; 0x01
    13b6:	28 0f       	add	r18, r24
    13b8:	39 1f       	adc	r19, r25
    13ba:	80 91 f7 02 	lds	r24, 0x02F7
    13be:	90 91 f8 02 	lds	r25, 0x02F8
    13c2:	82 17       	cp	r24, r18
    13c4:	93 07       	cpc	r25, r19
    13c6:	79 f5       	brne	.+94     	; 0x1426 <free+0x92>
    13c8:	f0 93 f8 02 	sts	0x02F8, r31
    13cc:	e0 93 f7 02 	sts	0x02F7, r30
    13d0:	6d c0       	rjmp	.+218    	; 0x14ac <free+0x118>
    13d2:	de 01       	movw	r26, r28
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	ae 17       	cp	r26, r30
    13da:	bf 07       	cpc	r27, r31
    13dc:	50 f4       	brcc	.+20     	; 0x13f2 <free+0x5e>
    13de:	12 96       	adiw	r26, 0x02	; 2
    13e0:	4d 91       	ld	r20, X+
    13e2:	5c 91       	ld	r21, X
    13e4:	13 97       	sbiw	r26, 0x03	; 3
    13e6:	9d 01       	movw	r18, r26
    13e8:	41 15       	cp	r20, r1
    13ea:	51 05       	cpc	r21, r1
    13ec:	09 f1       	breq	.+66     	; 0x1430 <free+0x9c>
    13ee:	da 01       	movw	r26, r20
    13f0:	f3 cf       	rjmp	.-26     	; 0x13d8 <free+0x44>
    13f2:	b3 83       	std	Z+3, r27	; 0x03
    13f4:	a2 83       	std	Z+2, r26	; 0x02
    13f6:	40 81       	ld	r20, Z
    13f8:	51 81       	ldd	r21, Z+1	; 0x01
    13fa:	84 0f       	add	r24, r20
    13fc:	95 1f       	adc	r25, r21
    13fe:	8a 17       	cp	r24, r26
    1400:	9b 07       	cpc	r25, r27
    1402:	71 f4       	brne	.+28     	; 0x1420 <free+0x8c>
    1404:	8d 91       	ld	r24, X+
    1406:	9c 91       	ld	r25, X
    1408:	11 97       	sbiw	r26, 0x01	; 1
    140a:	84 0f       	add	r24, r20
    140c:	95 1f       	adc	r25, r21
    140e:	02 96       	adiw	r24, 0x02	; 2
    1410:	91 83       	std	Z+1, r25	; 0x01
    1412:	80 83       	st	Z, r24
    1414:	12 96       	adiw	r26, 0x02	; 2
    1416:	8d 91       	ld	r24, X+
    1418:	9c 91       	ld	r25, X
    141a:	13 97       	sbiw	r26, 0x03	; 3
    141c:	93 83       	std	Z+3, r25	; 0x03
    141e:	82 83       	std	Z+2, r24	; 0x02
    1420:	21 15       	cp	r18, r1
    1422:	31 05       	cpc	r19, r1
    1424:	29 f4       	brne	.+10     	; 0x1430 <free+0x9c>
    1426:	f0 93 fa 02 	sts	0x02FA, r31
    142a:	e0 93 f9 02 	sts	0x02F9, r30
    142e:	3e c0       	rjmp	.+124    	; 0x14ac <free+0x118>
    1430:	d9 01       	movw	r26, r18
    1432:	13 96       	adiw	r26, 0x03	; 3
    1434:	fc 93       	st	X, r31
    1436:	ee 93       	st	-X, r30
    1438:	12 97       	sbiw	r26, 0x02	; 2
    143a:	4d 91       	ld	r20, X+
    143c:	5d 91       	ld	r21, X+
    143e:	a4 0f       	add	r26, r20
    1440:	b5 1f       	adc	r27, r21
    1442:	ea 17       	cp	r30, r26
    1444:	fb 07       	cpc	r31, r27
    1446:	79 f4       	brne	.+30     	; 0x1466 <free+0xd2>
    1448:	80 81       	ld	r24, Z
    144a:	91 81       	ldd	r25, Z+1	; 0x01
    144c:	84 0f       	add	r24, r20
    144e:	95 1f       	adc	r25, r21
    1450:	02 96       	adiw	r24, 0x02	; 2
    1452:	d9 01       	movw	r26, r18
    1454:	11 96       	adiw	r26, 0x01	; 1
    1456:	9c 93       	st	X, r25
    1458:	8e 93       	st	-X, r24
    145a:	82 81       	ldd	r24, Z+2	; 0x02
    145c:	93 81       	ldd	r25, Z+3	; 0x03
    145e:	13 96       	adiw	r26, 0x03	; 3
    1460:	9c 93       	st	X, r25
    1462:	8e 93       	st	-X, r24
    1464:	12 97       	sbiw	r26, 0x02	; 2
    1466:	e0 e0       	ldi	r30, 0x00	; 0
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	9b 81       	ldd	r25, Y+3	; 0x03
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	19 f0       	breq	.+6      	; 0x1478 <free+0xe4>
    1472:	fe 01       	movw	r30, r28
    1474:	ec 01       	movw	r28, r24
    1476:	f9 cf       	rjmp	.-14     	; 0x146a <free+0xd6>
    1478:	ce 01       	movw	r24, r28
    147a:	02 96       	adiw	r24, 0x02	; 2
    147c:	28 81       	ld	r18, Y
    147e:	39 81       	ldd	r19, Y+1	; 0x01
    1480:	82 0f       	add	r24, r18
    1482:	93 1f       	adc	r25, r19
    1484:	20 91 f7 02 	lds	r18, 0x02F7
    1488:	30 91 f8 02 	lds	r19, 0x02F8
    148c:	28 17       	cp	r18, r24
    148e:	39 07       	cpc	r19, r25
    1490:	69 f4       	brne	.+26     	; 0x14ac <free+0x118>
    1492:	30 97       	sbiw	r30, 0x00	; 0
    1494:	29 f4       	brne	.+10     	; 0x14a0 <free+0x10c>
    1496:	10 92 fa 02 	sts	0x02FA, r1
    149a:	10 92 f9 02 	sts	0x02F9, r1
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <free+0x110>
    14a0:	13 82       	std	Z+3, r1	; 0x03
    14a2:	12 82       	std	Z+2, r1	; 0x02
    14a4:	d0 93 f8 02 	sts	0x02F8, r29
    14a8:	c0 93 f7 02 	sts	0x02F7, r28
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	08 95       	ret

000014b2 <memset>:
    14b2:	dc 01       	movw	r26, r24
    14b4:	01 c0       	rjmp	.+2      	; 0x14b8 <memset+0x6>
    14b6:	6d 93       	st	X+, r22
    14b8:	41 50       	subi	r20, 0x01	; 1
    14ba:	50 40       	sbci	r21, 0x00	; 0
    14bc:	e0 f7       	brcc	.-8      	; 0x14b6 <memset+0x4>
    14be:	08 95       	ret

000014c0 <_exit>:
    14c0:	f8 94       	cli

000014c2 <__stop_program>:
    14c2:	ff cf       	rjmp	.-2      	; 0x14c2 <__stop_program>
